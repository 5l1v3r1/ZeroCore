[Version:1]
DocumentationLibrary 
{
	var Classes = Array
	{
		Object
		{
			var Name = "AcquireNetHostInfo"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when the net peer host is acquiring project-specific host information."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ReturnHostInfo"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Action"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Base action class."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "The action is queued and not stared or running."
				}
				Property
				{
					var Name = "Completed"
					var Type = "Boolean"
					var Description = "The action ran until it completed."
				}
				Property
				{
					var Name = "Started"
					var Type = "Boolean"
					var Description = "Has the action started?"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Cancel"
					var Description = "Cancel the action and all child actions."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CancelOverride"
					var Description = "Allow inherited actions to perform custom logic."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "ActionState"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ActionDelay"
			var BaseClass = "Action"
			var Library = "EngineLibrary"
			var Description = "Delay action. Delays by time in seconds."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "TimeLeft"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "ActionState"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AddNoiseNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Adds random noise (static) to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AdditiveCutoff"
					var Type = "Real"
					var Description = "The cutoff frequency used for the additive noise component, in Hz."
				}
				Property
				{
					var Name = "AdditiveGain"
					var Type = "Real"
					var Description = "The gain of the additive noise component, in decibels."
				}
				Property
				{
					var Name = "MultiplicativeCutoff"
					var Type = "Real"
					var Description = "The cutoff frequency used for the multiplicative noise component, in Hz."
				}
				Property
				{
					var Name = "MultiplicativeGain"
					var Type = "Real"
					var Description = "The gain of the multiplicative noise component, in decibels."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AdditiveSynthNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Generates audio using additive synthesis."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddHarmonic"
					var Description = "Adds a new harmonic to the additive synth notes. The first value is the multiplier that will be applied to the base frequency, the second is the volume of this harmonic, and the third (the AdsrEnvelope object) contains the envelope-related values."
					var ReturnType = "Void"
					var Parameters = "(Real frequencyMultiplier, Real volume, AdsrEnvelope envelope, SynthWaveType type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frequencyMultiplier"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "envelope"
							var Type = "AdsrEnvelope"
							var Description = ""
						}
						Parameter
						{
							var Name = "type"
							var Type = "SynthWaveType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NoteOff"
					var Description = "Stops playing all current notes at the specified MIDI value."
					var ReturnType = "Void"
					var Parameters = "(Real midiNote)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "midiNote"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NoteOn"
					var Description = "Starts playing a new note. The first parameter is the MIDI note value (range is 0 to 127), and the second is the volume modification that should be applied to this note (a value of 1.0 does not change the volume, while 0.0 would be silence)."
					var ReturnType = "Void"
					var Parameters = "(Real midiNote, Real volume)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "midiNote"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAllHarmonics"
					var Description = "Removes all current harmonics. You must add at least one harmonic before playing a note."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StopAllNotes"
					var Description = "Stops playing all current notes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AdsrEnvelope"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = "Used to control harmonics of notes played by the AdditiveSynthNode ."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttackTime"
					var Type = "Real"
					var Description = "The time, in seconds, for this harmonic to interpolate its volume from 0 to 1.0 when it starts playing."
				}
				Property
				{
					var Name = "DecayTime"
					var Type = "Real"
					var Description = "The time, in seconds, for this harmonic to interpolate logarithmically from 1.0 to the SustainLevel after the attack."
				}
				Property
				{
					var Name = "DelayTime"
					var Type = "Real"
					var Description = "The time, in seconds, between when the note starts and when this harmonic starts playing."
				}
				Property
				{
					var Name = "ReleaseTime"
					var Type = "Real"
					var Description = "The time, in seconds, for this harmonic to interpolate logarithmically from the SustainLevel to 0."
				}
				Property
				{
					var Name = "SustainLevel"
					var Type = "Real"
					var Description = "The volume level (1.0 is full volume) to use for the sustain period."
				}
				Property
				{
					var Name = "SustainTime"
					var Type = "Real"
					var Description = "The time, in seconds, for this harmonic to stay at the SustainLevel after the attack and decay. A value of 0 will make the harmonic play indefinitely until NoteOff is called."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AnimationGraph"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "The AnimationGraph component controls animation for an individual game object. It stores all needed per instance (vs what is shared in the animation resource) manages the current time and enumerates the animation sets. The AnimationGraph can animate multiple child objects and properties enabling bone animation, and other hierarchical animations."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Is the animGraph animating?"
				}
				Property
				{
					var Name = "ActiveNode"
					var Type = "AnimationNode"
					var Description = ""
				}
				Property
				{
					var Name = "TimeScale"
					var Type = "Real"
					var Description = "Rate at that the active animations plays relative to space time."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyFrame"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnimationFrame frame)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frame"
							var Type = "AnimationFrame"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateBasicNode"
					var Description = "Node creation functions."
					var ReturnType = "BasicAnimation"
					var Parameters = "(Animation animation, AnimationPlayMode mode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "mode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateChainNode"
					var Description = ""
					var ReturnType = "ChainNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateCrossBlendNode"
					var Description = ""
					var ReturnType = "CrossBlend"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateDirectBlendNode"
					var Description = ""
					var ReturnType = "DirectBlend"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateSelectiveNode"
					var Description = ""
					var ReturnType = "SelectiveNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsPlayingInGraph"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Animation animation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMetaModified"
					var Description = "We need to re-link all objects whenever the meta database has been modified. This should only ever happen if this object is in the editor."
					var ReturnType = "Void"
					var Parameters = "(MetaTypeEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "MetaTypeEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnUpdate"
					var Description = "Updates the root node on each from and applies it to the object tree."
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreviewGraph"
					var Description = "Editor preview functionality."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PrintGraph"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetAnimationNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetUpPlayData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Animation animation, PlayData playData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "playData"
							var Type = "PlayData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AnimationGraphEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Animation"
					var Type = "Animation"
					var Description = ""
				}
				Property
				{
					var Name = "Node"
					var Type = "AnimationNode"
					var Description = ""
				}
				Property
				{
					var Name = "PlayMode"
					var Type = "AnimationPlayMode"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AnimationNode"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CollapseToPoseOnFinish"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Duration"
					var Type = "Real"
					var Description = "The duration of the node."
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Time"
					var Type = "Real"
					var Description = "Time getter/setter."
				}
				Property
				{
					var Name = "TimeScale"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CollapseToPose"
					var Description = "Collapses all children to a pose node on the next Update."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDisplayName"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNormalizedTime"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetParent"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasUpdatedAtLeastOnce"
					var Description = "Whether or not this node has ever been updated."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasUpdatedThisFrame"
					var Description = "If this node has already been updated, we shouldn't do anything."
					var ReturnType = "Boolean"
					var Parameters = "(Integer frameId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsActive"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsPlayingInNode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(string animName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animName"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PrintNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer tabs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "tabs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReLinkAnimations"
					var Description = "Used when the meta database has changed."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetNormalizedTime"
					var Description = "A value between [0-1]."
					var ReturnType = "Void"
					var Parameters = "(Real normalizedTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normalizedTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(AnimationGraph animGraph, Real dt, Integer frameId, EventList eventsToSend)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animGraph"
							var Type = "AnimationGraph"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameId"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventsToSend"
							var Type = "EventList"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AnyHandle"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AnyType"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ArrayRange[Byte]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ArrayRange[Byte]"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Byte"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ArrayRange[any]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ArrayRange[any]"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "any"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Array[Byte]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ArrayRange[Byte]"
					var Description = ""
				}
				Property
				{
					var Name = "Capacity"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "LastIndex"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Array[any]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ArrayRange[any]"
					var Description = ""
				}
				Property
				{
					var Name = "Capacity"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "LastIndex"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "AsciiEncoding"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BandPassNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a band pass filter to audio generated by its input SoundNodes (removes low and high frequencies)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CentralFrequency"
					var Type = "Real"
					var Description = "The center frequency of the band. Frequencies above and below this band will be attenuated."
				}
				Property
				{
					var Name = "QualityFactor"
					var Type = "Real"
					var Description = "The Q number of the band pass filter: higher numbers make the band smaller, while smaller numbers make it wider. The default value is 0.669."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BaseCollisionEvent"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "Common interface for all collision events. Contains the core functionality of inspecting the contained manifold."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ContactPointCount"
					var Type = "Integer"
					var Description = "Returns how many points of contact there are."
				}
				Property
				{
					var Name = "ContactPoints"
					var Type = "ContactPointRange"
					var Description = "Returns a range to iterate through all of the contact points."
				}
				Property
				{
					var Name = "IsGhost"
					var Type = "Boolean"
					var Description = "Returns whether or not this was a ghost collision."
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = "The object that this event was sent to."
				}
				Property
				{
					var Name = "OtherObject"
					var Type = "Cog"
					var Description = "The other object in this event. There were two objects A and B, we sent to A so this is B."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetCollider"
					var Description = ""
					var ReturnType = "Collider"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFirstPoint"
					var Description = "Returns the point that caused the being/end to happen."
					var ReturnType = "ContactPoint"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOtherCollider"
					var Description = ""
					var ReturnType = "Collider"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPoint"
					var Description = "Returns the manifold point at the given index. This is for C++ use and only for those who know what they are doing."
					var ReturnType = "const ManifoldPoint"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MatchCollisionFilterOrder"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CollisionFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filter"
							var Type = "CollisionFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const Manifold manifold, string eventType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "manifold"
							var Type = "const Manifold"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventType"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BaseSprite"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Common interface for 2D Sprite based graphicals."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GeometryMode"
					var Type = "SpriteGeometryMode"
					var Description = ""
				}
				Property
				{
					var Name = "VertexColor"
					var Type = "Real4"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ComponentAdded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentRemoved"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalToViewMatrix"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Mat4 localToView, Mat4 localToWorld, Mat4 worldToView)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localToView"
							var Type = "Mat4"
							var Description = ""
						}
						Parameter
						{
							var Name = "localToWorld"
							var Type = "Mat4"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldToView"
							var Type = "Mat4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMaterial"
					var Description = ""
					var ReturnType = "Material"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetViewPlaneAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "(Aabb localAabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localAabb"
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BitStream"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Bit-packed data stream."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Alignment"
					var Type = "BitAlignment"
					var Description = "Internal bit alignment policy."
				}
				Property
				{
					var Name = "BitsRead"
					var Type = "Bits"
					var Description = "Also next read position."
				}
				Property
				{
					var Name = "BitsWritten"
					var Type = "Bits"
					var Description = "Also next write position."
				}
				Property
				{
					var Name = "ByteCapacity"
					var Type = "Bytes"
					var Description = "Binary data capacity."
				}
				Property
				{
					var Name = "Data"
					var Type = "byte"
					var Description = "Binary data array."
				}
				Property
				{
					var Name = "WriteBit"
					var Type = "R_ENABLE_IF(is_scalar<Tvalue,Bits)Serialize(SerializeDirectionR_ENABLE_IF(is_enum_or_integral<Tvalueis_enum_or_integral<Rvalue,Bits)SerializeQuantized(SerializeDirectionR_ENABLE_IF(is_floating_point<Tvalue,Bits)SerializeQuantized(SerializeDirectionR_ENABLE_IF(is_enum_or_integral<Rvalue,Bits)SerializeQuantized(SerializeDirectionR_ENABLE_IF(is_scalar<Tvalue,Bits)SerializeQuantized(SerializeDirectionBits"
					var Description = "Serializes a user-defined value Returns the number of bits serialized if successful, else 0."
				}
				Property
				{
					var Name = "axValue_"
					var Type = "const Rconst R"
					var Description = ""
				}
				Property
				{
					var Name = "const"
					var Type = "const Rconst Rconst Rquantum_"
					var Description = ""
				}
				Property
				{
					var Name = "inValue_"
					var Type = "const R"
					var Description = ""
				}
				Property
				{
					var Name = "quantum_"
					var Type = "const Rconst Rconst R"
					var Description = ""
				}
				Property
				{
					var Name = "value_"
					var Type = "WrapAware"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Append"
					var Description = "Appends to the back of the BitStream (Writes up to dataBits, Read from specified bitStream) Returns the number of bits appended."
					var ReturnType = "Bits"
					var Parameters = "(const BitStream bitStream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bitStream"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Append"
					var Description = "Appends to the back of the BitStream (Writes up to dataBits, Read from specified bitStream) Returns the number of bits appended."
					var ReturnType = "Bits"
					var Parameters = "(const BitStream bitStream, Bits dataBits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bitStream"
							var Type = "const BitStream"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBits"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AppendAll"
					var Description = "Appends the entirety of the value BitStream to back of this BitStream Returns the number of bits appended."
					var ReturnType = "Bits"
					var Parameters = "(const BitStream value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AssignRemainder"
					var Description = "Clears this BitStream and appends the unread remainder of the value BitStream Returns the number of bits appended."
					var ReturnType = "Bits"
					var Parameters = "(const BitStream value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears all data written and resets the bitstream, optionally freeing reserved memory."
					var ReturnType = "Void"
					var Parameters = "(Boolean freeMemory)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "freeMemory"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearBitsRead"
					var Description = "Clears the number of bits read."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearBitsWritten"
					var Description = "Clears the number of bits written."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBitCapacity"
					var Description = "Returns the data array capacity in bits."
					var ReturnType = "Bits"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBitsSerialized"
					var Description = "Returns the number of bits serialized."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBitsUnread"
					var Description = "Returns the number of bits unread."
					var ReturnType = "Bits"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBitsUnwritten"
					var Description = "Returns the number of bits unwritten."
					var ReturnType = "Bits"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBytesRead"
					var Description = "Returns the number of bytes read (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Bytes"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBytesSerialized"
					var Description = "Returns the number of bytes serialized (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Bytes"
					var Parameters = "(SerializeDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBytesUnread"
					var Description = "Returns the number of bytes unread (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Bytes"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBytesUnwritten"
					var Description = "Returns the number of bytes unwritten (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Bytes"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBytesWritten"
					var Description = "Returns the number of bytes written (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Bytes"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDataExposed"
					var Description = "Returns the data array exposed for writing to the internal buffer directly. Be sure there's enough room by calling Reserve() prior to this call and inform the BitStream of data written by calling SetBitsWritten() or SetBytesWritten() afterwards."
					var ReturnType = "byte"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initializes the BitStream ."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEmpty"
					var Description = "Returns true if the BitStream is empty (0 bits written), else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Measure"
					var Description = "Measures a boolean value Returns the number of bits required to serialize the specified value."
					var ReturnType = "Bits"
					var Parameters = "(Boolean value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Measure"
					var Description = "Measures a UintN value Returns the number of bits required to serialize the specified value."
					var ReturnType = "Bits"
					var Parameters = "(UintN<N,WrapAware> value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "UintN<N,WrapAware>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Measure"
					var Description = "Measures a fixed array of values Returns the number of bits required to serialize the specified value."
					var ReturnType = "Bits"
					var Parameters = "(const T() array)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "array"
							var Type = "const T()"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Measure"
					var Description = "Measures a fixed array of values Returns the number of bits required to serialize the specified value."
					var ReturnType = "Bits"
					var Parameters = "(const T array, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "array"
							var Type = "const T"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Measure"
					var Description = "Measures a string value Returns the number of bits required to serialize the specified value."
					var ReturnType = "Bits"
					var Parameters = "(const string value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PeekStringBytes"
					var Description = "Returns the byte length of the string to be read next (including null terminator), else 0."
					var ReturnType = "Bytes"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures a floating-point value Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_floating_point<Tvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_floating_point<Tvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures an integral value Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_integral<Tvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_integral<Tvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures an enum value Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_enum<Tvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_enum<Tvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures a user-defined value Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_scalar<Tvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_scalar<Tvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures an enum value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_enum<Rvalueis_enum_or_integral<Rvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_enum<Rvalueis_enum_or_integral<Rvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures an integral value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_integral<Rvalueis_integral<Rvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_integral<Rvalueis_integral<Rvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures a floating-point value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_floating_point<Rvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_floating_point<Rvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures a UintN value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_enum_or_integral<Rvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_enum_or_integral<Rvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "R_ENABLE_IF"
					var Description = "Measures a user-defined value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value."
					var ReturnType = "static "
					var Parameters = "(is_scalar<Rvalue, Bits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "is_scalar<Rvalue"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Read"
					var Description = "Reads a fixed array of values Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(T array, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "array"
							var Type = "T"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Read"
					var Description = "Reads a UintN value Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(UintN<N,WrapAware> value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "UintN<N,WrapAware>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Read"
					var Description = "Reads a fixed array of values Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(T() array)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "array"
							var Type = "T()"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Read"
					var Description = "Reads a boolean value Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(Boolean value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Read"
					var Description = "Reads a string value Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(string value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadBit"
					var Description = "Reads a single bit Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(Boolean value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadBits"
					var Description = "Reads multiple bits Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(byte data, Bits dataBits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBits"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadByte"
					var Description = "Reads a single byte Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(uint8 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "uint8"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadBytes"
					var Description = "Reads multiple bytes Returns the number of bits read if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(byte data, Bytes dataBytes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBytes"
							var Type = "Bytes"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadUntilByteAligned"
					var Description = "Reads until a byte boundary is reached Returns the number of bits read."
					var ReturnType = "Bits"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Reallocate"
					var Description = "Reallocates to the specified capacity, copying data if copyData is enabled."
					var ReturnType = "Void"
					var Parameters = "(Bytes capacity, Boolean copyData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "capacity"
							var Type = "Bytes"
							var Description = ""
						}
						Parameter
						{
							var Name = "copyData"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReallocateIfNecessary"
					var Description = "Reallocates if necessary to fit the additional bits."
					var ReturnType = "Void"
					var Parameters = "(Bits additionalBits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "additionalBits"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Reserve"
					var Description = "Reserves at least the specified memory capacity, reallocating if necessary."
					var ReturnType = "Void"
					var Parameters = "(Bytes capacity)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "capacity"
							var Type = "Bytes"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes an integral value Returns the number of bits serialized if successful, else 0."
					var ReturnType = "R_ENABLE_IF(is_enum_or_integral<Tvalue,Bits)Serialize(SerializeDirectionR_ENABLE_IF"
					var Parameters = "(SerializeDirection direction, const T() array)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "array"
							var Type = "const T()"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes a boolean value Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, Boolean value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes a string value Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, string value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes a fixed array of values Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, const T array, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "array"
							var Type = "const T"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes a UintN value Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, UintN<N,WrapAware> value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "UintN<N,WrapAware>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeBit"
					var Description = "Serializes a single bit Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, Boolean value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeBits"
					var Description = "Serializes multiple bits Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, byte data, Bits dataBits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBits"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeByte"
					var Description = "Serializes a single byte Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, uint8 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "uint8"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeBytes"
					var Description = "Serializes multiple bytes Returns the number of bits serialized if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(SerializeDirection direction, byte data, Bytes dataBytes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "SerializeDirection"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBytes"
							var Type = "Bytes"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetBytesRead"
					var Description = "Sets the number of bytes read."
					var ReturnType = "Void"
					var Parameters = "(Bytes bytesRead)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bytesRead"
							var Type = "Bytes"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetBytesWritten"
					var Description = "Sets the number of bytes written."
					var ReturnType = "Void"
					var Parameters = "(Bytes bytesWritten)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bytesWritten"
							var Type = "Bytes"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrimFront"
					var Description = "Trims the front of the BitStream (Writes up to dataBits bits to a copy, Read from this bitStream, and overwrites this bitStream with the copy) Returns the number of bits trimmed."
					var ReturnType = "Bits"
					var Parameters = "(Bits dataBits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dataBits"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrimFront"
					var Description = "Trims the front of the BitStream (Writes up to dataBits bits to a copy, Read from this bitStream, and overwrites this bitStream with the copy) Returns the number of bits trimmed."
					var ReturnType = "Bits"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unread"
					var Description = "Unreads the specified number of bits."
					var ReturnType = "Void"
					var Parameters = "(Bits bitsToUnread)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bitsToUnread"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Write"
					var Description = "Writes a boolean value Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(Boolean value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Write"
					var Description = "Writes a string value Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(const string value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Write"
					var Description = "Writes a fixed array of values Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(const T() array)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "array"
							var Type = "const T()"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Write"
					var Description = "Writes a UintN value Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(UintN<N,WrapAware> value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "UintN<N,WrapAware>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Write"
					var Description = "Writes a fixed array of values Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(const T array, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "array"
							var Type = "const T"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WriteBits"
					var Description = "Writes multiple bits Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(const byte data, Bits dataBits)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBits"
							var Type = "Bits"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WriteByte"
					var Description = "Writes a single byte Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(uint8 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "uint8"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WriteBytes"
					var Description = "Writes multiple bytes Returns the number of bits written if successful, else 0."
					var ReturnType = "Bits"
					var Parameters = "(const byte data, Bytes dataBytes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataBytes"
							var Type = "Bytes"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WriteUntilByteAligned"
					var Description = "Writes until a byte boundary is reached Returns the number of bits written."
					var ReturnType = "Bits"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const BitStream rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const BitStream rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Move Assignment Operator."
					var ReturnType = "BitStream"
					var Parameters = "(MoveReference<BitStream> rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "MoveReference<BitStream>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Copy Assignment Operator."
					var ReturnType = "BitStream"
					var Parameters = "(const BitStream rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators."
					var ReturnType = "Boolean"
					var Parameters = "(const BitStream rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Bone"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Transform"
					var Type = "Transform"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalTransform"
					var Description = ""
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NotifySkeletonModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnCogNameChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean2"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean2x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean2x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean2x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean3x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean3x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean3x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M23"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "W"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "WAxis"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WW"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "WWW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WWWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WWXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WWYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WWZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "WXW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WXWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WXXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WXYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WXZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "WYW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WYWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WYXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WYYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WYZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "WZW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WZWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WZXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WZYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "WZZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XW"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XWW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XWWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XWXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XWYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XWZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XXW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XYW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "XZW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YW"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YWW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YWWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YWXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YWYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YWZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YXW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YYW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "YZW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZW"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZWW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Boolean2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZW"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Boolean3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZW"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Boolean4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean4"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean4x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean4x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M32"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Boolean4x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M23"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M32"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "M33"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BoundType"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BaseType"
					var Type = "BoundType"
					var Description = ""
				}
				Property
				{
					var Name = "DefaultConstructor"
					var Type = "Function"
					var Description = ""
				}
				Property
				{
					var Name = "Destructor"
					var Type = "Function"
					var Description = ""
				}
				Property
				{
					var Name = "Fields"
					var Type = "FieldRange"
					var Description = ""
				}
				Property
				{
					var Name = "Functions"
					var Type = "FunctionRange"
					var Description = ""
				}
				Property
				{
					var Name = "GetterSetters"
					var Type = "GetterSetterRange"
					var Description = ""
				}
				Property
				{
					var Name = "IsNative"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsTypeOrBaseNative"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Members"
					var Type = "MemberRange"
					var Description = ""
				}
				Property
				{
					var Name = "PreConstructor"
					var Type = "Function"
					var Description = ""
				}
				Property
				{
					var Name = "Properties"
					var Type = "PropertyRange"
					var Description = ""
				}
				Property
				{
					var Name = "TemplateBaseName"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BoxCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "BoxCollider represents the collision volume of a box defined by a size."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "HalfSize"
					var Type = "Real3"
					var Description = "The half size (from the center to the upper-right corner) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues)."
				}
				Property
				{
					var Name = "Size"
					var Type = "Real3"
					var Description = "The size (from min to max) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues)."
				}
				Property
				{
					var Name = "WorldSize"
					var Type = "Real3"
					var Description = "The size of the box after the transform is applied (scale and rotation)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CacheWorldValues"
					var Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BoxParticleEmitter"
			var BaseClass = "ParticleEmitterShared"
			var Library = "GraphicsLibrary"
			var Description = "Emits particles inside a box."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "EmitParticles"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity, Real timeAlive)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "velocity"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeAlive"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BuildEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "BuoyancyEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a buoyancy force to an object in a given direction."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DebugDrawRuntime"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Density"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Detail"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Gravity"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeOverlapPercent"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Collider collider, Vec3 volumeCenter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "volumeCenter"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OverlapsRegion"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Collider object)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "object"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PointInObject"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Collider object, Vec3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "object"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "point"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Byte"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Camera"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "3D Camera class. The camera uses the position and rotation of the Transform component."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FarPlane"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "FieldOfView"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "NearPlane"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "PerspectiveMode"
					var Type = "PerspectiveMode"
					var Description = ""
				}
				Property
				{
					var Name = "Size"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WorldDirection"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldTranslation"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldUp"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetApiPerspectiveTransform"
					var Description = ""
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAspectRatio"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCameraViewportCog"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFrustum"
					var Description = ""
					var ReturnType = "Frustum"
					var Parameters = "(Real aspect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aspect"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPerspectiveTransform"
					var Description = ""
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewBlock block)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "block"
							var Type = "ViewBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetViewTransform"
					var Description = ""
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetAspectRatio"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real aspectRatio)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aspectRatio"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CameraViewport"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CameraPath"
					var Type = "CogPath"
					var Description = ""
				}
				Property
				{
					var Name = "FinalTexture"
					var Type = "Texture"
					var Description = ""
				}
				Property
				{
					var Name = "ForwardViewportEvents"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "MarginColor"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "MouseWorldRay"
					var Type = "Ray"
					var Description = "Get the world ray starting from the mouse."
				}
				Property
				{
					var Name = "NormalizedOffset"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "NormalizedSize"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "RenderInEditor"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RenderInGame"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RenderOrder"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "RenderToViewport"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RendererPath"
					var Type = "CogPath"
					var Description = ""
				}
				Property
				{
					var Name = "ResolutionOrAspect"
					var Type = "Real2"
					var Description = "Target resolution or base aspect ratio used with scaling mode."
				}
				Property
				{
					var Name = "ViewToPerspective"
					var Type = "Real4x4"
					var Description = ""
				}
				Property
				{
					var Name = "ViewportHasFocus"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ViewportOffset"
					var Type = "Real2"
					var Description = "The current offset of the viewport, in pixels."
				}
				Property
				{
					var Name = "ViewportOffsetWithMargin"
					var Type = "Real2"
					var Description = "The current offset of the viewport's margin, in pixels."
				}
				Property
				{
					var Name = "ViewportResolution"
					var Type = "Real2"
					var Description = "The current resolution of the viewport."
				}
				Property
				{
					var Name = "ViewportResolutionWithMargin"
					var Type = "Real2"
					var Description = "The current resolution of the viewport including margin."
				}
				Property
				{
					var Name = "ViewportScaling"
					var Type = "ViewportScaling"
					var Description = ""
				}
				Property
				{
					var Name = "WorldToPerspective"
					var Type = "Real4x4"
					var Description = ""
				}
				Property
				{
					var Name = "WorldToView"
					var Type = "Real4x4"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CheckSetup"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearSetup"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ConfigureViewport"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateViewport"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAspectRatio"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCameraCog"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGameWidget"
					var Description = ""
					var ReturnType = "GameWidget"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetViewportSize"
					var Description = ""
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnCameraDestroyed"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ObjectEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnCameraPathChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogPathEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "CogPathEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnRenderTasksUpdateInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RenderTasksEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "RenderTasksEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnUpdateActiveCameras"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScreenToViewport"
					var Description = "Convert a screen point to a point reletive to the viewport."
					var ReturnType = "Vec2"
					var Parameters = "(Vec2 screenPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScreenToWorldPlane"
					var Description = "Convert the screen point to a position on a given plane."
					var ReturnType = "Vec3"
					var Parameters = "(Vec2 screenPoint, Vec3 worldPlaneNormal, Vec3 worldPlanePosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Vec2"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPlaneNormal"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPlanePosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScreenToWorldRay"
					var Description = "Convert a screen point to a ray."
					var ReturnType = "Ray"
					var Parameters = "(Vec2 screenPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScreenToWorldViewPlane"
					var Description = "Convert the screen point to a position on the view plane at a given depth."
					var ReturnType = "Vec3"
					var Parameters = "(Vec2 screenPoint, Real viewDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Vec2"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScreenToWorldZPlane"
					var Description = "Convert the screen point to a position on the z plane at a given depth."
					var ReturnType = "Vec3"
					var Parameters = "(Vec2 screenPoint, Real worldDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Vec2"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendSortEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(GraphicalSortEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "GraphicalSortEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetActiveCamera"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetGameWidgetOverride"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(GameWidget gameWidget)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "gameWidget"
							var Type = "GameWidget"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ViewPlaneSize"
					var Description = "Size of the screen at a Depth."
					var ReturnType = "Vec2"
					var Parameters = "(Real viewDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ViewportTakeFocus"
					var Description = "Returns whether or not it succeeded in taking focus. It can fail if mRenderToViewport is false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ViewportToScreen"
					var Description = "Convert a viewport point to a screen point."
					var ReturnType = "Vec2"
					var Parameters = "(Vec2 viewportPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewportPoint"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WorldToScreen"
					var Description = "Convert a world point to a screen point."
					var ReturnType = "Vec2"
					var Parameters = "(Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CapsuleCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Capsule Collider is a basic collision primitive of a capsule."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "AxisDirection"
					var Description = "The direction that the height is defined along. Allows the user to change whether the capsule's height is along the x, y, or z axis."
				}
				Property
				{
					var Name = "Height"
					var Type = "Real"
					var Description = "The local space distance from the center of one sphere to another."
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The local space radius of the spheres at the capsule edges."
				}
				Property
				{
					var Name = "ScalingMode"
					var Type = "CapsuleScalingMode"
					var Description = "How should non-uniform scale affect the capsules size. Should a scale of 2 on the height axis double the total capsule size or should it double the capsule height?"
				}
				Property
				{
					var Name = "WorldCylinderHeight"
					var Type = "Real"
					var Description = "The full height of the capsule's cylinder after the scale is applied (world distance from one sphere to another)."
				}
				Property
				{
					var Name = "WorldRadius"
					var Type = "Real"
					var Description = "The radius of the sphere caps after scale is applied."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CacheWorldValues"
					var Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldBoundingSphereInternal"
					var Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldPoints"
					var Description = "Computes the center points of both sphere caps."
					var ReturnType = "Void"
					var Parameters = "(Vec3Ref pointA, Vec3Ref pointB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pointA"
							var Type = "Vec3Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "pointB"
							var Type = "Vec3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHeightIndex"
					var Description = "The index of the height axis."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRadiiIndices"
					var Description = "The index of both radius axes."
					var ReturnType = "Void"
					var Parameters = "(Integer rIndex0, Integer rIndex1)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rIndex0"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "rIndex1"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldCylinderHalfHeight"
					var Description = "The half height of the capsule's cylinder after scale is applied (distance from center to a sphere radius)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ChorusNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a chorus filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FeedbackPercent"
					var Type = "Real"
					var Description = "The percentage of output which is fed back into the filter as input."
				}
				Property
				{
					var Name = "MaxDelayMillisec"
					var Type = "Real"
					var Description = "The maximum delay reached by the modulation. It will oscillate between the MinDelayMillisec value and this value at the frequency set by the ModulationFrequency property."
				}
				Property
				{
					var Name = "MinDelayMillisec"
					var Type = "Real"
					var Description = "The minimum delay reached by the modulation. It will oscillate between the this value and the MaxDelayMillisec value at the frequency set by the ModulationFrequency property."
				}
				Property
				{
					var Name = "ModulationFrequency"
					var Type = "Real"
					var Description = "The frequency of the oscillator which varies the modulation."
				}
				Property
				{
					var Name = "OffsetMillisec"
					var Type = "Real"
					var Description = "The offset value of the chorus filter, in milliseconds."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Cog"
			var BaseClass = "BaseCog"
			var Library = "EngineLibrary"
			var Description = "Game Object Composition class. This class is the foundational object for all dynamic objects in the game world. The Cog is a piece of logical interactive content and the primary mechanism game systems (Graphics, Physics , Etc.) provide functionality and communicate. A Cog can be anything from physical objects like trees, tanks, players to to logical objects like teams, triggers, or AI objects."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Actions"
					var Type = "Actions"
					var Description = ""
				}
				Property
				{
					var Name = "Archetype"
					var Type = "Archetype"
					var Description = ""
				}
				Property
				{
					var Name = "BaseArchetype"
					var Type = "Archetype"
					var Description = ""
				}
				Property
				{
					var Name = "Children"
					var Type = "HierarchyListRange"
					var Description = "Grab the children directly from the hierarchy component."
				}
				Property
				{
					var Name = "ComponentCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "EditorViewportHidden"
					var Type = "Boolean"
					var Description = "Hidden from view used for editor."
				}
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Get the GameSession that owns us and our space."
				}
				Property
				{
					var Name = "IsBeingDestroyed"
					var Type = "Boolean"
					var Description = "Has this cog already been destroyed and is waiting for the frame to end (delayed destruction)."
				}
				Property
				{
					var Name = "LevelSettings"
					var Type = "Cog"
					var Description = "Get the object named 'LevelSettings', a special object where we can put components for our level."
				}
				Property
				{
					var Name = "Locked"
					var Type = "Boolean"
					var Description = "Not able to be modified or selected in the viewport."
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Name of the Object."
				}
				Property
				{
					var Name = "ObjectViewHidden"
					var Type = "Boolean"
					var Description = "If the object needs to not show up in the object view."
				}
				Property
				{
					var Name = "Parent"
					var Type = "Cog"
					var Description = "Get the parent of this object in the Hierarchy ."
				}
				Property
				{
					var Name = "Persistent"
					var Type = "Boolean"
					var Description = "Object will not be destroyed on level load or change."
				}
				Property
				{
					var Name = "RuntimeId"
					var Type = "Integer"
					var Description = "Gets a unique integer for this object (used primarily for debugging)"
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = ""
				}
				Property
				{
					var Name = "Transient"
					var Type = "Boolean"
					var Description = "Object will not be saved."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddComponent"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(type component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponentById"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(BoundType typeId, Component component, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponentByMeta"
					var Description = "Add a component by meta."
					var ReturnType = "Boolean"
					var Parameters = "(BoundType meta)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "meta"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponentByName"
					var Description = "Add a component by name."
					var ReturnType = "Boolean"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponentInterface"
					var Description = "Add a component interface."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponentInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponentNoInit"
					var Description = "Add a component without initializing it yet."
					var ReturnType = "Component"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AssignArchetype"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AttachTo"
					var Description = "Attach to a parent object."
					var ReturnType = "Void"
					var Parameters = "(Cog parent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "parent"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AttachToRelative"
					var Description = "Attach to a parent object and compute the new transform so that the objects are relative."
					var ReturnType = "Void"
					var Parameters = "(Cog parent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "parent"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CheckForAddition"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(BoundType metaOfComponent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "metaOfComponent"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CheckForAdditionWithNotify"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(BoundType metaOfComponent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "metaOfComponent"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CheckForRemovalWithNotify"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(BoundType metaOfComponent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "metaOfComponent"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearArchetype"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = "Clones this cog."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAndInitializeFromStream"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(Space space, Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateFromDataBlock"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(Space space, DataBlock block)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "block"
							var Type = "DataBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateFromString"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(Space space, StringParam stringData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "stringData"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Calls DebugDraw on all components in this cog."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DeleteComponents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Destroy"
					var Description = "Queues the cog up for delayed destruction (at the end of the frame). Check IsBeingDestroyed to see if a cog has already had destroy called."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detach"
					var Description = "Detach from a parent object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DetachRelative"
					var Description = "Detach from a parent object and compute the new transform so that the objects are relative."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchDown"
					var Description = "Dispatches an event down the tree on all children recursively (pre-order traversal)"
					var ReturnType = "Void"
					var Parameters = "(string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchEvent"
					var Description = "Dispatches an event on this object."
					var ReturnType = "Void"
					var Parameters = "(string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchUp"
					var Description = "Dispatches an event up the tree on each parent recursively (pre-order traversal)"
					var ReturnType = "Void"
					var Parameters = "(string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindAllChildrenByName"
					var Description = ""
					var ReturnType = "HierarchyNameRange"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindChildByChildId"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(Guid childId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "childId"
							var Type = "Guid"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindChildByName"
					var Description = "Find a child object with the given name."
					var ReturnType = "Cog"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastDeepestChild"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindNearestArchetype"
					var Description = "Same as FindNearestParentArchetype except that it includes this Cog ."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindNearestArchetypeContext"
					var Description = "This will find either the root Archetype , or the nearest locally added Archetype ."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindNearestParentArchetype"
					var Description = "Finds the nearest parent that has an Archetype (does not include itself)."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindNextInOrder"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindNextSibling"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindPreviousInOrder"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindPreviousSibling"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindRoot"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindRootArchetype"
					var Description = "Finds the top most Archetype in the Hierarchy ."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FinishComponentInit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceAddComponent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(type component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceAddComponentById"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceRemoveComponent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetChildCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetComponentByIndex"
					var Description = ""
					var ReturnType = "Component"
					var Parameters = "(size_t index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetComponentByName"
					var Description = ""
					var ReturnType = "Component"
					var Parameters = "(StringParam componentTypeName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentTypeName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetComponents"
					var Description = ""
					var ReturnType = "CompRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDescription"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDispatcher"
					var Description = "Event system."
					var ReturnType = "EventDispatcher"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDispatcherObject"
					var Description = ""
					var ReturnType = "EventDispatcher"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHierarchyIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHierarchyList"
					var Description = ""
					var ReturnType = "HierarchyList"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetId"
					var Description = "Get the game object's Id."
					var ReturnType = "CogId"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetParentHierarchyList"
					var Description = ""
					var ReturnType = "HierarchyList"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetReceiver"
					var Description = ""
					var ReturnType = "EventReceiver"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetReceiverObject"
					var Description = ""
					var ReturnType = "EventReceiver"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Has"
					var Description = "Type safe way of accessing components."
					var ReturnType = "type"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize all the components on the composition. The order of initialize is as follows: 1. Initialize 2. OnAllObjectsCreated 3. ScriptInitialize 4. The event 'AllObjectsInitialized' is sent out on the CogInitializer Generally script Initialize comes after ALL C++ initialization because it makes scripts safer and easier to debug (knowing all C++ components have been fully setup, can't access anything bad)"
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsChildOfArchetype"
					var Description = "Whether or not this object is a child of an Archetype (not only direct child, but any child)."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsDescendant"
					var Description = "Returns whether or not the given cog is a descendant of us."
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEditorMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEditorOrPreviewMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsInitialized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsModifiedFromArchetype"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsPreviewMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MarkTransformModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MarkedForDeletion"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoveComponentBefore"
					var Description = "This function assumes that the move is valid (meaning it's not moving a component before another component that it's dependent on)."
					var ReturnType = "Void"
					var Parameters = "(Integer componentToMove, Integer destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentToMove"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NotModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlaceAfterSibling"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog sibling)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sibling"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlaceBeforeSibling"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog sibling)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sibling"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlaceInHierarchy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueryComponentId"
					var Description = "Get a component on this composition by component's TypeId. This will return NULL if the component is not found."
					var ReturnType = "Component"
					var Parameters = "(BoundType typeId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueryComponentIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(BoundType typeId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueryComponentTypeRange"
					var Description = "Typed based interface for accessing multiple components of the same type."
					var ReturnType = "CastRangeAdapter<ComponentRange,type>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponentByName"
					var Description = "Remove a component by name. Returns true if the component existed."
					var ReturnType = "Boolean"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponentInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReplaceChild"
					var Description = "Places the new child at the same place as the old child in the Hierarchy . This detaches but does not destroy the old child."
					var ReturnType = "Void"
					var Parameters = "(Cog oldChild, Cog newChild)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldChild"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "newChild"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RevertToArchetype"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SanatizeName"
					var Description = "Cleans an object name of invalid runes."
					var ReturnType = "string"
					var Parameters = "(string newName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newName"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SaveToDataBlock"
					var Description = "Used to copy cogs."
					var ReturnType = "DataBlock"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScriptInitialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serialize a components data."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetEditorOnly"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UploadToArchetype"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WriteDescription"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringBuilder builder)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "builder"
							var Type = "StringBuilder"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const Cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "const Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CogInitializerEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CogInitializer"
					var Type = "CogInitializer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CogPath"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Cog"
					var Type = "Cog"
					var Description = "Setting the cog manually may recompute the path if the option is set Getting the cog will attempt to resolve the cog if we don't already have one (or if the path options is set, it will always resolve)"
				}
				Property
				{
					var Name = "DirectCog"
					var Type = "Cog"
					var Description = "Setting the cog manually may recompute the path if the option is set Getting the cog will return whatever cog we already resolved, or null (it will not attempt to resolve)"
				}
				Property
				{
					var Name = "ErrorOnDirectLinkFail"
					var Type = "Boolean"
					var Description = "Is it an exception/notification if a direct link to the object cannot be resolved?"
				}
				Property
				{
					var Name = "ErrorOnPathCantCompute"
					var Type = "Boolean"
					var Description = "Is it an exception/notification if the path to an object cannot be computed?"
				}
				Property
				{
					var Name = "ErrorOnResolveToNull"
					var Type = "Boolean"
					var Description = "Is an exception thrown if you try to access the Cog when it's invalid or not found?"
				}
				Property
				{
					var Name = "Path"
					var Type = "string"
					var Description = "Setting the path will invalidate the object until the next call to GetCog."
				}
				Property
				{
					var Name = "PathPreference0"
					var Type = "CogPathPreference"
					var Description = ""
				}
				Property
				{
					var Name = "PathPreference1"
					var Type = "CogPathPreference"
					var Description = ""
				}
				Property
				{
					var Name = "PathPreference2"
					var Type = "CogPathPreference"
					var Description = ""
				}
				Property
				{
					var Name = "RelativeTo"
					var Type = "Cog"
					var Description = "The cog that we compute paths relative to."
				}
				Property
				{
					var Name = "UpdateCogOnInitialize"
					var Type = "Boolean"
					var Description = "Whether the cog path attempts to resolve an object when the object is fully initialized."
				}
				Property
				{
					var Name = "UpdateCogOnPathChange"
					var Type = "Boolean"
					var Description = "When we set the cog path, should we try and resolve the object (this also detects parse errors)"
				}
				Property
				{
					var Name = "UpdatePathOnCogChange"
					var Type = "Boolean"
					var Description = "When we set the cog, should we try and recompute a path to the object?"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = "Creates a new copy of a cog path (since cog paths are reference counted and shared)"
					var ReturnType = "CogPath"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePath"
					var Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string."
					var ReturnType = "string"
					var Parameters = "(Status status, Cog from, Cog to, CogPathPreference pref)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "status"
							var Type = "Status"
							var Description = ""
						}
						Parameter
						{
							var Name = "from"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "to"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "pref"
							var Type = "CogPathPreference"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePath"
					var Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string."
					var ReturnType = "string"
					var Parameters = "(Status status, Cog from, Cog to, CogPathPreference pref0, CogPathPreference pref1, CogPathPreference pref2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "status"
							var Type = "Status"
							var Description = ""
						}
						Parameter
						{
							var Name = "from"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "to"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "pref0"
							var Type = "CogPathPreference"
							var Description = ""
						}
						Parameter
						{
							var Name = "pref1"
							var Type = "CogPathPreference"
							var Description = ""
						}
						Parameter
						{
							var Name = "pref2"
							var Type = "CogPathPreference"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePath"
					var Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string."
					var ReturnType = "string"
					var Parameters = "(Cog from, Cog to, CogPathPreference pref)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "from"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "to"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "pref"
							var Type = "CogPathPreference"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCogOrNull"
					var Description = "A safe and simple way to get a cog from a cog path (the cog path itself can be null)"
					var ReturnType = "Cog"
					var Parameters = "(CogPath path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "CogPath"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDispatcherObject"
					var Description = ""
					var ReturnType = "EventDispatcher"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetReceiverObject"
					var Description = ""
					var ReturnType = "EventReceiver"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Has"
					var Description = "Type safe way of accessing components."
					var ReturnType = "type"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueryComponentId"
					var Description = "Component interface."
					var ReturnType = "Component"
					var Parameters = "(BoundType typeId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Refresh"
					var Description = "Returns true if the object changes, false otherwise."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RefreshIfNull"
					var Description = "Returns true if the object changes, false otherwise."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Resolve"
					var Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert."
					var ReturnType = "Cog"
					var Parameters = "(Status status, Cog startFrom, StringParam path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "status"
							var Type = "Status"
							var Description = ""
						}
						Parameter
						{
							var Name = "startFrom"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "path"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Resolve"
					var Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert."
					var ReturnType = "Cog"
					var Parameters = "(Cog startFrom, StringParam path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startFrom"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "path"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Resolve"
					var Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert."
					var ReturnType = "Cog"
					var Parameters = "(Status status, Cog startFrom, const CogPathCompiled path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "status"
							var Type = "Status"
							var Description = ""
						}
						Parameter
						{
							var Name = "startFrom"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "path"
							var Type = "const CogPathCompiled"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RestoreLink"
					var Description = "Use to Restore links in serialization."
					var ReturnType = "Cog"
					var Parameters = "(CogInitializer initializer, Cog owner, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
						Parameter
						{
							var Name = "owner"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RestoreLink"
					var Description = "Use to Restore links in serialization."
					var ReturnType = "Cog"
					var Parameters = "(CogInitializer initializer, Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RestoreLink"
					var Description = "Use to Restore links in serialization."
					var ReturnType = "Cog"
					var Parameters = "(CogInitializer initializer, Cog owner, Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
						Parameter
						{
							var Name = "owner"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Collider"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A collider controls how collision detection is performed for an object. A collider also gives mass properties to a RigidBody (via the material and volume). If there is no RigidBody associated with this collider then it is considered static. Note: colliders without RigidBodies should not be moved at run-time!"
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ActiveBody"
					var Type = "RigidBody"
					var Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to."
				}
				Property
				{
					var Name = "CollisionGroup"
					var Type = "CollisionGroup"
					var Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space."
				}
				Property
				{
					var Name = "ContactCount"
					var Type = "Integer"
					var Description = "Returns the number of contacts on this collider."
				}
				Property
				{
					var Name = "Contacts"
					var Type = "ContactRange"
					var Description = "Range of all contacts on this collider."
				}
				Property
				{
					var Name = "Ghost"
					var Type = "Boolean"
					var Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions."
				}
				Property
				{
					var Name = "JointCount"
					var Type = "Integer"
					var Description = "Returns the number of joints attached to this collider."
				}
				Property
				{
					var Name = "Joints"
					var Type = "JointRange"
					var Description = "Range of all joints on this collider."
				}
				Property
				{
					var Name = "Material"
					var Type = "PhysicsMaterial"
					var Description = "The material used to determine the density, restitution and friction of this collider."
				}
				Property
				{
					var Name = "Offset"
					var Type = "Real3"
					var Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model."
				}
				Property
				{
					var Name = "SendsEvents"
					var Type = "Boolean"
					var Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events."
				}
				Property
				{
					var Name = "WorldAabb"
					var Type = "Aabb"
					var Description = "Returns the world-space axis aligned bounding box (Aabb) of this collider."
				}
				Property
				{
					var Name = "WorldBoundingSphere"
					var Type = "Sphere"
					var Description = "Returns the world-space bounding sphere of this collider."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CacheWorldValues"
					var Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMass"
					var Description = "Computes the mass of this collider from its volume and density."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePointVelocityInternal"
					var Description = "Computes a point velocity of a world-space point from this collider's rigid body. Used in collision resolution and in determining the separating velocity of a point."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeVolume"
					var Description = "Compute the world-space volume of this collider."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldBoundingSphereInternal"
					var Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldBoundingVolumes"
					var Description = "Fix the world-space bounding volumes from the current transform and per collider property data (Sphere: mRadius, Box: mSize, etc...). If you need a bounding volume to be up-to-date this should be called, not either of the Compute functions for a bounding volume."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DestroyAllContacts"
					var Description = "Destroy all contacts connected to this collider. Unlike joints, contacts need to be deleted when either collider is disconnected from the contact. An additional bool is specified to determine whether or not to send contact ended events immediately (if we wait then the object will already be deleted and the . Cog on the event will be null)"
					var ReturnType = "Void"
					var Parameters = "(Boolean sendImmediately)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sendImmediately"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceAwake"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceRelinkJoints"
					var Description = "When a collider is dynamically added no joints are connected to it. To fix each joint we walk through all object links we're connected to and forcefully unlink and link them which will fix all joints."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GenerateIntegrationUpdate"
					var Description = "Queues an update in the physics queues that says this collider has been integrated. Being integrated implies a very specific set of things that have to be updated."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCenter"
					var Description = "Return a point deep inside the shape. Needed to initialize MPR and make some initial good guesses. Not commonly overridden in a derived collider type."
					var ReturnType = "Void"
					var Parameters = "(Vec3Ref center)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "center"
							var Type = "Vec3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetColliderLocalCenterOfMass"
					var Description = "Returns the location of the local space center of mass for this collider. For all symmetric colliders this is the origin, but for non-symmetric colliders this can change. This is needed for computing a rigid body's mass and inertia properties."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetColliderType"
					var Description = "Which kind of collider is this? Mostly used to determine which collision function to call."
					var ReturnType = "ColliderType"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetColliderWorldCenterOfMass"
					var Description = "Computes the collider's center of mass in world space. This should only be called when computing a rigid body's world center of mass."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHasPairFilter"
					var Description = "Pair filters per-object pairings to skip for detection (within a space). To avoid a hashmap lookup each collider stores if it has ever had a pair added. If it hasn't then no lookup is needed."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNextColliderId"
					var Description = "Updates the unique collider Id."
					var ReturnType = "u32"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPointVelocity"
					var Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRigidBodyCenterOfMass"
					var Description = "Returns the rigid body's center of mass in world space. If there is no rigid body then the collider's world translation is returned instead."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSupportShape"
					var Description = "Creates a support shape wrapper class for this collider. This helps provide a generic interface to collision detection that works with colliders or other primitive shapes. The support delta is needed for Swept (: clean up later). Should almost never be overridden in a derived collider type."
					var ReturnType = "SupportShape"
					var Parameters = "(Boolean supportDelta)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "supportDelta"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldRotation"
					var Description = "The cached world-space rotation of this collider."
					var ReturnType = "Mat3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldScale"
					var Description = "The cached world-space scale of this collider."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldTransform"
					var Description = "Get the cached local to world transform data for this collider."
					var ReturnType = "WorldTransformation"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldTranslation"
					var Description = "The cached world-space translation of this collider."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InDynamicBroadPhase"
					var Description = "Does this collider belong in dynamic or static broadphase?"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalSizeChanged"
					var Description = "Helper function for all derived collider types to call whenever their base size properties change. If one of these changes then several things, ranging from half-extents to broadphase, have to be updated."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalTransformUpdate"
					var Description = "Takes care of all logic when a collider has its transform updated out from under it. This is broken up into two categories: initialization and update. In update a little more work has to be done."
					var ReturnType = "Void"
					var Parameters = "(eUpdateTransformState updateState)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "updateState"
							var Type = "eUpdateTransformState"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Is2D"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsAsleep"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsDynamic"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsKinematic"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsStatic"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NotCollideable"
					var Description = "This encompasses whether or not a collider is allowed to collide with anything. Currently ghost colliders and ones that have no mass in the entire rigid body are unable to collide with anything."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnPhysicsMaterialModified"
					var Description = "The physics material we are using has been modified. Update mass from density. The event isn't used."
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildModifiedResources"
					var Description = "Check all resources used by this collider to see if they need to be updated. Called by several \"Get\" functions to force up-to-date information."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetHasPairFilter"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean hasPairFilter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "hasPairFilter"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldAabbFromHalfExtents"
					var Description = "Sets the world-space aabb of this collider given a world-space half-extents of the aabb. Commonly used by box or box-like things to approximate the world-space aabb as the rotation of the (scaled) local-space aabb."
					var ReturnType = "Void"
					var Parameters = "(Vec3 worldHalfExtents)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldHalfExtents"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ShouldCollide"
					var Description = "Helper function that not only determines if two colliders should collide but also fills out a string with the reason for why they are not (for PhysicsSpace.WhyAreTheyNotColliding )."
					var ReturnType = "Boolean"
					var Parameters = "(Collider otherCollider, string reasonForNotColliding)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "otherCollider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "reasonForNotColliding"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ShouldCollide"
					var Description = "Determines if this collider should perform collision detection against the passed in collider. This checks everything from asleep to collision groups."
					var ReturnType = "Boolean"
					var Parameters = "(Collider otherCollider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "otherCollider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ShouldCollideInternal"
					var Description = "Internal function that will return why they aren't colliding if the template argument is true (for efficiency to not build the string during normal collision detection)"
					var ReturnType = "Boolean"
					var Parameters = "(Collider otherCollider, string reasonForNotColliding)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "otherCollider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "reasonForNotColliding"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformSupportDirectionToLocal"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldSupportDirection)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldSupportDirection"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformSupportPointToWorld"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 localSupportPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localSupportPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnlinkAllJoints"
					var Description = "Unlink all joints connected to this collider. This is likely called because we are being destroyed."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateMasslessColliderFlag"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePhysicsMaterialConnections"
					var Description = "Disconnect all events from the old material and connect to the new material."
					var ReturnType = "Void"
					var Parameters = "(PhysicsMaterial oldMaterial, PhysicsMaterial newMaterial)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldMaterial"
							var Type = "PhysicsMaterial"
							var Description = ""
						}
						Parameter
						{
							var Name = "newMaterial"
							var Type = "PhysicsMaterial"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateQueue"
					var Description = "Forces an update (if it exists) to the collider's mass and inertia properties. This occasionally is needed when some place needs up-to-date information and the cached body-to-world transforms could be out of date (in the middle of a user call). Joints are the main caller of this right now."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CollisionEvent"
			var BaseClass = "BaseCollisionEvent"
			var Library = "PhysicsLibrary"
			var Description = "Collision event for when a contact begins, ends, or is persisted. Contains the point that triggered the begin/end (IncidentPoint). If it is a persistent collision, the point is just point 0 from the manifold."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FirstPoint"
					var Type = "ContactPoint"
					var Description = "Returns the point that caused the begin/end to happen."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetEventName"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(CollisionType type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "CollisionType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const Manifold manifold, const ManifoldPoint point, string eventType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "manifold"
							var Type = "const Manifold"
							var Description = ""
						}
						Parameter
						{
							var Name = "point"
							var Type = "const ManifoldPoint"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventType"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePoint"
					var Description = "Used to update the values in the event for the incident point before we send the event (some values might have changed after solving)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CollisionGroup"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "A collision group object. Most implementation data is handled in an instance. A collision group just maintains the user defined (and readable) name for the group."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<CollisionGroup>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNewInstance"
					var Description = ""
					var ReturnType = "CollisionGroupInstance"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<CollisionGroup>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CollisionGroupEvent"
			var BaseClass = "BaseCollisionEvent"
			var Library = "PhysicsLibrary"
			var Description = "An event sent out when a collision happens between two groups with a filter. Used to write hook up messages based upon certain types colliding (ie. when a player is hit by a bullet, catch on fire or something)."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FirstPoint"
					var Type = "ContactPoint"
					var Description = ""
				}
				Property
				{
					var Name = "TypeAName"
					var Type = "string"
					var Description = "Returns the collision group name of object A."
				}
				Property
				{
					var Name = "TypeBName"
					var Type = "string"
					var Description = "Returns the collision group name of object B."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetEventName"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(CollisionType type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "CollisionType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = "Sets the two colliders with the given pair. Takes care of making sure the collider ordering matches the filter order."
					var ReturnType = "Void"
					var Parameters = "(const Manifold manifold, const CollisionFilter pair, CollisionFilterBlock block, string eventType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "manifold"
							var Type = "const Manifold"
							var Description = ""
						}
						Parameter
						{
							var Name = "pair"
							var Type = "const CollisionFilter"
							var Description = ""
						}
						Parameter
						{
							var Name = "block"
							var Type = "CollisionFilterBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventType"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CollisionTable"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Stores the filters between collision group instances. This is space specific data. Also bakes out the filters into the internal flags of each instance for faster runtime operations."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoRegister"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "CollisionFilters"
					var Type = "CollisionFilters"
					var Description = "The filters between the registered groups."
				}
				Property
				{
					var Name = "HashedFilters"
					var Type = "HashedFilters"
					var Description = ""
				}
				Property
				{
					var Name = "RegisteredGroups"
					var Type = "RegisteredGroups"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CopyTo"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CollisionTable destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "destination"
							var Type = "CollisionTable"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<CollisionTable>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFilter"
					var Description = "Finds the filter between the pair of collision groups. (Filter acts as our pair class)"
					var ReturnType = "CollisionFilter"
					var Parameters = "(CollisionFilter pair)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pair"
							var Type = "CollisionFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFilter"
					var Description = "Finds the filter between the pair of collision groups. (Filter acts as our pair class)"
					var ReturnType = "CollisionFilter"
					var Parameters = "(CollisionGroup groupA, CollisionGroup groupB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "groupA"
							var Type = "CollisionGroup"
							var Description = ""
						}
						Parameter
						{
							var Name = "groupB"
							var Type = "CollisionGroup"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FixSpaces"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CollisionTable newTable)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newTable"
							var Type = "CollisionTable"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultGroup"
					var Description = ""
					var ReturnType = "CollisionGroup"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGroupInstance"
					var Description = "Finds the instance of a collision group. The user can specify what they want to have happen when the instance is not found via the access mode."
					var ReturnType = "CollisionGroupInstance"
					var Parameters = "(ResourceId groupId, RegisteredGroupInstanceAccessMode accessMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "groupId"
							var Type = "ResourceId"
							var Description = ""
						}
						Parameter
						{
							var Name = "accessMode"
							var Type = "RegisteredGroupInstanceAccessMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadExistingGroups"
					var Description = "Registers all groups in existence. Used to auto-populate newly created filters."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReconfigureGroups"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RegisterGroup"
					var Description = "Registers the group type as usable for this space (max 32)."
					var ReturnType = "Void"
					var Parameters = "(CollisionGroup group)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "group"
							var Type = "CollisionGroup"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveGroupInstancesAndFilters"
					var Description = "Helper function to remove all instances in the filters of the given collision group type."
					var ReturnType = "Void"
					var Parameters = "(ResourceId groupId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "groupId"
							var Type = "ResourceId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<CollisionTable>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Save"
					var Description = "Save the content item to the given file."
					var ReturnType = "Void"
					var Parameters = "(string filename)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filename"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = "Set the resource to default values."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnRegisterGroup"
					var Description = "Removes the group from the usable type list so more can be added. Also removes all instances of the given type."
					var ReturnType = "Void"
					var Parameters = "(CollisionGroup group)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "group"
							var Type = "CollisionGroup"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unload"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateFilters"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CommandEvent"
			var BaseClass = ""
			var Library = "WidgetLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Gives context to where the command was executed."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Component"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "A component is an atomic piece of functionality that is composed into a Cogs to form game objects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Get the GameSession that owns us and our space."
				}
				Property
				{
					var Name = "LevelSettings"
					var Type = "Cog"
					var Description = "Get the object named 'LevelSettings', a special object where we can put components for our level."
				}
				Property
				{
					var Name = "Owner"
					var Type = "Cog"
					var Description = "Get the Cog this Component is owned by (not the parent of this composition)."
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "The Space where the object is located."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentRemoved"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Delete"
					var Description = "Deletes the object. This allows the component to be responsible."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDescription"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDispatcher"
					var Description = ""
					var ReturnType = "EventDispatcher"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDispatcherObject"
					var Description = ""
					var ReturnType = "EventDispatcher"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEventThisObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOwnerScript"
					var Description = "Get the Cog this Component is owned by (not the parent of this composition)."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetReceiver"
					var Description = "Returns the parent objects event tracker."
					var ReturnType = "EventReceiver"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetReceiverObject"
					var Description = ""
					var ReturnType = "EventReceiver"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsInitialized"
					var Description = "Returns whether or not the owning Cog is initialized."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ScriptInitialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ShouldSerialize"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WriteDescription"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringBuilder builder)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "builder"
							var Type = "StringBuilder"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Console"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ConsoleListener listener)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "listener"
							var Type = "ConsoleListener"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FlushAll"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Print"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Filter filter, cstr format, ...)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filter"
							var Type = "Filter"
							var Description = ""
						}
						Parameter
						{
							var Name = "format"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "..."
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PrintRaw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Filter filter, cstr data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filter"
							var Type = "Filter"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "cstr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PrintVa"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Filter, cstr format, va_list va)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Filter"
							var Description = ""
						}
						Parameter
						{
							var Name = "format"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = "va"
							var Type = "va_list"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Remove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ConsoleListener lister)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lister"
							var Type = "ConsoleListener"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ConsoleEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ContactHolder"
			var BaseClass = "BaseConstraintHolder< Physics::Contact, Physics::ContactEdge >"
			var Library = "PhysicsLibrary"
			var Description = "A \"specialization\" of the Base Constraint Holder that has contact specific helpers."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ContactPointCount"
					var Type = "Integer"
					var Description = "Returns how many points of contact there are."
				}
				Property
				{
					var Name = "ContactPoints"
					var Type = "ContactPointRange"
					var Description = "Returns a range to iterate through all of the contact points."
				}
				Property
				{
					var Name = "FirstPoint"
					var Type = "ContactPoint"
					var Description = "Just a helper when we don't care about iterating through the points and we just want a point to sample."
				}
				Property
				{
					var Name = "IsGhost"
					var Type = "Boolean"
					var Description = "Returns whether or not this was a ghost collision."
				}
				Property
				{
					var Name = "IsNew"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "OtherObject"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetContact"
					var Description = ""
					var ReturnType = "Contact"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSkipsResolution"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ContactPoint"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Physics"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BodyPoint"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ComplexImpulse"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "FrictionImpulse"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "NormalImpulse"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "OtherBodyPoint"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "Penetration"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "RelativeVelocity"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WorldNormalTowardsOther"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ConvexMesh"
			var BaseClass = "GenericPhysicsMesh"
			var Library = "PhysicsLibrary"
			var Description = "A convex mesh meant for use on dynamic rigid bodies. Computes efficient contact information compared to a regular physics mesh."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BuildFromPointSet"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const Vec3Array points)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "points"
							var Type = "const Vec3Array"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Finds the first triangle hit by the local-space ray."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<ConvexMesh>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Draw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Mat4Param transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnResourceModified"
					var Description = "Called when a mesh is modified. This is typically done when the vertices/indices are modified in script."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<ConvexMesh>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ConvexMeshCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Convex Mesh Collider is a collision primitive for colliding with a convex triangle mesh that can move but not deform."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ConvexMesh"
					var Type = "ConvexMesh"
					var Description = "The convex mesh resource that defines the collision volume of this collider."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCenter"
					var Description = "Return a point deep inside the shape. Needed to initialize MPR and make some initial good guesses. Not commonly overridden in a derived collider type."
					var ReturnType = "Void"
					var Parameters = "(Vec3Ref center)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "center"
							var Type = "Vec3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetColliderLocalCenterOfMass"
					var Description = "Returns the location of the local space center of mass for this collider. For all symmetric colliders this is the origin, but for non-symmetric colliders this can change. This is needed for computing a rigid body's mass and inertia properties."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOverlapRange"
					var Description = "Returns a range of local-space triangles that overlap the passed in local-space aabb."
					var ReturnType = "RangeType"
					var Parameters = "(Aabb localAabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localAabb"
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMeshModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildModifiedResources"
					var Description = "Check all resources used by this collider to see if they need to be updated. Called by several \"Get\" functions to force up-to-date information."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CustomAudioNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Uses a SoundBuffer to send audio data directly to the audio engine."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Channels"
					var Type = "Integer"
					var Description = "The number of audio channels that will be in the buffer."
				}
				Property
				{
					var Name = "MinimumBufferSize"
					var Type = "Integer"
					var Description = "The minimum number of samples that should be sent when a NeedMoreSamples event is received."
				}
				Property
				{
					var Name = "SystemSampleRate"
					var Type = "Integer"
					var Description = "The sample rate currently being used by the audio system."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendBuffer"
					var Description = "Sends a buffer of audio samples to the audio system for output."
					var ReturnType = "Void"
					var Parameters = "(SoundBuffer buffer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "SoundBuffer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendPartialBuffer"
					var Description = "Sends a partial buffer of audio samples to the audio system for output."
					var ReturnType = "Void"
					var Parameters = "(SoundBuffer buffer, Integer startAtIndex, Integer howManySamples)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "SoundBuffer"
							var Description = ""
						}
						Parameter
						{
							var Name = "startAtIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "howManySamples"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CustomJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A customizable joint that can be set via script. The user can create constraints belonging to this joint and set the required values to solve them. Some basic constraint understanding is required. To compute constraints you should listen to Events.ComputeCustomJointInfo."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ConstraintCount"
					var Type = "Integer"
					var Description = "Returns how many constraints this joint owns."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddConstraint"
					var Description = "Add a constraint to this joint. This will assert if a joint already owns this constraint."
					var ReturnType = "Void"
					var Parameters = "(CustomConstraintInfo constraint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "constraint"
							var Type = "CustomConstraintInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearConstraints"
					var Description = "Clear all constraints from this joint (so none will solve)."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ConstraintInfoToMolecule"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CustomConstraintInfo constraint, ConstraintMolecule molecule)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "constraint"
							var Type = "CustomConstraintInfo"
							var Description = ""
						}
						Parameter
						{
							var Name = "molecule"
							var Type = "ConstraintMolecule"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateConstraint"
					var Description = "Create a constraint that is attached to this joint."
					var ReturnType = "CustomConstraintInfo"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetConstraint"
					var Description = "Returns the constraint at the given index. Will assert if the index is outside the constraint count range."
					var ReturnType = "CustomConstraintInfo"
					var Parameters = "(size_t index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveConstraint"
					var Description = "If the given constraint belongs to this joint then remove it from the constraints to solve."
					var ReturnType = "Void"
					var Parameters = "(CustomConstraintInfo constraint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "constraint"
							var Type = "CustomConstraintInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateTransform"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer colliderIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "colliderIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CustomPhysicsEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "A physics effect that sends events out so users can apply custom logic for forces. This sends out the ApplyCustomPhysicsEffect event."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CustomPhysicsEffectEvent"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "Event data for applying custom physics effects."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Effect"
					var Type = "CustomPhysicsEffect"
					var Description = ""
				}
				Property
				{
					var Name = "RigidBody"
					var Type = "RigidBody"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "CylinderCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Cylinder Collider is a basic collision primitive of a cylinder."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "AxisDirection"
					var Description = "The direction that the height is defined along. Allows the user to change whether the cylinder's height is along the x, y, or z axis."
				}
				Property
				{
					var Name = "Height"
					var Type = "Real"
					var Description = "The local space distance from the top of the cylinder to the bottom."
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The local space radius of the cylinder."
				}
				Property
				{
					var Name = "WorldHeight"
					var Type = "Real"
					var Description = "The full height of the cylinder after the scale is applied."
				}
				Property
				{
					var Name = "WorldRadius"
					var Type = "Real"
					var Description = "The radius of the cylinder after scale is applied."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CacheWorldValues"
					var Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldBoundingSphereInternal"
					var Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldPoints"
					var Description = "Returns the top (pointA), and the bottom (pointB) of the cylinder."
					var ReturnType = "Void"
					var Parameters = "(Vec3Ref pointA, Vec3Ref pointB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pointA"
							var Type = "Vec3Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "pointB"
							var Type = "Vec3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHeightIndex"
					var Description = "The index of the height axis."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRadiiIndices"
					var Description = "The index of both radius axes."
					var ReturnType = "Void"
					var Parameters = "(Integer rIndex0, Integer rIndex1)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rIndex0"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "rIndex1"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldHalfHeight"
					var Description = "The half height of the cylinder after scale is applied."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DebuggerEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DelayNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a delay filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Delay"
					var Type = "Real"
					var Description = "The length of the delay, in seconds."
				}
				Property
				{
					var Name = "FeedbackPercent"
					var Type = "Real"
					var Description = "The percentage of output which is fed back into the filter as input, creating an echo-like effect."
				}
				Property
				{
					var Name = "WetPercent"
					var Type = "Real"
					var Description = "The percentage of the node's output which has the delay filter applied to it."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateWetPercent"
					var Description = "Interpolates the WetPercent property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real wetPercent, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "wetPercent"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DelegateParameter"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Type"
					var Type = "Type"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DelegateParameterRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "DelegateParameterRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "DelegateParameter"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DelegateType"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Parameters"
					var Type = "DelegateParameterRange"
					var Description = ""
				}
				Property
				{
					var Name = "Return"
					var Type = "Type"
					var Description = ""
				}
				Property
				{
					var Name = "Signature"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DoubleInteger"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DoubleReal"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DragEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies drag or damping forces to slow down an object's linear and angular velocity. Drag is computed as a simple linear approximation of the drag force. Damping is computed linear approximation of a drag acceleration. This means that damping affects all objects the same, independently of mass."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AngularDamping"
					var Type = "Real"
					var Description = "Angular damping coefficient for applying an angular drag acceleration (accel = -kw). Note: this affects objects the same regardless of mass."
				}
				Property
				{
					var Name = "AngularDrag"
					var Type = "Real"
					var Description = "The angular drag coefficient for applying an angular drag force (T = -kw)."
				}
				Property
				{
					var Name = "LinearDamping"
					var Type = "Real"
					var Description = "Linear damping coefficient for applying a linear drag acceleration (accel = -bv). Note: this affects objects the same regardless of mass."
				}
				Property
				{
					var Name = "LinearDrag"
					var Type = "Real"
					var Description = "The linear drag coefficient for applying a linear drag force (F = -bv)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DynamicMotor"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A controller to move an object with physics. This gives the controller realistic reactions to the physics world for free."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxMoveForce"
					var Type = "Real"
					var Description = "Max movement force."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Activate"
					var Description = "Activates all functionality of the dynamic controller."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateJoint"
					var Description = ""
					var ReturnType = "RelativeVelocityJoint"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Deactivate"
					var Description = "Deactivates all functionality of the dynamic controller."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJoint"
					var Description = ""
					var ReturnType = "RelativeVelocityJoint"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoveInDirection"
					var Description = "Attempts to move the character in the given direction."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetReferenceFrameToObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog object)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "object"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetReferenceFrameToWorld"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "DynamicsCompressionNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies various compression filters to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttackMillisec"
					var Type = "Real"
					var Description = "The time for the filter to ramp to full effect after the input reaches the threshold."
				}
				Property
				{
					var Name = "InputGainDecibels"
					var Type = "Real"
					var Description = "The volume adjustment applied to the filter input, in decibels."
				}
				Property
				{
					var Name = "KneeWidth"
					var Type = "Real"
					var Description = "The knee width of the filter, in decibels."
				}
				Property
				{
					var Name = "OutputGainDecibels"
					var Type = "Real"
					var Description = "The volume adjustment applied to the filter output, in decibels."
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The ratio of the compression applied by the filter."
				}
				Property
				{
					var Name = "ReleaseMillisec"
					var Type = "Real"
					var Description = "The time for the filter to ramp from full effect to off after the input drops below the threshold."
				}
				Property
				{
					var Name = "ThresholdDecibels"
					var Type = "Real"
					var Description = "The threshold, in decibels, at which the volume of the input is affected by the filter."
				}
				Property
				{
					var Name = "Type"
					var Type = "DynamicsCompressionTypes"
					var Description = "The type of dynamics compression filter to use: compressor, limiter, expander, or gate. The default value is compressor."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "EllipsoidCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Ellipsoid Collider is a basic collision primitive of a ellipsoid."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Radii"
					var Type = "Real3"
					var Description = "The x, y and z radius of the ellipsoid."
				}
				Property
				{
					var Name = "WorldRadii"
					var Type = "Real3"
					var Description = "The radii of the ellipsoid after transform is applied (scale and rotation)"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldBoundingSphereInternal"
					var Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Returns the point on the volume furthest in the given direction."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Enum"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "EqualizerNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applied volume changes to specific frequency bands in the audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Band1Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 150 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
				}
				Property
				{
					var Name = "Band2Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 600 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
				}
				Property
				{
					var Name = "Band3Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 2500 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
				}
				Property
				{
					var Name = "HighPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies above 5000 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
				}
				Property
				{
					var Name = "LowPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies below 80 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateAllBands"
					var Description = "Sets the volume adjustment of all bands (the parameters in order are low pass, band 1, band 2, band 3, high pass) over the number of seconds passed in as the final parameter."
					var ReturnType = "Void"
					var Parameters = "(Real lowPass, Real band1, Real band2, Real band3, Real highPass, Real timeToInterpolate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lowPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band2"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band3"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "highPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeToInterpolate"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ErrorEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Event"
			var BaseClass = "ThreadSafeId< u32, Object >"
			var Library = "MetaLibrary"
			var Description = "Base event class. All events types inherit from this class."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EventId"
					var Type = "string"
					var Description = "The event-ID that this event was dispatched under."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Terminate"
					var Description = "Stops the event from being sent to any other connections."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "Event"
					var Parameters = "(const Event rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "EventBundle"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Event Bundle Serialized event storage container."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Returns the game session."
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddEvent"
					var Description = "Adds the event to back of the event bundle Returns true if successful, else false (an event of that type has already been added)"
					var ReturnType = "Boolean"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears the event bundle."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DeserializeBitStreamToEvents"
					var Description = "Deserialize our bitstream to our events Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBitStream"
					var Description = "Returns the event bundle as bitstream."
					var ReturnType = "BitStream"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEventByIndex"
					var Description = ""
					var ReturnType = "Event"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEventByType"
					var Description = ""
					var ReturnType = "Event"
					var Parameters = "(BoundType eventType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEventByTypeName"
					var Description = "Returns the event specified if it has been added to the event bundle, else nullptr."
					var ReturnType = "Event"
					var Parameters = "(StringParam eventTypeName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventTypeName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEventCount"
					var Description = "Returns the number of events that have been added to the event bundle."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEventIndexByType"
					var Description = "Returns the event index specified if it has been added to the event bundle, else nullptr."
					var ReturnType = "Integer"
					var Parameters = "(BoundType eventType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEvents"
					var Description = "Returns all the events that have been added to the event bundle."
					var ReturnType = "EventRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEmpty"
					var Description = "Returns true if the event bundle is empty (doesn't contain any events), else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveEvent"
					var Description = "Removes the event specified from the event bundle Returns true if successful, else false (an event of that type has already been added)"
					var ReturnType = "Boolean"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveEventByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveEventByType"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(BoundType eventType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveEventByTypeName"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringParam eventTypeName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventTypeName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeEventsToBitStream"
					var Description = "Serialize our events to our bitstream Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Assignment Operators."
					var ReturnType = "EventBundle"
					var Parameters = "(const EventBundle rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Assignment Operators."
					var ReturnType = "EventBundle"
					var Parameters = "(const BitStream rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Assignment Operators."
					var ReturnType = "EventBundle"
					var Parameters = "(MoveReference<BitStream> rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "MoveReference<BitStream>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "EventData"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "EventHandler"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Events"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Exception"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Message"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ExceptionEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ExecutableState"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CallingState"
					var Type = "ExecutableState"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FatalErrorEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Field"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FieldRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "FieldRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Field"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FileMode"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Append"
					var Type = "FileMode"
					var Description = ""
				}
				Property
				{
					var Name = "Read"
					var Type = "FileMode"
					var Description = ""
				}
				Property
				{
					var Name = "Sequential"
					var Type = "FileMode"
					var Description = ""
				}
				Property
				{
					var Name = "ShareDelete"
					var Type = "FileMode"
					var Description = ""
				}
				Property
				{
					var Name = "ShareRead"
					var Type = "FileMode"
					var Description = ""
				}
				Property
				{
					var Name = "ShareWrite"
					var Type = "FileMode"
					var Description = ""
				}
				Property
				{
					var Name = "Write"
					var Type = "FileMode"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FilePath"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DirectorySeparator"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "ExecutableDirectory"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "ExecutableFile"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "TemporaryDirectory"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "UserDocumentsDirectory"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "UserLocalDirectory"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "WorkingDirectory"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Combine"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRange path0, StringRange path1)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path0"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path1"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Combine"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRange path0, StringRange path1, StringRange path2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path0"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path1"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path2"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Combine"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRange path0, StringRange path1, StringRange path2, StringRange path3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path0"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path1"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path2"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path3"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Combine"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRange path0, StringRange path1, StringRange path2, StringRange path3, StringRange path4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path0"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path1"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path2"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path3"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "path4"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Combine"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(const StringRange paths, Integer count, StringRange extension)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "paths"
							var Type = "const StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "extension"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CombineWithExtension"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRange path, StringRange fileName, StringRange ext)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "fileName"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "ext"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDirectoryName"
					var Description = "Returns the name of the directory \"A/B/File.txt\" is \"B\"."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDirectoryPath"
					var Description = "Returns the name of the directory \"A/B/File.txt\" is \"A/B\"."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetExtension"
					var Description = "Return extension of file path so \"A/B/File.txt\" is \"txt\"."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFileName"
					var Description = "Returns the file name with the extension so \"A/B/File.txt\" is \"File.txt\"."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFileNameWithoutExtension"
					var Description = "Returns just the file name so \"A/B/File.txt\" is \"File\"."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPathInfo"
					var Description = "Get a path info object."
					var ReturnType = "FilePathInfo"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Normalize"
					var Description = "Remove all different slashes."
					var ReturnType = "string"
					var Parameters = "(StringRange path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "path"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FileStream"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FixedAngleJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Locks the orientation of two objects together. Used when two objects should always rotate in unison. Not useful by itself, but useful as a proof of concept for joints that use this functionality internally. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max angle on every axis that the objects must be between. Motor: A motor will attempt to drive the rotation on every axis forward. Spring: A spring will make the rotations on every axis at the bounds springy."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FlangerNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a flanger filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FeedbackPercent"
					var Type = "Real"
					var Description = "The percentage of output which is fed back into the filter as input."
				}
				Property
				{
					var Name = "MaxDelayMillisec"
					var Type = "Real"
					var Description = "The maximum delay reached by the modulation. It will oscillate between 0 and this value at the frequency set by the ModulationFrequency property."
				}
				Property
				{
					var Name = "ModulationFrequency"
					var Type = "Real"
					var Description = "The frequency of the oscillator which varies the modulation."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FlowEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a force to make an object move at a target speed in a given direction. This can also be used to pull the object towards the center of the flow (center of a flow is the center perpendicular to the flow direction). Used to model a river or a tractor beam."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttractSpeed"
					var Type = "Real"
					var Description = "The target speed for an object to be pulled towards the center of the flow."
				}
				Property
				{
					var Name = "AttractToFlowCenter"
					var Type = "Boolean"
					var Description = "Determines if the flow field will attract objects towards the center of the field. This can be used to create a tractor beam effect that will keep the object inside of the flow field."
				}
				Property
				{
					var Name = "FlowDirection"
					var Type = "Real3"
					var Description = "The direction that the field is flowing. This can be defined in world or local space."
				}
				Property
				{
					var Name = "FlowSpeed"
					var Type = "Real"
					var Description = "The target speed of objects in the flow field."
				}
				Property
				{
					var Name = "LocalForce"
					var Type = "Boolean"
					var Description = "Determines if the flow direction is in the local space of the object."
				}
				Property
				{
					var Name = "MaxAttractForce"
					var Type = "Real"
					var Description = "The max strength of the force that will pull the object towards the center of the flow field."
				}
				Property
				{
					var Name = "MaxFlowForce"
					var Type = "Real"
					var Description = "The max strength of the force that can be applied in a frame to reach the target flow speed."
				}
				Property
				{
					var Name = "WorldFlowDirection"
					var Type = "Real3"
					var Description = "The direction that the field is flowing in world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateFlowInformation"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FocusEvent"
			var BaseClass = ""
			var Library = "WidgetLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LostFocus"
					var Type = "Widget"
					var Description = ""
				}
				Property
				{
					var Name = "ReceivedFocus"
					var Type = "Widget"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ForceEffect"
			var BaseClass = "BasicDirectionEffect"
			var Library = "PhysicsLibrary"
			var Description = "A force effect that is applied in a given direction (local or world space). This is used to create force regions that will push objects in a given direction. This can also be used on a rigid body to push an object in it's forward direction (e.g a missile) if applied locally. Note, this is always applied at the center of mass of the object. If a more rocket like effect is desired see ThrustEffect ."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Function"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Type"
					var Type = "DelegateType"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "FunctionRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "FunctionRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Function"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GameEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Event type used by the GameSession ."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Game"
					var Type = "GameSession"
					var Description = ""
				}
				Property
				{
					var Name = "Handled"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "LevelName"
					var Type = "string"
					var Description = "Name of the current level."
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GameSession"
			var BaseClass = "Cog"
			var Library = "EngineLibrary"
			var Description = "The GameSession manages all spaces and data for a a game."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllSpaces"
					var Type = "SpaceMapValueRange"
					var Description = ""
				}
				Property
				{
					var Name = "Editing"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Focused"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "FullScreen"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Resolution"
					var Type = "Real2"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ChangeResolution"
					var Description = "Change display mode of primary window."
					var ReturnType = "Void"
					var Parameters = "(Boolean fullscreen, Vec2 resolution)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "fullscreen"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "resolution"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = "Game Session cannot be cloned, so throw an exception."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateEditorSpace"
					var Description = "Create a space for use in the editor. Scripts without the [RunInEditor] attribute will be proxied (will not run)."
					var ReturnType = "Space"
					var Parameters = "(Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateNamedSpace"
					var Description = "Create a space from an archetype with the given name."
					var ReturnType = "Space"
					var Parameters = "(StringParam name, Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateSpace"
					var Description = "Create a space in the game. Use the archetype's name."
					var ReturnType = "Space"
					var Parameters = "(Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateSpaceFlags"
					var Description = ""
					var ReturnType = "Space"
					var Parameters = "(Archetype archetype, Type flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "flags"
							var Type = "Type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Destroy"
					var Description = "Queues the cog up for delayed destruction (at the end of the frame). Check IsBeingDestroyed to see if a cog has already had destroy called."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchOnSpaces"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(string eventName, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventName"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EditSpaces"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindAllSpacesByName"
					var Description = ""
					var ReturnType = "valueRange"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindSpaceByName"
					var Description = "Find a named space."
					var ReturnType = "Space"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGameSession"
					var Description = "Get the GameSession that owns us and our space."
					var ReturnType = "GameSession"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Cog Interface."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalRenamed"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEditorMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnClose"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(OsWindowEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "OsWindowEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnFocusGained"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(OsWindowEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "OsWindowEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnFocusLost"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(OsWindowEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "OsWindowEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSpaceLoaded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ObjectEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Pause"
					var Description = "Pause all space on game."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Quit"
					var Description = "Quit the game and exit the engine if not in editor."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RequestQuit"
					var Description = "Request to quit sending out the GameRequestQuit event."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetInEditor"
					var Description = "Set the in editor flag."
					var ReturnType = "Void"
					var Parameters = "(Boolean inEditor)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "inEditor"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Start"
					var Description = "Start the game."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Step"
					var Description = "Step the game one frame."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Gamepad"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Game pad is a object for getting game pad input."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GamepadIndex"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "IsActive"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "LeftStick"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "LeftStickDelta"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "LeftTrigger"
					var Type = "Real"
					var Description = "Value of how much the Left Trigger is down. Range [0,1]."
				}
				Property
				{
					var Name = "RightStick"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "RightStickDelta"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "RightTrigger"
					var Type = "Real"
					var Description = "Value of how much the Right Trigger is down. Range [0,1]."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Gamepads gamepads, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "gamepads"
							var Type = "Gamepads"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsButtonHeld"
					var Description = "Is the button currently being held down."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsButtonPressed"
					var Description = "Has the button just been pressed this frame."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsButtonReleased"
					var Description = "Is the button just been released."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TimeButtonHeld"
					var Description = "How long has this button been held down."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real elasped)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "elasped"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Vibrate"
					var Description = "Vibrate this controller for a given time. Speed is a value between zero and one."
					var ReturnType = "Void"
					var Parameters = "(Real time, Real LeftSpeed, Real RightSpeed)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "LeftSpeed"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "RightSpeed"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GamepadEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Gamepad events are send when a game pad button state is changed."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Button"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "FlickDirection"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "FlickedStick"
					var Type = "FlickedStick"
					var Description = ""
				}
				Property
				{
					var Name = "Gamepad"
					var Type = "Gamepad"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Gamepads"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Gamepads is a collection of gamepads."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxGamepadCount"
					var Type = "Integer"
					var Description = "Gets the maximum number of supported gamepads."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CheckGamepads"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGamePad"
					var Description = "Get the gamepad for a given index from [0, GamepadCount]."
					var ReturnType = "Gamepad"
					var Parameters = "(Integer gamepadIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "gamepadIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDeviceChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PauseVibration"
					var Description = "Pause Vibration on all gamepads."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResumeVibration"
					var Description = "Resume vibration on all gamepads."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Startup"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GearJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A gear connects two joints on two objects together. Either joint can be a prismatic or a revolute. A gear ratio is used to bind the two joints together. Limits, motors and springs should most likely not be used on this."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Constant"
					var Type = "Real"
					var Description = "The initial offset of the gear ratio."
				}
				Property
				{
					var Name = "JointA"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "JointAPath"
					var Type = "CogPath"
					var Description = ""
				}
				Property
				{
					var Name = "JointB"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "JointBPath"
					var Type = "CogPath"
					var Description = ""
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The gear ratio that the two constraints are bound with."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindAndSetJoint"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Collider collider, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetValidJointOnCog"
					var Description = ""
					var ReturnType = "Joint"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RelinkJoint"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index, Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpecificJointRelink"
					var Description = "Used for a specific joint type (eg PulleyJoint ) to reject a relink. This is the last step that happens when relinking, after the joint has set valid to true/false."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateJoint"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateJoints"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GeneratedWaveNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Plays audio using the specified type of generated wave."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0."
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment that will be applied to the sound when it plays. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible."
				}
				Property
				{
					var Name = "WaveFrequency"
					var Type = "Real"
					var Description = "The frequency of the generated sound wave. This value will have no effect if the Noise type is chosen."
				}
				Property
				{
					var Name = "WaveType"
					var Type = "SynthWaveType"
					var Description = "The type of sound wave used to generate the audio. Possible types are Sine, Square, Saw, Triangle, and Noise (randomly generated white noise)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateAsset"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateInstance"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean paused)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "paused"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateWaveFrequency"
					var Description = "Interpolates the WaveFrequency property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. This method will have no effect if the Noise type is chosen."
					var ReturnType = "Void"
					var Parameters = "(Real frequency, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frequency"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Play"
					var Description = "Starts playing the generated audio."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseAsset"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseInstance"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Stop"
					var Description = "Stops playing the generated audio."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GetterSetter"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GetterSetterRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "GetterSetterRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "GetterSetter"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Graphical"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Base interface for components that require rendering."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GroupSortValue"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "LocalAabbCenter"
					var Type = "Real3"
					var Description = "Center of the bounding box defined in local space, world transform will be applied."
				}
				Property
				{
					var Name = "LocalAabbHalfExtents"
					var Type = "Real3"
					var Description = "Half extents of the bounding box defined in local space, world transform will be applied."
				}
				Property
				{
					var Name = "Material"
					var Type = "Material"
					var Description = "The composition of shader fragments that determines how the graphical is rendered."
				}
				Property
				{
					var Name = "OverrideBoundingBox"
					var Type = "Boolean"
					var Description = "Manually set the bounding box that is used for frustum culling."
				}
				Property
				{
					var Name = "ShaderInputs"
					var Type = "ShaderInputs"
					var Description = "List of shader inputs to be manually overridden only on this object."
				}
				Property
				{
					var Name = "ViewCulling"
					var Type = "Boolean"
					var Description = "If the graphical should not be drawn when its bounding volume is outside of the view frustum."
				}
				Property
				{
					var Name = "VisibilityEvents"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Visible"
					var Type = "Boolean"
					var Description = "If the graphical should be drawn."
				}
				Property
				{
					var Name = "WorldAabb"
					var Type = "Aabb"
					var Description = "The world space axis aligned bounding volume that is used for frustum culling."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddComponentShaderInputs"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddToSpace"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentRemoved"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMaterial"
					var Description = ""
					var ReturnType = "Material"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabbInternal"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldObb"
					var Description = ""
					var ReturnType = "Obb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MidPhaseQuery"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Array<GraphicalEntry> entries, Camera camera, Frustum frustum)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entries"
							var Type = "Array<GraphicalEntry>"
							var Description = ""
						}
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
						Parameter
						{
							var Name = "frustum"
							var Type = "Frustum"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMaterialModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ResourceEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ResourceEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnShaderInputsModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ShaderInputsEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ShaderInputsEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildComponentShaderInputs"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestFrustum"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const Frustum frustum, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frustum"
							var Type = "const Frustum"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestRay"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(GraphicsRayCast rayCast, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rayCast"
							var Type = "GraphicsRayCast"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateBroadPhaseAabb"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GraphicalEvent"
			var BaseClass = ""
			var Library = "GraphicsLibrary"
			var Description = "Event for changes of visibility state."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ViewingObject"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GraphicsSpace"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddCamera"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddDebugGraphical"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Graphical graphical)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphical"
							var Type = "Graphical"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddGraphical"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Graphical graphical)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphical"
							var Type = "Graphical"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddToVisibleGraphicals"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Graphical graphical, Camera camera, Vec3 cameraPos, Vec3 cameraDir, Frustum frustum)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphical"
							var Type = "Graphical"
							var Description = ""
						}
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
						Parameter
						{
							var Name = "cameraPos"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "cameraDir"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "frustum"
							var Type = "Frustum"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateDebugGraphicals"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnFrameUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real frameDt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameDt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnLogicUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSpaceDestroyed"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ObjectEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueueVisibilityEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Graphical graphical)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphical"
							var Type = "Graphical"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueueVisibilityEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(GraphicalList graphicals)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphicals"
							var Type = "GraphicalList"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueueVisibilityEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(GraphicalList graphicals, Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphicals"
							var Type = "GraphicalList"
							var Description = ""
						}
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RegisterVisibility"
					var Description = "Fills out the passed in vector with all objects inside the given Aabb."
					var ReturnType = "Void"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveCamera"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveGraphical"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Graphical graphical)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "graphical"
							var Type = "Graphical"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RenderQueuesUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RenderTasks renderTasks, RenderQueues renderQueues)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "renderTasks"
							var Type = "RenderTasks"
							var Description = ""
						}
						Parameter
						{
							var Name = "renderQueues"
							var Type = "RenderQueues"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RenderTasksUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RenderTasks renderTasks)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "renderTasks"
							var Type = "RenderTasks"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendVisibilityEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnregisterVisibility"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "GraphicsSpace"
					var Parameters = "(const GraphicsSpace)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "const GraphicsSpace"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GravityEffect"
			var BaseClass = "BasicDirectionEffect"
			var Library = "PhysicsLibrary"
			var Description = "A constant acceleration that is applied in the given direction (mass is ignored). This is useful for creating gravity (either on the entire world or in a region) that will push/pull objects in a given direction at a constant acceleration."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(SpringSystem obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "SpringSystem"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "GridDraw"
			var BaseClass = ""
			var Library = "EditorLibrary"
			var Description = "A component used for drawing a grid."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AlwaysDrawInEditor"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Axis"
					var Type = "AxisDirection"
					var Description = ""
				}
				Property
				{
					var Name = "CellSize"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "DrawAxisOrigins"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "DrawInGame"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "FollowEditorCamera"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "GridColor"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "GridHighlight"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "HalfCellOffset"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "HighlightInterval"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Lines"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DebugDraw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Draw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnFrameUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HeightMap"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "A common class that represents height map data."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Source"
					var Type = "HeightMapSource"
					var Description = "Get source for height map."
				}
				Property
				{
					var Name = "UnitsPerPatch"
					var Type = "Real"
					var Description = "Gets/sets the number of units per patch."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyNoiseToPatch"
					var Description = "Apply a noise function to a patch (generate terrain)"
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, Real baseHeight, Real frequency, Real amplitude)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "baseHeight"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "frequency"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "amplitude"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastLocalRay"
					var Description = ""
					var ReturnType = "HeightMapRayRange"
					var Parameters = "(const Ray ray, Real maxT)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ray"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxT"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastWorldRay"
					var Description = ""
					var ReturnType = "HeightMapRayRange"
					var Parameters = "(const Ray ray, Real maxT)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ray"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxT"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePaddedHeightPatchVertices"
					var Description = "Computes the patch's vertex data and stores it in outVertices outVertices must already be the correct size, it is assumed that not all vertices always need to be computed."
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, Array<Vec3> outVertices, CellIndex min, CellIndex max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "outVertices"
							var Type = "Array<Vec3>"
							var Description = ""
						}
						Parameter
						{
							var Name = "min"
							var Type = "CellIndex"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "CellIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreatePatchAtIndex"
					var Description = "Create a patch at a particular index."
					var ReturnType = "HeightPatch"
					var Parameters = "(PatchIndexParam index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "PatchIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DestroyPatchAtIndex"
					var Description = "Destroy a patch at a given index."
					var ReturnType = "Void"
					var Parameters = "(PatchIndexParam index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "PatchIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GenerateIndices"
					var Description = "Generate the indices for a particular lod set."
					var ReturnType = "Void"
					var Parameters = "(Array<Integer> outIndices, Integer lod)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "outIndices"
							var Type = "Array<Integer>"
							var Description = ""
						}
						Parameter
						{
							var Name = "lod"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAbsoluteIndex"
					var Description = "Converts the patch and cell index to an absolute index."
					var ReturnType = "AbsoluteIndex"
					var Parameters = "(PatchIndex patchIndex, CellIndex cellIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patchIndex"
							var Type = "PatchIndex"
							var Description = ""
						}
						Parameter
						{
							var Name = "cellIndex"
							var Type = "CellIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAbsoluteIndexFromLocal"
					var Description = "Get the absolute index for a particular local position."
					var ReturnType = "AbsoluteIndex"
					var Parameters = "(Vec2 localPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPosition"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAbsoluteIndexFromWorld"
					var Description = "Get the absolute index for a particular world position."
					var ReturnType = "AbsoluteIndex"
					var Parameters = "(Vec3 worldPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAllPatches"
					var Description = "Get all of the patches."
					var ReturnType = "valuerange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCellIndex"
					var Description = ""
					var ReturnType = "CellIndex"
					var Parameters = "(AbsoluteIndexParam absoluteIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "absoluteIndex"
							var Type = "AbsoluteIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCellIndex"
					var Description = ""
					var ReturnType = "CellIndex"
					var Parameters = "(AbsoluteIndexParam absoluteIndex, PatchIndexParam patchIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "absoluteIndex"
							var Type = "AbsoluteIndexParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "patchIndex"
							var Type = "PatchIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCellIndexFromLocal"
					var Description = ""
					var ReturnType = "CellIndex"
					var Parameters = "(Vec2 localPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPosition"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCellIndexFromWorld"
					var Description = ""
					var ReturnType = "CellIndex"
					var Parameters = "(Vec3 worldPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHeightPatchVertices"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, Array<Vec3> outVertices)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "outVertices"
							var Type = "Array<Vec3>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabbRange"
					var Description = ""
					var ReturnType = "HeightMapAabbRange"
					var Parameters = "(const Aabb aabb, real thickness)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "const Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "thickness"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalPosition"
					var Description = "Get the local position."
					var ReturnType = "Vec2"
					var Parameters = "(PatchIndexParam index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "PatchIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalPosition"
					var Description = "Get the local position from a world position."
					var ReturnType = "Vec2"
					var Parameters = "(Vec3 worldPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPaddedHeightPatchVertices"
					var Description = "Populates the given array with the vertex data that represents the patch Will generate the vertex data if it is not cached Adjacent vertices are padded on all sides for gradient calculations."
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, Array<Vec3> outVertices)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "outVertices"
							var Type = "Array<Vec3>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPatchAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "(HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPatchAndCellIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AbsoluteIndexParam absoluteIndex, PatchIndex patchIndex, CellIndex cellIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "absoluteIndex"
							var Type = "AbsoluteIndexParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "patchIndex"
							var Type = "PatchIndex"
							var Description = ""
						}
						Parameter
						{
							var Name = "cellIndex"
							var Type = "CellIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPatchAtIndex"
					var Description = "Get a patch at a particular index."
					var ReturnType = "HeightPatch"
					var Parameters = "(PatchIndexParam index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "PatchIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPatchIndexFromLocal"
					var Description = "Get the index for a particular local position."
					var ReturnType = "PatchIndex"
					var Parameters = "(Vec2 localPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPosition"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPatchIndexFromWorld"
					var Description = "Get the index for a particular world position."
					var ReturnType = "PatchIndex"
					var Parameters = "(Vec3 worldPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPatchLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "(HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetQuadAtIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AbsoluteIndex index, Triangle triangles, Integer count)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "AbsoluteIndex"
							var Description = ""
						}
						Parameter
						{
							var Name = "triangles"
							var Type = "Triangle"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldAabbRange"
					var Description = ""
					var ReturnType = "HeightMapAabbRange"
					var Parameters = "(const Aabb aabb, real thickness)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "const Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "thickness"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldPointHeight"
					var Description = "Get the height of a given point relative to the height map Note that this function does NOT sample the heightmap."
					var ReturnType = "Real"
					var Parameters = "(Vec3 worldPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldPosition"
					var Description = "Get the world position from a local position."
					var ReturnType = "Vec3"
					var Parameters = "(Vec2 localPosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPosition"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldPosition"
					var Description = "Get the world position."
					var ReturnType = "Vec3"
					var Parameters = "(PatchIndexParam index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "PatchIndexParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldUp"
					var Description = "Get the world space up vector."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadFromHeightMapSource"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MakePaddedHeightBuffer"
					var Description = "Pre-fetches all patch and adjacent patch heights that are needed to compute tangents and bitangents for this patch to prevent any hashes or branching when computing vertices."
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, real heights)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "heights"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Modified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnLevelLoaded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ObjectEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleHeight"
					var Description = "Sample the height using a world space position."
					var ReturnType = "Real"
					var Parameters = "(Vec3 worldPosition, Real defaultValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPosition"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "defaultValue"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleHeight"
					var Description = "Sample the height using a local space position."
					var ReturnType = "Real"
					var Parameters = "(Vec2 localPosition, Real defaultValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPosition"
							var Type = "Vec2"
							var Description = ""
						}
						Parameter
						{
							var Name = "defaultValue"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleHeight"
					var Description = "Sample a height given an absolute index Absolute indices are determined using the PatchIndex * HeightPatch::Size + CellIndex."
					var ReturnType = "Real"
					var Parameters = "(AbsoluteIndexParam absoluteIndex, Real defaultValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "absoluteIndex"
							var Type = "AbsoluteIndexParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "defaultValue"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SaveToHeightMapSource"
					var Description = "Save and load from SaveToHeightMapSource."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SaveToObj"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringParam fileName, HeightMap heightMap)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "fileName"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "heightMap"
							var Type = "HeightMap"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendPatchEvent"
					var Description = "Sends out a patch event."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventType, HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SignalAllPatchesModified"
					var Description = "Updates all patches."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SignalPatchModified"
					var Description = "Signal that a particular patch was modified (typically updates physics, graphics, etc)"
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SignalPatchModified"
					var Description = "Signal that a particular patch was modified (typically updates physics, graphics, etc)"
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, Vec2 min, Vec2 max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "min"
							var Type = "Vec2"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAdjacentPatches"
					var Description = "Updates adjacent patch vertices."
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePatchVertices"
					var Description = "Computes vertices for the whole patch."
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePatchVertices"
					var Description = "Computes only the vertices in the bound given by min/max."
					var ReturnType = "Void"
					var Parameters = "(HeightPatch patch, Vec2 min, Vec2 max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "patch"
							var Type = "HeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "min"
							var Type = "Vec2"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Vec2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HeightMapCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Used to represent a height map for collision."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Thickness"
					var Type = "Real"
					var Description = "How thick the surface of the height map is. Used to avoid tunneling problems."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CacheWorldValues"
					var Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Cast"
					var Description = "This is a specialization of Ray vs. HeightMap that goes through the internal mid-phase with an optimized ray-tracing algorithm instead of the generic GetOverlapAabb function. Note: the ray here is expected to be in this cog's local space."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearCachedEdgeAdjacency"
					var Description = "Clear the cached information used to avoid catching edges. Typically called internally by physics, but is exposed for manual triggering."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHeightMap"
					var Description = ""
					var ReturnType = "HeightMap"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetInfoMap"
					var Description = ""
					var ReturnType = "TriangleInfoMap"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOverlapRange"
					var Description = "Returns a range of local-space triangles that overlap the passed in local-space aabb."
					var ReturnType = "HeightMapRangeWrapper"
					var Parameters = "(Aabb localAabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localAabb"
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTriangle"
					var Description = "Returns the triangle associated with the given key (the key should come from our own range)."
					var ReturnType = "Triangle"
					var Parameters = "(Integer key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "KeyToTriangleIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer key, AbsoluteIndex absolueIndex, Integer triIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "absolueIndex"
							var Type = "AbsoluteIndex"
							var Description = ""
						}
						Parameter
						{
							var Name = "triIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadPatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMap map, HeightPatch mapPatch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "map"
							var Type = "HeightMap"
							var Description = ""
						}
						Parameter
						{
							var Name = "mapPatch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnHeightMapPatchAdded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent hEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "hEvent"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnHeightMapPatchModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent hEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "hEvent"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnHeightMapPatchRemoved"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent hEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "hEvent"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildModifiedResources"
					var Description = "Check all resources used by this collider to see if they need to be updated. Called by several \"Get\" functions to force up-to-date information."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReloadAllPatches"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TriangleIndexToKey"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AbsoluteIndex absolueIndex, Integer triIndex, Integer key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "absolueIndex"
							var Type = "const AbsoluteIndex"
							var Description = ""
						}
						Parameter
						{
							var Name = "triIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "key"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HeightMapEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Used by any height map event."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Map"
					var Type = "HeightMap"
					var Description = "The height map."
				}
				Property
				{
					var Name = "Patch"
					var Type = "HeightPatch"
					var Description = "The associated patch (if it applies)"
				}
				Property
				{
					var Name = "Source"
					var Type = "HeightMapSource"
					var Description = "The height Map source to save to."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HeightMapModel"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Generates a graphical mesh from every patch of height data in the HeightMap component."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GraphicalPatches"
					var Type = "HashMap<HeightPatch,GraphicalHeightPatch>"
					var Description = ""
				}
				Property
				{
					var Name = "LocalAabb"
					var Type = "Aabb"
					var Description = ""
				}
				Property
				{
					var Name = "Map"
					var Type = "HeightMap"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddGraphicalPatchEntry"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Array<GraphicalEntry> entries, GraphicalHeightPatch graphicalPatch, PatchIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entries"
							var Type = "Array<GraphicalEntry>"
							var Description = ""
						}
						Parameter
						{
							var Name = "graphicalPatch"
							var Type = "GraphicalHeightPatch"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "PatchIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateGraphicalPatchMesh"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightPatch heightPatch)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "heightPatch"
							var Type = "HeightPatch"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMaterial"
					var Description = ""
					var ReturnType = "Material"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MidPhaseQuery"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Array<GraphicalEntry> entries, Camera camera, Frustum frustum)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entries"
							var Type = "Array<GraphicalEntry>"
							var Description = ""
						}
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
						Parameter
						{
							var Name = "frustum"
							var Type = "Frustum"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnPatchAdded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnPatchModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnPatchRemoved"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSave"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HeightMapEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "HeightMapEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildLocalAabb"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestRay"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(GraphicsRayCast rayCast, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rayCast"
							var Type = "GraphicsRayCast"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Hierarchy"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Component that gives an game object the ability to have child objects and Contains a list of children."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Children"
					var Type = "HierarchyList"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DestroyChildren"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ShouldSerialize"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HierarchyEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Child"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "Parent"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HierarchySpline"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "A spline that builds its control points from all child cogs that have Transforms."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Closed"
					var Type = "Boolean"
					var Description = "Does the spline loop back on itself?"
				}
				Property
				{
					var Name = "DebugDrawSpline"
					var Type = "Boolean"
					var Description = "Should the spline draw every frame? Mainly used for debugging purposes."
				}
				Property
				{
					var Name = "Error"
					var Type = "Real"
					var Description = "The max number of units that a line segment is allowed to deviate from the curve."
				}
				Property
				{
					var Name = "Spline"
					var Type = "Spline"
					var Description = "The internal spline data."
				}
				Property
				{
					var Name = "SplineColor"
					var Type = "Real4"
					var Description = "What color should that spline be drawn with."
				}
				Property
				{
					var Name = "SplineType"
					var Type = "SplineType"
					var Description = "The kind of spline (Linear, BSpline, CatmulRom). Determines how the control points affect the curve."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ConnectChildEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog child)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "child"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceRebuild"
					var Description = "Forcibly rebuilds the baked points for the spline."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetChildrenConnections"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTotalDistance"
					var Description = "The total arc-length of the curve. Use to normalize the curve if you wish."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnChildAttached"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HierarchyEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "HierarchyEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnChildDetached"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HierarchyEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "HierarchyEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnFrameUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMarkModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnQuerySpline"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SplineEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "SplineEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildIfModified"
					var Description = "Rebuild the baked points if there are any changes to the spline's control points. This should never need to be manually called."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleDistance"
					var Description = "Samples the curve at a given arc-length distance."
					var ReturnType = "SplineSampleData"
					var Parameters = "(real distance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "distance"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "HighPassNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a high pass filter to audio generated by its input SoundNodes (removes low frequencies)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CutoffFrequency"
					var Type = "Real"
					var Description = "Frequencies below this number in the node's input will be attenuated. Setting this value to 20.0 or lower will skip all filter calculations."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "IEncoding"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Ascii"
					var Type = "AsciiEncoding"
					var Description = ""
				}
				Property
				{
					var Name = "Utf8"
					var Type = "Utf8Encoding"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "IStream"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Capabilities"
					var Type = "StreamCapabilities"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "DoubleInteger"
					var Description = ""
				}
				Property
				{
					var Name = "Position"
					var Type = "DoubleInteger"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "IgnoreSpaceEffects"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Tells a cog to ignore certain effects on the space/level. Used to special case objects to ignore things such as drag or gravity."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IgnoreBuoyancy"
					var Type = "Boolean"
					var Description = "Whether or not to ignore buoyancy effects."
				}
				Property
				{
					var Name = "IgnoreCustom"
					var Type = "Boolean"
					var Description = "Whether or not to ignore custom effects."
				}
				Property
				{
					var Name = "IgnoreDrag"
					var Type = "Boolean"
					var Description = "Whether or not to ignore drag effects."
				}
				Property
				{
					var Name = "IgnoreFlow"
					var Type = "Boolean"
					var Description = "Whether or not to ignore flow effects."
				}
				Property
				{
					var Name = "IgnoreForce"
					var Type = "Boolean"
					var Description = "Whether or not to ignore force effects."
				}
				Property
				{
					var Name = "IgnoreGravity"
					var Type = "Boolean"
					var Description = "Whether or not to ignore gravity effects."
				}
				Property
				{
					var Name = "IgnorePointForce"
					var Type = "Boolean"
					var Description = "Whether or not to ignore point force effects."
				}
				Property
				{
					var Name = "IgnorePointGravity"
					var Type = "Boolean"
					var Description = "Whether or not to ignore point gravity effects."
				}
				Property
				{
					var Name = "IgnoreThrust"
					var Type = "Boolean"
					var Description = "Whether or not to ignore thrust effects."
				}
				Property
				{
					var Name = "IgnoreTorque"
					var Type = "Boolean"
					var Description = "Whether or not to ignore torque effects."
				}
				Property
				{
					var Name = "IgnoreVortex"
					var Type = "Boolean"
					var Description = "Whether or not to ignore vortex effects."
				}
				Property
				{
					var Name = "IgnoreWind"
					var Type = "Boolean"
					var Description = "Whether or not to ignore wind effects."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetIgnoreState"
					var Description = "Whether or not to ignore a physics effect given it's type."
					var ReturnType = "Boolean"
					var Parameters = "(PhysicsEffectType effectType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effectType"
							var Type = "PhysicsEffectType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsIgnored"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetIgnoreState"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffectType effectType, Boolean ignore)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effectType"
							var Type = "PhysicsEffectType"
							var Description = ""
						}
						Parameter
						{
							var Name = "ignore"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "IndirectionType"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ReferencedType"
					var Type = "BoundType"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "InputDeviceEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "An event to inform which input device is being used by the user."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Device"
					var Type = "InputDevice"
					var Description = ""
				}
				Property
				{
					var Name = "LastDevice"
					var Type = "InputDevice"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer2"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer2x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer2x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer2x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer3x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer3x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer3x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M23"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "W"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "WAxis"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WW"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "WWW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WWWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WWXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WWYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WWZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "WXW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WXWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WXXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WXYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WXZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "WYW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WYWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WYXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WYYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WYZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "WZW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WZWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WZXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WZYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "WZZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XW"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XWW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XWWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XWXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XWYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XWZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XXW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XYW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "XZW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YW"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YWW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YWWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YWXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YWYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YWZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YXW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YYW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "YZW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZW"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZWW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZW"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZW"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer4"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer4x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer4x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M32"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Integer4x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M23"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M32"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M33"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "IpAddress"
			var BaseClass = "SocketAddress"
			var Library = "MetaLibrary"
			var Description = "IPv4/IPv6 network host identifier Provided for convenience Note: This class is not slice-able, it has extra data."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Hash"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Host"
					var Type = "string"
					var Description = "Returns the valid IP address host as a numeric string, else String()"
				}
				Property
				{
					var Name = "InternetProtocol"
					var Type = "InternetProtocol"
					var Description = "Returns the valid IP address protocol version, else InternetProtocol::Unspecified."
				}
				Property
				{
					var Name = "IsValid"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Port"
					var Type = "Integer"
					var Description = "Returns the valid IP address port, else 0."
				}
				Property
				{
					var Name = "PortString"
					var Type = "string"
					var Description = "Returns the valid IP address port as a numeric string, else String()"
				}
				Property
				{
					var Name = "String"
					var Type = "string"
					var Description = "Returns the valid IP address as a numeric \"host:port\" string, else String()"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = "Clears the IP address."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Hash"
					var Description = "Returns the valid IP address as a hash value, else 0."
					var ReturnType = "size_t"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = "Returns true if this is a non-empty IPv4/IPv6 address, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Copy Assignment Operators."
					var ReturnType = "IpAddress"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = "Copy Assignment Operator."
					var ReturnType = "IpAddress"
					var Parameters = "(const SocketAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const SocketAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Joint"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A base joint class. Joints are used to connect two objects together with some sort of a mathematical rule in terms of an object's position and velocity."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints."
				}
				Property
				{
					var Name = "AutoSnaps"
					var Type = "Boolean"
					var Description = "Determines if this joint will automatically delete itself if it reaches the max impulse value. This will still send an event if it snaps."
				}
				Property
				{
					var Name = "CollideConnected"
					var Type = "Boolean"
					var Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide."
				}
				Property
				{
					var Name = "MaxImpulse"
					var Type = "Real"
					var Description = "The maximum impulse (instantaneous force) that this joint can apply to correct itself."
				}
				Property
				{
					var Name = "SendsEvents"
					var Type = "Boolean"
					var Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BatchEventsVirtual"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CommitVirtual"
					var Description = "Commit is where each joint has a change to copy any data from the temp buffer of the molecules back into it's internal storage (such as the total impulse for each constraint atom)."
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = "Used to detect when motors/limits/springs are added dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentRemoved"
					var Description = "Used to detect when motors/limits/springs are removed dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeCurrentAnchors"
					var Description = "Helper to grab the current anchors from the object link."
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchors)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchors"
							var Type = "AnchorAtom"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeCurrentReferenceAngle"
					var Description = "Helper to compute a reference angle from the current object's rotations."
					var ReturnType = "Void"
					var Parameters = "(AngleAtom referenceAngle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "referenceAngle"
							var Type = "AngleAtom"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculesVirtual"
					var Description = "Fills out the fragments for the solver. Must increment the walker. Compute molecules actually fills out the fragments for the solver. This step will actually compute the jacobian, mass terms, error values, etc... to be used during the solving step."
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMoleculesVirtual"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDrawVirtual"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetActiveFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAngularBaumgarte"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(Integer type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAngularErrorCorrection"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAngularErrorCorrection"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(Integer type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilterVirtual"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCog"
					var Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop."
					var ReturnType = "Cog"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCollider"
					var Description = ""
					var ReturnType = "Collider"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGhost"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJointName"
					var Description = ""
					var ReturnType = "cstr"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJointType"
					var Description = ""
					var ReturnType = "JointTypes"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinearBaumgarte"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(Integer type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinearErrorCorrection"
					var Description = "This function is so that the base Joint can have this called on it without knowing what type the joint is."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinearErrorCorrection"
					var Description = "This function is so that the base Joint can have this called on it without knowing what type the joint is."
					var ReturnType = "real"
					var Parameters = "(Integer type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAngleHelper"
					var Description = "Helpers to get/set local space reference frames for an angle atom."
					var ReturnType = "Quat"
					var Parameters = "(const AngleAtom angleAtom, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angleAtom"
							var Type = "const AngleAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAxisHelper"
					var Description = "Helpers to get/set a local space axis for an axis atom."
					var ReturnType = "Vec3"
					var Parameters = "(const AxisAtom axisAtom, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "axisAtom"
							var Type = "const AxisAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalPointHelper"
					var Description = "Helper to get/set a local point on an anchor atom."
					var ReturnType = "Vec3"
					var Parameters = "(const AnchorAtom anchor, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "const AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOnIsland"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOtherObject"
					var Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time."
					var ReturnType = "Cog"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetShouldBaumgarteBeUsed"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "type"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSlop"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetValid"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldAxisHelper"
					var Description = "Helpers to get/set both local space axes from one world direction. Properly deals with marking side effects on both local axes."
					var ReturnType = "Vec3"
					var Parameters = "(const AxisAtom axisAtom)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "axisAtom"
							var Type = "const AxisAtom"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldPointHelper"
					var Description = "Helpers to get/set world points on an anchor atom. The set for A/B are kept separate for marking side-effect properties."
					var ReturnType = "Vec3"
					var Parameters = "(const AnchorAtom anchor, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "const AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LinkPair"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCountVirtual"
					var Description = "Returns the number of fragments for the solver."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(size_t edgeIndex, Vec3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ObjectLinkPointUpdatedHelper"
					var Description = "Helper function for when an object link point changes."
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchor, size_t edgeIndex, Vec3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnObjectLinkChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectLinkEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ObjectLinkEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnObjectLinkPointChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectLinkPointChangedEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "ObjectLinkPointChangedEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCountVirtual"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Relink"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index, Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetFilter"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetGhost"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean ghost)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ghost"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalAngleHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AngleAtom angleAtom, Integer index, QuatParam localReferenceFrame)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angleAtom"
							var Type = "AngleAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localReferenceFrame"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalAxisHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AxisAtom axisAtom, Integer index, Vec3 localAxis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "axisAtom"
							var Type = "AxisAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localAxis"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalPointHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchor, Integer index, Vec3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetOnIsland"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean onIsland)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "onIsland"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetPair"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ColliderPair pair)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pair"
							var Type = "ColliderPair"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetValid"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean valid)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "valid"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldAxisHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AxisAtom axisAtom, Vec3 worldAxis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "axisAtom"
							var Type = "AxisAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldAxis"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldPointAHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchor, Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldPointBHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchor, Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldPointHelper"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchor, Vec3 worldPoint, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldPointsHelper"
					var Description = "Sets the position of the anchor on object A and B given a position in world space."
					var ReturnType = "Void"
					var Parameters = "(AnchorAtom anchor, Vec3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "anchor"
							var Type = "AnchorAtom"
							var Description = ""
						}
						Parameter
						{
							var Name = "point"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SolveVirtual"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpecificJointRelink"
					var Description = "Used for a specific joint type (eg PulleyJoint) to reject a relink. This is the last step that happens when relinking, after the joint has set valid to true/false."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnLinkPair"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtomsVirtual"
					var Description = "Update atoms is the step where a constraint compute the values (position difference, angle difference, etc...) of all of it's atoms. This info is then used to determine which atoms are actually active (dealing with limits). A solver can use this total count to efficient create it's molecule \"array\"."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateColliderCachedTransforms"
					var Description = "Helper function that forces the collider's cached body to world transforms to be up-to-date."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStartVirtual"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointConfigOverride"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Overrides the joint's configuration values of slop, linear Baumgarte, angular Baumgarte and linear max error correction. Slop is the amount of error allowed before position correction takes effect. Baumgarte is used to exponentially correct the error. Baumgarte is split into linear and angular portions because of stability. The linear max error correction is only used when the joint is solved with post stabilization."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AngularBaumgarte"
					var Type = "Real"
					var Description = "The exponential correction term for angular error."
				}
				Property
				{
					var Name = "AngularErrorCorrection"
					var Type = "Real"
					var Description = "The max amount of error that can be corrected by the angular portion of any constraint in one frame."
				}
				Property
				{
					var Name = "LinearBaumgarte"
					var Type = "Real"
					var Description = "The exponential correction term for linear error."
				}
				Property
				{
					var Name = "LinearErrorCorrection"
					var Type = "Real"
					var Description = "The max amount of error that can be corrected by the linear portion of any constraint in one frame."
				}
				Property
				{
					var Name = "PositionCorrectionType"
					var Type = "ConstraintPositionCorrection"
					var Description = "The kind of position correction that this joint should use."
				}
				Property
				{
					var Name = "Slop"
					var Type = "Real"
					var Description = "The amount of error allowed before position correction takes effect."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointDebugDrawConfig"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Allows the user to override some parameters for debug drawing of joints. Used to debug draw more from different object perspectives and to change the size of drawn data. This class is nothing more than a piece of data that each joint looks at to determine how it draws itself."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Whether or not this component is active."
				}
				Property
				{
					var Name = "Detail"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Object1Perspective"
					var Type = "Boolean"
					var Description = "If we draw the joint's debug info from the perspective of object 1. This is most useful when object 1 is marked as a static object and object 2 has free movement."
				}
				Property
				{
					var Name = "Object2Perspective"
					var Type = "Boolean"
					var Description = "If we draw the joint's debug info from the perspective of object 2. This is most useful when object 2 is marked as a static object and object 1 has free movement."
				}
				Property
				{
					var Name = "Size"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointEvent"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "Sent out when a joint signals some kind of event. For example, when a joint exceeds its force limit or when a joint hits a limit."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Joint"
					var Type = "Joint"
					var Description = "The Joint that triggered the event."
				}
				Property
				{
					var Name = "JointCog"
					var Type = "Cog"
					var Description = "Returns the Joint Cog that signaled the event."
				}
				Property
				{
					var Name = "ObjectA"
					var Type = "Cog"
					var Description = "Get the ObjectA that was connected in the joint."
				}
				Property
				{
					var Name = "ObjectB"
					var Type = "Cog"
					var Description = "Get the ObjectB that was connected in the joint."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointHolder"
			var BaseClass = "BaseJointHolder< Joint >"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoSnaps"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsGhost"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Joint"
					var Type = "Joint"
					var Description = ""
				}
				Property
				{
					var Name = "Limit"
					var Type = "JointLimit"
					var Description = ""
				}
				Property
				{
					var Name = "MaxImpulse"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Motor"
					var Type = "JointMotor"
					var Description = ""
				}
				Property
				{
					var Name = "OtherBody"
					var Type = "RigidBody"
					var Description = ""
				}
				Property
				{
					var Name = "OtherCollider"
					var Type = "Collider"
					var Description = ""
				}
				Property
				{
					var Name = "Owner"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "SendsEvents"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Spring"
					var Type = "JointSpring"
					var Description = ""
				}
				Property
				{
					var Name = "Valid"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointLimit"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A limit for a joint. Used to add a min/max bounds to a joint. When the joint is in between the min/max bounds, the \"limited\" portion will be ignored (The stick will not solve when it is in between the bounds, making it a rope). See each joint for a description of how it reacts to a limit."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this limit is currently active."
				}
				Property
				{
					var Name = "AtomIds"
					var Type = "Integer"
					var Description = "Signifies what atoms on the joint this effects."
				}
				Property
				{
					var Name = "LowerLimit"
					var Type = "Real"
					var Description = "The lower bound for this limit. See wiki for each joint's details."
				}
				Property
				{
					var Name = "UpperLimit"
					var Type = "Real"
					var Description = "The upper bound for this limit. See wiki for each joint's details."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetAtLowerLimit"
					var Description = "Are we currently at the lower limit?"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtUpperLimit"
					var Description = "Are we currently at the upper limit?"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexActive"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer atomIndexMask)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndexMask"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWasAtLowerLimit"
					var Description = "Were we at the lower limit last frame? Used to only send out a \"start\" event for hitting the limit."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWasAtUpperLimit"
					var Description = "Were we at the upper limit last frame? Used to only send out a \"start\" event for hitting the limit."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = "Has this joint been initialized with a valid joint. Also used to deal with calling sets in serialize."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetAtLowerLimit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetAtUpperLimit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWasAtLowerLimit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWasAtUpperLimit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointMotor"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A motor for a joint. Used to add a constant pull or push to a joint. A motor defines a desired speed to move at as well as a max force that can be applied to reach that force at any timestep. See each joint for a description of how it reacts to a motor."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this motor is currently active."
				}
				Property
				{
					var Name = "AtomIds"
					var Type = "Integer"
					var Description = "Signifies what atoms on the joint this effects."
				}
				Property
				{
					var Name = "MaxImpulse"
					var Type = "Real"
					var Description = "The maximum impulse that the motor can apply each frame to reach the target speed."
				}
				Property
				{
					var Name = "Reverse"
					var Type = "Boolean"
					var Description = "Determines if this motor should move in reverse. This is a quick hand instead of setting the speed to negative."
				}
				Property
				{
					var Name = "Speed"
					var Type = "Real"
					var Description = "The desired speed for this motor. See wiki for each joint's details."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetAtomIndexActive"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer atomIndexMask)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndexMask"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = "Has this joint been initialized with a valid joint. Also used to deal with calling sets in serialize."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JointSpring"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A spring for a joint. Used to make a joint soft and therefore behave spring-like. A joint spring has a frequency in hertz at which to oscillate as well as a dampening ratio. The ratio should vary from 0 to 1 where 0 is no dampening and 1 is critical dampening. See each joint for a description of how it reacts to a spring."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this motor is currently active."
				}
				Property
				{
					var Name = "AtomIds"
					var Type = "Integer"
					var Description = "Signifies what atoms on the joint this effects."
				}
				Property
				{
					var Name = "DampRatio"
					var Type = "Real"
					var Description = "The dampening ratio of this spring. The value should range from 0 to 1 where 0 is no dampening and 1 is critical dampening."
				}
				Property
				{
					var Name = "FrequencyHz"
					var Type = "Real"
					var Description = "The oscillation frequency of the spring in Hertz (cycles per second)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetAtomIndexActive"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer atomIndexMask)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndexMask"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = "Has this joint been initialized with a valid joint. Also used to deal with calling sets in serialize."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Joystick"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "A Joystick is associated with a hardware joystick, and provides the ability to query axes and buttons."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AxisCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "ButtonCount"
					var Type = "Integer"
					var Description = "Get the number of buttons or axes."
				}
				Property
				{
					var Name = "IsActive"
					var Type = "Boolean"
					var Description = "Gets whether or not the joystick is active."
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Get the name of the Joystick ."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Calibrating"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EndCalibration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAxisIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAxisName"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAxisValue"
					var Description = "Queries an axes and returns a value between [-1, 1] The valid range of axes is between 0 and 'GetMaxAxes' If the axis is not valid, then the value returned is 0."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAxisValueByName"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetButtonValue"
					var Description = "Queries a button and returns true if it is down, false if it is up The valid range of buttons is between 0 and 'GetMaxButtons' If the button is not valid, then the value returned is false."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetInputMapping"
					var Description = ""
					var ReturnType = "RawControlMapping"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InactiveClear"
					var Description = "Clears out the joystick the joystick state when the controller is inactive."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalSetInputMapping"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RawControlMapping map)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "map"
							var Type = "RawControlMapping"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalSetInputMappingIfDifferent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RawControlMapping map)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "map"
							var Type = "RawControlMapping"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsParsedInput"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadInputMapping"
					var Description = "Load an input mapping."
					var ReturnType = "Void"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RawProcess"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DataBlock data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "DataBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RawSetAxis"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index, Integer rawValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "rawValue"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RawSetButtons"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer newStates)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newStates"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SaveInputMapping"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SignalUpdated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StartCalibration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "JoystickEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Joystick events are sent when a game pad button state is changed."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Button"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Joystick"
					var Type = "Joystick"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Joysticks"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Joysticks is a collection of all joysticks available."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "JoystickCount"
					var Type = "Integer"
					var Description = "Get the number of joysticks."
				}
				Property
				{
					var Name = "Joysticks"
					var Type = "JoystickRange"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddJoystickDevice"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer deviceHandle, Integer hardwardGuid, string name, RawControlMapping map)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "deviceHandle"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "hardwardGuid"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "map"
							var Type = "RawControlMapping"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DeactivateAll"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJoystickByDevice"
					var Description = "Get the joystick for a given hardware id."
					var ReturnType = "Joystick"
					var Parameters = "(Integer id)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "id"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "JoysticksChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Keyboard"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Keyboard representing the physical keyboard."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Instance"
					var Type = "Keyboard"
					var Description = ""
				}
				Property
				{
					var Name = "States"
					var Type = "byte"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetKeyName"
					var Description = "Gets a string name of a particular key."
					var ReturnType = "string"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "KeyIsDown"
					var Description = "Is the particular currently down."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "KeyIsPressed"
					var Description = "Was the key pressed this frame."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "KeyIsReleased"
					var Description = "Was the key released this frame."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "KeyIsUp"
					var Description = "Is the particular currently up."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateKeys"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(KeyboardEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "KeyboardEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "KeyboardEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Represents information about key state changes."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AltPressed"
					var Type = "Boolean"
					var Description = "Is Alt pressed with this key?"
				}
				Property
				{
					var Name = "CtrlPressed"
					var Type = "Boolean"
					var Description = "Is Ctrl pressed with this key?"
				}
				Property
				{
					var Name = "HandledEvent"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Key"
					var Type = "Keys"
					var Description = "Key that was changed."
				}
				Property
				{
					var Name = "Keyboard"
					var Type = "Keyboard"
					var Description = "Get the keyboard that generated this event."
				}
				Property
				{
					var Name = "OsKey"
					var Type = "Integer"
					var Description = "The original OS key that was pressed (platform specific)"
				}
				Property
				{
					var Name = "ShiftPressed"
					var Type = "Boolean"
					var Description = "Is Shift pressed with this key?"
				}
				Property
				{
					var Name = "SpacePressed"
					var Type = "Boolean"
					var Description = "Is Space pressed with this key?"
				}
				Property
				{
					var Name = "State"
					var Type = "KeyState"
					var Description = "State of the key Up,Down,Repeated."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "KeyboardTextEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Gives the actual key value being typed. For example, holding Shift + 'a' will give 'A'."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Character"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "LinearAxisJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A linear axis joint is used to keep an object locked on a plane that is defined by a normal. Special case use is for the dynamic controller. Should not be created by anyone else! If it is absolutely desired for movement, then the constraint should be turned off and a motor should be added. This will then push the objects in the direction of the normal of the plane."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = "The axis in world space that the object will move along."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "LinearParticleAnimator"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = "Basic Particle Animation Effects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dampening"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Force"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "Growth"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "RandomForce"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "Torque"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Twist"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "LowPassNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a low pass filter to audio generated by its input SoundNodes (removes high frequencies)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CutoffFrequency"
					var Type = "Real"
					var Description = "Frequencies above this number in the node's input will be attenuated. Setting this value to 20,000.00 or higher will skip all filter calculations."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MainConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Main configuration component."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ApplicationName"
					var Type = "string"
					var Description = "Name of the application for separating config files."
				}
				Property
				{
					var Name = "BuildDate"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "BuildVersion"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MainWindowConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Configuration component that Contains data for the main window. Used to control window size and placement. Also stores graphics context shared between graphics and the platform."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DesktopIndex"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Height"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "MaxSize"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Title"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Width"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ManipulatorJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A position joint that is designed to manipulate one object. The only difference between this and the position joint is that the manipulator always draws itself, draws differently, and configures the max force differently."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPoint"
					var Type = "Real3"
					var Description = "The local space point on the object that the joint is connected to."
				}
				Property
				{
					var Name = "TargetPoint"
					var Type = "Real3"
					var Description = "The point in world space that the object's point is being moved towards."
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = "The world space point on the object that the joint is connected to."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MassOverride"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Takes a snap shot of the current mass and inertia and overrides the object's mass so it can be resized while keeping it's old mass."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines whether the RigidBody on this component will use this mass and inertia or it's actual mass and inertia."
				}
				Property
				{
					var Name = "AutoComputeCenterOfMass"
					var Type = "Boolean"
					var Description = "Should the center of mass be auto computed or overwritten (via script)."
				}
				Property
				{
					var Name = "AutoComputeInertia"
					var Type = "Boolean"
					var Description = "Should the inertia tensor be auto computed or overwritten (via script)."
				}
				Property
				{
					var Name = "InverseMass"
					var Type = "Real"
					var Description = "The inverse mass the object is saved with."
				}
				Property
				{
					var Name = "LocalCenterOfMass"
					var Type = "Real3"
					var Description = "The center of mass in local space to override with. When the set function is called the center of mass will be locked to this value until AutoCmoputeCenterOfMass is set to true."
				}
				Property
				{
					var Name = "LocalInverseInertiaTensor"
					var Type = "Real3x3"
					var Description = "The inverse inertia tensor the object is saved with."
				}
				Property
				{
					var Name = "Mass"
					var Type = "Real"
					var Description = "Allow the user to set the mass. Overrides the inertia as a ratio of the new mass to the old mass."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ClampMassTerm"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(real value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsSerialized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueueUpdate"
					var Description = "If possible, this queues an update on the rigid body to recompute mass properties."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RecomputeMass"
					var Description = "Takes a new snapshot of the current mass and inertia."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetInverseMassInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real invMass)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "invMass"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalInverseInertiaTensorInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Mat3Param invInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "invInertia"
							var Type = "Mat3Param"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetMassInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real mass)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateMassAndInertia"
					var Description = "Given a new inverse mass, this updates the mass and inertia (inertia as a ratio of old to new mass)"
					var ReturnType = "Void"
					var Parameters = "(real invMass)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "invMass"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Math"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "E"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Pi"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Member"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IsStatic"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Library"
					var Type = "ZilchLibrary"
					var Description = ""
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Owner"
					var Type = "BoundType"
					var Description = ""
				}
				Property
				{
					var Name = "Type"
					var Type = "Type"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MemberRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MemberRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Member"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Members"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "Extension"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "Inherited"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "InheritedInstance"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "InheritedInstanceStatic"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "InheritedStatic"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "Instance"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "InstanceStatic"
					var Type = "Members"
					var Description = ""
				}
				Property
				{
					var Name = "Static"
					var Type = "Members"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MemoryLeakEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MeshCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Mesh Collider is a collision primitive for colliding with a non-moving triangle mesh."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DrawEdges"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "DrawFaceNormals"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "DrawFaces"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "PhysicsMesh"
					var Type = "PhysicsMesh"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Cast"
					var Description = "This is a specialization of Ray vs. HeightMap that goes through the internal mid-phase with an optimized ray-tracing algorithm instead of the generic GetOverlapAabb function. Note: the ray here is expected to be in this cog's local space."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOverlapRange"
					var Description = "Returns a range of local-space triangles that overlap the passed in local-space aabb."
					var ReturnType = "RangeType"
					var Parameters = "(Aabb localAabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localAabb"
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMeshModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildModifiedResources"
					var Description = "Check all resources used by this collider to see if they need to be updated. Called by several \"Get\" functions to force up-to-date information."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MeshParticleEmitter"
			var BaseClass = "ParticleEmitterShared"
			var Library = "GraphicsLibrary"
			var Description = "Emits particles on a mesh surface."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "Mesh"
					var Description = "Mesh used for this Model ."
				}
				Property
				{
					var Name = "MeshEmitMode"
					var Type = "MeshEmitMode"
					var Description = ""
				}
				Property
				{
					var Name = "NormalExtrude"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "EmitParticles"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity, Real timeAlive)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "velocity"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeAlive"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNextEmitPoint"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3Ptr position, Vec3Ptr normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "position"
							var Type = "Vec3Ptr"
							var Description = ""
						}
						Parameter
						{
							var Name = "normal"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Setup"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetupEdgeTable"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetupFaceTable"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MetaDropEvent"
			var BaseClass = ""
			var Library = "EditorLibrary"
			var Description = "MetaDropEvent for dropping MetaObjects."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Failed"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Handled"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "MouseEvent"
					var Type = "MouseEvent"
					var Description = ""
				}
				Property
				{
					var Name = "MouseOverObject"
					var Type = "Handle"
					var Description = ""
				}
				Property
				{
					var Name = "Object"
					var Type = "AnyHandle"
					var Description = ""
				}
				Property
				{
					var Name = "Position"
					var Type = "Vec2"
					var Description = ""
				}
				Property
				{
					var Name = "Result"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Testing"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ViewportMouseEvent"
					var Type = "ViewportMouseEvent"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Model"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Renders a mesh."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "Mesh"
					var Description = "Mesh that the graphical will render."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMeshModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ResourceEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ResourceEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestFrustum"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const Frustum frustum, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frustum"
							var Type = "const Frustum"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestRay"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(GraphicsRayCast rayCast, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rayCast"
							var Type = "GraphicsRayCast"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ModulationNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies either ring or amplitude modulation to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Frequency"
					var Type = "Real"
					var Description = "The frequency of the sine wave used for the modulation."
				}
				Property
				{
					var Name = "UseAmplitudeModulation"
					var Type = "Boolean"
					var Description = "If this property is true, the node will apply amplitude modulation (multiply the audio input with a unipolar sine wave with values from 0.0 to 1.0). If false, the node will apply ring modulation (multiply the input with a bipolar sine wave with values from -1.0 to 1.0)."
				}
				Property
				{
					var Name = "WetPercent"
					var Type = "Real"
					var Description = "The percentage of the input which should have the modulation applied to it."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Mouse"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Mouse object for Display System ."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Cursor"
					var Type = "Cursor"
					var Description = "Set the cursor of the mouse."
				}
				Property
				{
					var Name = "RawMovement"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ScreenMovement"
					var Type = "Real2"
					var Description = "The movement of the mouse in pixels."
				}
				Property
				{
					var Name = "ScreenPosition"
					var Type = "Real2"
					var Description = "The position of the mouse cursor relative to the application's top-left corner in pixels."
				}
				Property
				{
					var Name = "Trapped"
					var Type = "Boolean"
					var Description = "Trap the mouse preventing it from moving."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "IsButtonDown"
					var Description = "Is a mouse button currently down?"
					var ReturnType = "Boolean"
					var Parameters = "(MouseButtons button)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "button"
							var Type = "MouseButtons"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToggleTrapped"
					var Description = "Toggles if the mouse is currently trapped."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MouseCapture"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Manipulation"
					var Type = "HandleOf<MouseManipulation>"
					var Description = "The manipulation object."
				}
				Property
				{
					var Name = "PreventNextMouseUp"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Capture"
					var Description = "Starts the mouse manipulation. All mouse events will now only go to the owner of this Component. Returns whether or not the manipulation can be started."
					var ReturnType = "Boolean"
					var Parameters = "(ViewportMouseEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "ViewportMouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsCaptured"
					var Description = "Returns whether or not this has an active mouse capture."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = "We need to release the mouse manipulation when we're destroyed."
					var ReturnType = "Void"
					var Parameters = "(u32 flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "u32"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseCapture"
					var Description = "Releases the mouse manipulation."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MouseEvent"
			var BaseClass = ""
			var Library = "WidgetLibrary"
			var Description = "Mouse events for any every with the mouse."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AltPressed"
					var Type = "Boolean"
					var Description = "Is Alt held down on the keyboard?"
				}
				Property
				{
					var Name = "Button"
					var Type = "MouseButtons"
					var Description = "If this is a MouseDown event which button was changed."
				}
				Property
				{
					var Name = "ButtonDown"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "CtrlPressed"
					var Type = "Boolean"
					var Description = "Is Ctrl held down on the keyboard?"
				}
				Property
				{
					var Name = "HandledEvent"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Mouse"
					var Type = "Mouse"
					var Description = ""
				}
				Property
				{
					var Name = "Movement"
					var Type = "Vec2"
					var Description = "Movement since last mouse move."
				}
				Property
				{
					var Name = "Position"
					var Type = "Vec2"
					var Description = "Position of the Mouse."
				}
				Property
				{
					var Name = "Scroll"
					var Type = "Vec2"
					var Description = "Movement of scroll wheel."
				}
				Property
				{
					var Name = "ShiftPressed"
					var Type = "Boolean"
					var Description = "Is Shift held down on the keyboard?"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "IsButtonUp"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(MouseButtons button)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "button"
							var Type = "MouseButtons"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiConvexMesh"
			var BaseClass = "Resource"
			var Library = "PhysicsLibrary"
			var Description = "Represents a collection of convex meshes that was decomposed from a mesh."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Modified"
					var Type = "Boolean"
					var Description = "Is the resource currently modified?"
				}
				Property
				{
					var Name = "SubMeshes"
					var Type = "MultiConvexMeshSubMeshData"
					var Description = "A collection of sub-convex-meshes."
				}
				Property
				{
					var Name = "Valid"
					var Type = "Boolean"
					var Description = "Does the resource incorrectly setup? Typically involves a mis-match in indices and vertices."
				}
				Property
				{
					var Name = "Vertices"
					var Type = "MultiConvexMeshVertexData"
					var Description = "The vertex buffer data of this mesh."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddSubMesh"
					var Description = "Creates and adds a new sub-mesh to this mesh."
					var ReturnType = "SubConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Determines if a local-space ray hits any of the sub-meshes."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearSubMeshes"
					var Description = "Remove all sub-meshes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeCenterOfMassAndVolume"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInvInertiaTensor"
					var Description = "The inertia tensor cannot be scaled later so it must be recomputed each time."
					var ReturnType = "Mat3"
					var Parameters = "(Vec3 worldScale, real totalMass)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldScale"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "totalMass"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CopyTo"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MultiConvexMesh destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "destination"
							var Type = "MultiConvexMesh"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<MultiConvexMesh>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Draw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Mat4Param transform, Boolean drawEdges, Boolean drawFaces)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "drawEdges"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "drawFaces"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FillEmptyIndices"
					var Description = "If the user only specifies triangle indices (the regular indices are empty) on a sub-mesh then extract unique indices from the triangle indices. This needs to be updated later to merge the two index lists."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCenterOfMass"
					var Description = "Returns the center of mass of the entire multi-convex mesh. This value can be scaled later so it is computed once."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetVolume"
					var Description = "Returns the volume of the entire multi-convex mesh. This value can be scaled later so it is computed once."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldCenterOfMass"
					var Description = "Scales the cached center of mass into a world-space scaled center of mass."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldScale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldScale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldVolume"
					var Description = "Scales the cached volume into a world-space scaled volume."
					var ReturnType = "real"
					var Parameters = "(Vec3 worldScale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldScale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildCachedInfo"
					var Description = "Rebuild all cached information for when the mesh has changed (center of mass, volume, aabb)."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResourceModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<MultiConvexMesh>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Save"
					var Description = "Save the content item to the given file."
					var ReturnType = "Void"
					var Parameters = "(string filename)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filename"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAndNotifyIfModified"
					var Description = "Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Validate"
					var Description = "Check if the mesh is valid. Optionally throw a script exception if it is invalid."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean throwExceptionIfInvalid)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "throwExceptionIfInvalid"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiConvexMeshCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "This collider is a collection of convex meshes that can form a non-convex mesh. This allows a non-convex object to fall around with a rigid body efficiently."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "MultiConvexMesh"
					var Description = "The MultiConvexMesh resource that defines collision."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Cast"
					var Description = "This is a specialization of Ray vs. HeightMap that goes through the internal mid-phase with an optimized ray-tracing algorithm instead of the generic GetOverlapAabb function. Note: the ray here is expected to be in this cog's local space."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray worldRay, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetColliderLocalCenterOfMass"
					var Description = "Returns the location of the local space center of mass for this collider. For all symmetric colliders this is the origin, but for non-symmetric colliders this can change. This is needed for computing a rigid body's mass and inertia properties."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOverlapRange"
					var Description = "Returns a range of world-space triangles that overlap the passed in local-space aabb."
					var ReturnType = "RangeType"
					var Parameters = "(Aabb worldAabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldAabb"
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMeshModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildModifiedResources"
					var Description = "Check all resources used by this collider to see if they need to be updated. Called by several \"Get\" functions to force up-to-date information."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiConvexMeshIndexData"
			var BaseClass = "BoundMeshData< MultiConvexMesh, uint >"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MultiConvexMeshIndexRange"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiConvexMeshPropertyViewInfo"
			var BaseClass = "EventObject"
			var Library = "EditorLibrary"
			var Description = "Structure bound to the property view for the main editor. Contains the different settings that the user can modify."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoComputeMethod"
					var Type = "MultiConvexMeshAutoComputeMethod"
					var Description = ""
				}
				Property
				{
					var Name = "AutoComputeMode"
					var Type = "MultiConvexMeshAutoComputeMode"
					var Description = ""
				}
				Property
				{
					var Name = "ClearColor"
					var Type = "Real4"
					var Description = "The clear color of the viewport used to render."
				}
				Property
				{
					var Name = "DrawMode"
					var Type = "MultiConvexMeshDrawMode"
					var Description = ""
				}
				Property
				{
					var Name = "MeshThickness"
					var Type = "Real"
					var Description = "Since the mesh is on a 2d plane, they need some thickness for their z-depth. This controls how thick the meshes are."
				}
				Property
				{
					var Name = "OuterContourColor"
					var Type = "Real4"
					var Description = "The color to draw edges with."
				}
				Property
				{
					var Name = "SimplificationThreshold"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = "The sprite source used as a reference for drawing the mesh. Note: this is not always what's visible as the user can drag in archetypes to view as well."
				}
				Property
				{
					var Name = "SurfaceLevelThreshold"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AutoCompute"
					var Description = "Resets the points of the mesh to an approximation for the current sprite."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiConvexMeshSubMeshData"
			var BaseClass = "BoundMeshData< MultiConvexMesh, SubConvexMesh * >"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MultiConvexMeshSubMeshRange"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = "Create and add a new SubConvexMesh . Returns the new mesh for modification."
					var ReturnType = "SubConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "RangeType"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears all sub-meshes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = "Remove the sub-mesh at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer arrayIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "arrayIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiConvexMeshVertexData"
			var BaseClass = "BoundMeshData< MultiConvexMesh, Vec3 >"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MultiConvexMeshVertexRange"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "MultiPrimitive"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetChannel"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Channel Manages the replication of a set of properties on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Authority"
					var Type = "Authority"
					var Description = "Controls which peer has the authority to observe and replicate property changes (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client."
				}
				Property
				{
					var Name = "ChangeFlag"
					var Type = "Boolean"
					var Description = "Manual change flag (checked upon manual change observation)"
				}
				Property
				{
					var Name = "IsNapping"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsScheduled"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "LastChangeTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net channel was last changed, else 0."
				}
				Property
				{
					var Name = "LastChangeTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net channel was last changed, else 0."
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Net channel name."
				}
				Property
				{
					var Name = "NetChannelType"
					var Type = "NetChannelType"
					var Description = "Operating net channel type."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddBasicNetProperty"
					var Description = ""
					var ReturnType = "NetProperty"
					var Parameters = "(const string netPropertyName, T propertyData, NetPropertyConfig netPropertyConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPropertyName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyData"
							var Type = "T"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddBasicNetProperty"
					var Description = ""
					var ReturnType = "NetProperty"
					var Parameters = "(const string netPropertyName, const Any propertyData, SerializeValueFn serializeValueFn, GetValueFn getValueFn, SetValueFn setValueFn, NetPropertyConfig netPropertyConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPropertyName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyData"
							var Type = "const Any"
							var Description = ""
						}
						Parameter
						{
							var Name = "serializeValueFn"
							var Type = "SerializeValueFn"
							var Description = ""
						}
						Parameter
						{
							var Name = "getValueFn"
							var Type = "GetValueFn"
							var Description = ""
						}
						Parameter
						{
							var Name = "setValueFn"
							var Type = "SetValueFn"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNetProperty"
					var Description = "[Client/Server] Adds the net property (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns the net property if successful, else nullptr (a net property of that name already exists)"
					var ReturnType = "NetProperty"
					var Parameters = "(Component component, Property property, const string netPropertyTypeName, NetPropertyConfig netPropertyConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "property"
							var Type = "Property"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyTypeName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearNetProperties"
					var Description = "[Client/Server] Removes all net properties (Cannot be modified after net object component initialization) (Must not differ between client/server peers!)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCombinedNetPropertyName"
					var Description = "Returns the combined net property name (\"ComponentName_PropertyName\"), else String()"
					var ReturnType = "string"
					var Parameters = "(Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObject"
					var Description = "Operating net object."
					var ReturnType = "NetObject"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetPeer"
					var Description = "Operating net peer."
					var ReturnType = "NetPeer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetProperty"
					var Description = "[Client/Server] Returns the specified net property, else nullptr"
					var ReturnType = "NetProperty"
					var Parameters = "(Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasNetProperty"
					var Description = "[Client/Server] Returns true if the net object has the specified net property, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNapping"
					var Description = "Returns true if the net channel is currently napping (performing change detection on longer intervals), else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsScheduled"
					var Description = "Returns true if this net channel is scheduled for change observation, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveNetProperty"
					var Description = "[Client/Server] Removes the specified net property (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net property of that name could not be found)"
					var ReturnType = "Boolean"
					var Parameters = "(Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReplicateNow"
					var Description = "Replicates net property changes immediately (only if changes are detected) Will also update nap state as configured Returns true if changes were replicated, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TakeNap"
					var Description = "Forces the net channel to start napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WakeUp"
					var Description = "Forces the net channel to stop napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetChannelConfig"
			var BaseClass = "DataResource"
			var Library = "NetworkingLibrary"
			var Description = "Network Channel Configuration Defines a configuration for the replication of a set of properties on the network."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcceptIncomingChanges"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AccurateTimestampOnChange"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AllowNapping"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AllowRelay"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AuthorityDefault"
					var Type = "Authority"
					var Description = ""
				}
				Property
				{
					var Name = "AuthorityMode"
					var Type = "AuthorityMode"
					var Description = ""
				}
				Property
				{
					var Name = "AwakeDetectionInterval"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "AwakeDuration"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "DetectOutgoingChanges"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "DetectionMode"
					var Type = "DetectionMode"
					var Description = ""
				}
				Property
				{
					var Name = "EventOnIncomingPropertyChange"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "EventOnOutgoingPropertyChange"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "NapDetectionInterval"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "ReliabilityMode"
					var Type = "ReliabilityMode"
					var Description = ""
				}
				Property
				{
					var Name = "ReplicateOnOffline"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ReplicateOnOnline"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "SerializationMode"
					var Type = "SerializationMode"
					var Description = ""
				}
				Property
				{
					var Name = "TransferMode"
					var Type = "TransferMode"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetName"
					var Description = "Net channel configuration name."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes the net channel configuration resource."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetChannelPropertyChange"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after an outgoing/incoming net channel property change is detected during a particular replication phase."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ChannelName"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "ComponentName"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Direction"
					var Type = "TransmissionDirection"
					var Description = ""
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "PropertyName"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "ReplicationPhase"
					var Type = "ReplicationPhase"
					var Description = ""
				}
				Property
				{
					var Name = "Timestamp"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetChannelType"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Channel Type Configures the replication of a set of properties on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcceptIncomingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should accept incoming changes."
				}
				Property
				{
					var Name = "AccurateTimestampOnChange"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting)"
				}
				Property
				{
					var Name = "AllowNapping"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while."
				}
				Property
				{
					var Name = "AllowRelay"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow )"
				}
				Property
				{
					var Name = "AuthorityDefault"
					var Type = "Authority"
					var Description = "Controls which peer has the authority to observe and replicate property changes on each net channel by default (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client."
				}
				Property
				{
					var Name = "AuthorityMode"
					var Type = "AuthorityMode"
					var Description = "Controls when net channels can modify their change authority (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) (Cannot be modified at game runtime)"
				}
				Property
				{
					var Name = "AwakeDetectionInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which awake net channels are observed for changes (Cannot be modified at game runtime)"
				}
				Property
				{
					var Name = "AwakeDuration"
					var Type = "Integer"
					var Description = "Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake."
				}
				Property
				{
					var Name = "DetectOutgoingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should detect outgoing changes."
				}
				Property
				{
					var Name = "DetectionMode"
					var Type = "DetectionMode"
					var Description = "Controls how net channel changes are detected (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons)"
				}
				Property
				{
					var Name = "EventOnIncomingPropertyChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted."
				}
				Property
				{
					var Name = "EventOnOutgoingPropertyChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected."
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Net channel type name."
				}
				Property
				{
					var Name = "NapDetectionInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which napping net channels are observed for changes (Cannot be modified at game runtime)"
				}
				Property
				{
					var Name = "ReliabilityMode"
					var Type = "ReliabilityMode"
					var Description = "Controls whether or not net channel changes will be retransmitted should they get lost over the network (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted)"
				}
				Property
				{
					var Name = "ReplicateOnOffline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will be replicated when the net object goes offline If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event (Cannot be modified at game runtime)"
				}
				Property
				{
					var Name = "ReplicateOnOnline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will be replicated when the net object comes online If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event (Cannot be modified at game runtime)"
				}
				Property
				{
					var Name = "SerializationMode"
					var Type = "SerializationMode"
					var Description = "Controls how net channels are serialized (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) (Cannot be modified at game runtime)"
				}
				Property
				{
					var Name = "TransferMode"
					var Type = "TransferMode"
					var Description = "Controls how net channel changes are to be ordered and released once received (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) (Cannot be modified at game runtime)"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetReplicateOnChange"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetConfig"
					var Description = "Resets all configuration settings."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetConfig"
					var Description = "Sets all configuration settings according to the specified NetChannelConfig resource."
					var ReturnType = "Void"
					var Parameters = "(NetChannelConfig netChannelConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelConfig"
							var Type = "NetChannelConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetReplicateOnChange"
					var Description = "Controls whether or not the net channel will be replicated on net property change (Cannot be modified at game runtime)"
					var ReturnType = "Void"
					var Parameters = "(Boolean replicateOnChange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicateOnChange"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetEventReceived"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched before a received net event is dispatched."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Destination"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "NetEvent"
					var Type = "Event"
					var Description = ""
				}
				Property
				{
					var Name = "ReturnAllow"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetEventSent"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after a dispatched net event is sent."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Destination"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "NetEvent"
					var Type = "Event"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetGameStarted"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after fully joining or hosting a network game."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetHost"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Describes a network host."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BasicHostInfo"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "ExtraHostInfo"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "IpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "Latency"
					var Type = "Integer"
					var Description = "Returns the estimated latency ((RTT/2)) in milliseconds from our peer to this host."
				}
				Property
				{
					var Name = "Network"
					var Type = "Network"
					var Description = ""
				}
				Property
				{
					var Name = "RoundTripTime"
					var Type = "Integer"
					var Description = "Returns the round-trip time (RTT) in milliseconds from our peer to this host."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetHost rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetHost"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetHost rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetHost"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares IP addresses)"
					var ReturnType = "Boolean"
					var Parameters = "(const NetHost rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetHost"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares IP addresses)"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetHostListUpdate"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when a host discovery operation update occurs."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Network"
					var Type = "Network"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetHostRecord"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "NetHostRecord A record that contains the basic information of a game server. After a certain lifetime records expire on the master server."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BasicHostInfo"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "IpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "Lifetime"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetHostRecord rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetHostRecord"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetHostRecord rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetHostRecord"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares IP addresses)"
					var ReturnType = "Boolean"
					var Parameters = "(const NetHostRecord rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetHostRecord"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares IP addresses)"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetHostRecordEvent"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when a NetHostRecord is discovered, Updated, or Expired."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "HostRecord"
					var Type = "NetHostRecord"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetHostUpdate"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when a host discovery operation update occurs."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Host"
					var Type = "NetHost"
					var Description = ""
				}
				Property
				{
					var Name = "Network"
					var Type = "Network"
					var Description = ""
				}
				Property
				{
					var Name = "RefreshResult"
					var Type = "NetRefreshResult"
					var Description = ""
				}
				Property
				{
					var Name = "ResponseTime"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetLevelStarted"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after fully loading and synchronizing a level in a net space."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = ""
				}
				Property
				{
					var Name = "LevelName"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetLinkConnected"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending or receiving a connect confirmation."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "TransmissionDirection"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetLinkDisconnected"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending or receiving a disconnect notice Their net peer ID is released and link is destroyed immediately after this."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "TransmissionDirection"
					var Description = ""
				}
				Property
				{
					var Name = "DisconnectReason"
					var Type = "DisconnectReason"
					var Description = ""
				}
				Property
				{
					var Name = "RequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetObject"
			var BaseClass = "Component"
			var Library = "NetworkingLibrary"
			var Description = "Network Object Manages the replication of a single object on the network."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcceptIncomingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels on this net object may accept incoming changes."
				}
				Property
				{
					var Name = "AccurateTimestampOnChange"
					var Type = "Boolean"
					var Description = "Controls whether or not the net object will serialize an accurate timestamp value when changed (on any net channel), or will instead accept an estimated timestamp value (Enabling this will override the corresponding net channel type setting for all net channels added to this net object)"
				}
				Property
				{
					var Name = "AccurateTimestampOnOffline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net object will serialize an accurate timestamp value when taken offline, or will instead accept an estimated timestamp value."
				}
				Property
				{
					var Name = "AccurateTimestampOnOnline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net object will serialize an accurate timestamp value when brought online, or will instead accept an estimated timestamp value."
				}
				Property
				{
					var Name = "AllowNapping"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels on this net object may nap (perform change detection on longer intervals) if they haven't changed in a while."
				}
				Property
				{
					var Name = "AutomaticChannel"
					var Type = "NetChannelConfig"
					var Description = "Returns the automatic net channel configuration resource (assigned to net properties unless another channel is specified)"
				}
				Property
				{
					var Name = "DetectOutgoingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels on this net object may detect outgoing changes."
				}
				Property
				{
					var Name = "IsClient"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsClientAndMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsClientButNotMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsClientOrOffline"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsClientOrServer"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNapping"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotOwnedByAUser"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsOffline"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsOfflineAndMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsOfflineButNotMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsOnline"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsOwnedByAUser"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsServer"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsServerAndMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsServerButNotMine"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsServerOrOffline"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "LastChangeTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net object was last changed, else 0."
				}
				Property
				{
					var Name = "LastChangeTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net object was last changed, else 0."
				}
				Property
				{
					var Name = "NetObjectId"
					var Type = "Integer"
					var Description = "Returns the net object ID (set if the net object is live), else 0."
				}
				Property
				{
					var Name = "NetPropertyInfos"
					var Type = "NetPropertyInfos"
					var Description = ""
				}
				Property
				{
					var Name = "NetUserOwner"
					var Type = "Cog"
					var Description = "Returns the network user this object conceptually belongs to, else nullptr."
				}
				Property
				{
					var Name = "NetUserOwnerPeerId"
					var Type = "Integer"
					var Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0."
				}
				Property
				{
					var Name = "NetUserOwnerUserId"
					var Type = "Integer"
					var Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0."
				}
				Property
				{
					var Name = "OfflineTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net object was taken offline, else 0."
				}
				Property
				{
					var Name = "OfflineTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net object was taken offline, else 0."
				}
				Property
				{
					var Name = "OnlineTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net object was brought online, else 0."
				}
				Property
				{
					var Name = "OnlineTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net object was brought online, else 0."
				}
				Property
				{
					var Name = "Role"
					var Type = "NetRole"
					var Description = "Returns our open peer's network role (client, server, offline), else Role::Unspecified."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddConfiguredNetProperties"
					var Description = "Adds configured (property grid) component net properties to this net object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddCppNetProperties"
					var Description = "Adds C++ component net properties to this net object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddDownFamilyTree"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObject ancestor)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ancestor"
							var Type = "NetObject"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNetChannel"
					var Description = "[Client/Server] Adds the net channel (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns the net channel if successful, else nullptr (a net channel of that name already exists)"
					var ReturnType = "NetChannel"
					var Parameters = "(const string netChannelName, NetChannelConfig netChannelConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "netChannelConfig"
							var Type = "NetChannelConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNetChannelAuthorityNetProperties"
					var Description = "Adds net channel authority net properties to this net object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNetPropertyInfo"
					var Description = "Adds a net property info Must specify a supported property by name defined in the given component Returns the added net property info, else nullptr."
					var ReturnType = "NetPropertyInfo"
					var Parameters = "(BoundType componentType, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNetPropertyToChannel"
					var Description = "[Client/Server] Adds the net property to the specified net channel (will be added if it does not already exist) (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net property of that name already exists on the specified net channel)"
					var ReturnType = "Boolean"
					var Parameters = "(Component component, Property property, NetPropertyConfig netPropertyConfig, NetChannelConfig netChannelConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "property"
							var Type = "Property"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
						Parameter
						{
							var Name = "netChannelConfig"
							var Type = "NetChannelConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNetPropertyToChannel"
					var Description = "[Client/Server] Adds the net property to the specified net channel (will be added if it does not already exist) (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net property of that name already exists on the specified net channel)"
					var ReturnType = "Boolean"
					var Parameters = "(Component component, Property property, const string netPropertyTypeName, NetPropertyConfig netPropertyConfig, const string netChannelName, NetChannelConfig netChannelConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "property"
							var Type = "Property"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyTypeName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
						Parameter
						{
							var Name = "netChannelName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "netChannelConfig"
							var Type = "NetChannelConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddScriptNetProperties"
					var Description = "Adds script component net properties to this net object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BringNetObjectOnline"
					var Description = "Brings the net object online (may be frame-delayed depending on role) Appropriately calls Emplace/Spawn/Emplace-Clone and HandleNetObjectOnline depending on role."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearNetChannels"
					var Description = "[Client/Server] Removes all net channels (Cannot be modified after net object component initialization) (Must not differ between client/server peers!)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchBroadcast"
					var Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchLocal"
					var Description = "Dispatches the net event on the net object for the local peer."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchLocalAndBroadcast"
					var Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchLocalAndRemote"
					var Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, Event event, NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchRemote"
					var Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, Event event, NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DoesThisNetPropertyAlreadyBelongToAChannel"
					var Description = "[Client/Server] Returns true if the specified net property already belongs to a net channel, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Component component, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Forget"
					var Description = "[Client] Forgets the online net object locally [Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFamilyTreeId"
					var Description = "(Only applies to non-emplaced net objects) [Client/Server] Returns the family tree ID this net object belongs to (either as an ancestor or descendant), else 0"
					var ReturnType = "FamilyTreeId"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetInitializationLevelResourceIdName"
					var Description = "Returns the initialization level resource ID name (if created as part of a level initialization), else String()"
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetChannel"
					var Description = "[Client/Server] Returns the specified net channel, else nullptr"
					var ReturnType = "NetChannel"
					var Parameters = "(const string netChannelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelName"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOfflineEventId"
					var Description = ""
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOnlineEventId"
					var Description = ""
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetPeer"
					var Description = "Returns the operating net peer (which may or may not be this net object)"
					var ReturnType = "NetPeer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetPropertyInfo"
					var Description = "Returns the net property info if it has been added, else nullptr."
					var ReturnType = "NetPropertyInfo"
					var Parameters = "(BoundType componentType, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetSpace"
					var Description = "Returns the operating net space (which may or may not be this net object)"
					var ReturnType = "NetSpace"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOffline"
					var Description = "Handles behavior when the net object is taken offline, dispatches events accordingly."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOfflinePostDispatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObjectOffline event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetObjectOffline"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOnline"
					var Description = "Handles behavior when the net object is brought online, dispatches events accordingly."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOnlinePreDispatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObjectOnline event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetObjectOnline"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetUserOwnerChanged"
					var Description = "Handles a change in network ownership, dispatches events accordingly."
					var ReturnType = "Void"
					var Parameters = "(NetUserId previousNetUserOwnerUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "previousNetUserOwnerUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasNetChannel"
					var Description = "[Client/Server] Returns true if the net object has the specified net channel, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const string netChannelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelName"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasNetPropertyInfo"
					var Description = "Returns true if the specified net property info has been added, else false."
					var ReturnType = "Boolean"
					var Parameters = "(BoundType componentType, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InitializeCreateContext"
					var Description = "Sets the create context (space net object ID)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InitializeFamilyTree"
					var Description = "[Client/Server] Creates the complete family tree representing this net object as the ancestor and all of it's net object children recursively as descendants"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InitializeIsAncestor"
					var Description = "Sets the is-ancestor flag (only applies to non-emplaced net objects)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InitializeReplicaType"
					var Description = "Sets the replica type (archetype resource ID)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsAncestor"
					var Description = "(Only applies to non-emplaced net objects) Returns true if the net object is an ancestor (original network object archetype hierarchy root), else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsClient"
					var Description = "Returns true if our open peer's network role is client, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsClientAndMine"
					var Description = "Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsClientButNotMine"
					var Description = "Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsClientOrOffline"
					var Description = "Returns true if our open peer's network role is client or offline, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsClientOrServer"
					var Description = "Returns true if our open peer's network role is client or server, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsDescendant"
					var Description = "(Only applies to non-emplaced net objects) Returns true if the net object is a descendant (original network object archetype hierarchy child), else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsInvalid"
					var Description = "Returns true if the net object is invalid, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsLive"
					var Description = "Returns true if the net object is live, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsMine"
					var Description = "Returns true if the net object is conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNapping"
					var Description = "Returns true if all net channels on this net object are napping (performing change detection on longer intervals), else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNetPeer"
					var Description = "Returns true if the net object is a net peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNetSpace"
					var Description = "Returns true if the net object is a net space, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNetUser"
					var Description = "Returns true if the net object is a net user, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNotMine"
					var Description = "Returns true if the net object is not conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsNotOwnedByAUser"
					var Description = "Returns true if the net object is not conceptually owned by a user, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOffline"
					var Description = "Returns true if our open peer's network role is offline, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOfflineAndMine"
					var Description = "Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOfflineButNotMine"
					var Description = "Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOnline"
					var Description = "Returns true if the net object is online, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOwnedByAUser"
					var Description = "Returns true if the net object is conceptually owned by a user, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOwnedByPeer"
					var Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOwnedByUser"
					var Description = "Returns true if the net object is conceptually owned by the specified user, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOwnedByUserId"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(NetUserId netUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsServer"
					var Description = "Returns true if our open peer's network role is server, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsServerAndMine"
					var Description = "Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsServerButNotMine"
					var Description = "Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsServerOrOffline"
					var Description = "Returns true if our open peer's network role is server or offline, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = "Returns true if the net object is valid, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAttached"
					var Description = "Called when attached to another object."
					var ReturnType = "Void"
					var Parameters = "(HierarchyEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "HierarchyEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = "Uninitializes the component."
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDetached"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HierarchyEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "HierarchyEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnRegisterCppNetProperties"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RegisterCppNetProperties event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "RegisterCppNetProperties"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadChannelData"
					var Description = "Reads channel data (such as forward and reverse ReplicaChannels) from the replica stream."
					var ReturnType = "Void"
					var Parameters = "(const ReplicaStream replicaStream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicaStream"
							var Type = "const ReplicaStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadIdentificationInfo"
					var Description = "Reads identification information (such as IsAbsent, ReplicaId, IsCloned, IsEmplaced, EmplaceContext, and EmplaceId) from the replica stream."
					var ReturnType = "Void"
					var Parameters = "(const ReplicaStream replicaStream, Boolean isAbsent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicaStream"
							var Type = "const ReplicaStream"
							var Description = ""
						}
						Parameter
						{
							var Name = "isAbsent"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveNetChannel"
					var Description = "[Client/Server] Removes the specified net channel (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net channel of that name could not be found)"
					var ReturnType = "Boolean"
					var Parameters = "(const string netChannelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelName"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveNetPropertyInfo"
					var Description = "Removes a net property info if it was added."
					var ReturnType = "Void"
					var Parameters = "(BoundType componentType, StringParam propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReplicateNow"
					var Description = "[Client/Server] Replicates all net channels' property changes immediately (only where changes are detected) Will also update nap state as configured Returns true if changes were replicated, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetConfig"
					var Description = "Resets all configuration settings."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SelectRemote"
					var Description = "[Client/Server] Selects the remote net object on the first opposite-role peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Initializes the component."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetFamilyTreeId"
					var Description = "(Only applies to non-emplaced net objects) [Client/Server] Sets the family tree ID this net object belongs to (either as an ancestor or descendant)"
					var ReturnType = "Void"
					var Parameters = "(FamilyTreeId familyTreeId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "familyTreeId"
							var Type = "FamilyTreeId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetInitializationLevelResourceIdName"
					var Description = "Sets the initialization level resource ID name."
					var ReturnType = "Void"
					var Parameters = "(const string initLevelResourceIdName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initLevelResourceIdName"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetNetUserOwnerDown"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetNetUserOwnerDownById"
					var Description = "[Server/Offline] Sets the owning network user on this object and down the tree on all children recursively (pre-order traversal)"
					var ReturnType = "Void"
					var Parameters = "(NetUserId netUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetNetUserOwnerUp"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetNetUserOwnerUpById"
					var Description = "[Server/Offline] Sets the owning network user on this object and up the tree on each parent recursively (pre-order traversal)"
					var ReturnType = "Void"
					var Parameters = "(NetUserId netUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TakeNap"
					var Description = "Forces all net channels on this net object to start napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TakeNetObjectOffline"
					var Description = "Takes the net object offline (but is not responsible for destroying the cog itself locally) Appropriately calls Forget/Destroy and HandleNetObjectOffline depending on role."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WakeUp"
					var Description = "Forces all net channels on this net object to stop napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WasCogInitialized"
					var Description = "Returns true if the net object was created as part of a cog initialization (not a level initialization), else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WasLevelInitialized"
					var Description = "Returns true if the net object was created as part of a level initialization, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetObjectOffline"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched before the net object is taken offline."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = ""
				}
				Property
				{
					var Name = "IsEndOfLifespan"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetObjectOnline"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net object is brought online."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = ""
				}
				Property
				{
					var Name = "IsStartOfLifespan"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeer"
			var BaseClass = "NetObject"
			var Library = "NetworkingLibrary"
			var Description = "Network Peer Acts as a host on the network Manages network object state and event replication."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BasicHostInfoTimeout"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "ExtraHostInfoTimeout"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "FrameFillSkip"
					var Type = "Real"
					var Description = "Controls when to skip change replication for the current frame because of remaining outgoing bandwidth utilization ratio on any given link."
				}
				Property
				{
					var Name = "FrameFillWarning"
					var Type = "Real"
					var Description = "Controls when the user will be warned of their current frame's outgoing bandwidth utilization ratio on any given link."
				}
				Property
				{
					var Name = "HostPingInterval"
					var Type = "Real"
					var Description = "Controls how often the peer sends a host ping message when discovering or refreshing hosts via ping messages."
				}
				Property
				{
					var Name = "HostPortRangeEnd"
					var Type = "Integer"
					var Description = "Configures the inclusive range of ports used to host this game (Must be a valid port value within the range [0, 65535])"
				}
				Property
				{
					var Name = "HostPortRangeStart"
					var Type = "Integer"
					var Description = "Configures the inclusive range of ports used to host this game (Must be a valid port value within the range [0, 65535])"
				}
				Property
				{
					var Name = "InternetDiscoverable"
					var Type = "Boolean"
					var Description = "Configures the server peer to be discoverable on the internet (Requires master server subscriptions)"
				}
				Property
				{
					var Name = "InternetHostListTimeout"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "InternetHostPublishInterval"
					var Type = "Real"
					var Description = "Controls how often the internet discoverable peer sends a host record message to its master server subscriptions (Requires master server subscriptions)"
				}
				Property
				{
					var Name = "InternetHostRecordLifetime"
					var Type = "Real"
					var Description = "Controls the lifetime of every host record stored on the master server."
				}
				Property
				{
					var Name = "InternetSameIpHostRecordLimit"
					var Type = "Integer"
					var Description = "Controls how many host records from the same IP address may be stored on the master server (used to prevent flood attacks)"
				}
				Property
				{
					var Name = "Ipv4Address"
					var Type = "IpAddress"
					var Description = "Returns the peer's local IPv4 address, else IpAddress() Set if the peer is open with an IPv4 socket."
				}
				Property
				{
					var Name = "Ipv4Host"
					var Type = "string"
					var Description = "Returns the peer's local IPv4 address host as a numeric address string, else String()"
				}
				Property
				{
					var Name = "Ipv4Port"
					var Type = "Integer"
					var Description = "Returns the peer's local IPv4 address port, else String()"
				}
				Property
				{
					var Name = "Ipv6Address"
					var Type = "IpAddress"
					var Description = "Returns the peer's local IPv6 address, else IpAddress() Set if the peer is open with an IPv6 socket."
				}
				Property
				{
					var Name = "Ipv6Host"
					var Type = "string"
					var Description = "Returns the peer's local IPv6 address host as a numeric address string, else String()"
				}
				Property
				{
					var Name = "Ipv6Port"
					var Type = "Integer"
					var Description = "Returns the peer's local IPv6 address port, else String()"
				}
				Property
				{
					var Name = "IsOpen"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "LanDiscoverable"
					var Type = "Boolean"
					var Description = "Configures the server peer to be discoverable on the local area network."
				}
				Property
				{
					var Name = "LinkCount"
					var Type = "Integer"
					var Description = "[Client/Server] Returns the number of connected network links managed by this peer"
				}
				Property
				{
					var Name = "NetObjectCount"
					var Type = "Integer"
					var Description = "Returns the number of net objects in this game session (but not including the net peer itself)"
				}
				Property
				{
					var Name = "NetPeerId"
					var Type = "Integer"
					var Description = "Returns the open peer's unique network identifier, else 0 [Server/Offline] This will always be zero [Client] This will be non-zero once connected to a server, else zero."
				}
				Property
				{
					var Name = "NetSpaceCount"
					var Type = "Integer"
					var Description = "Returns the number of net spaces in this game session."
				}
				Property
				{
					var Name = "NetUserCount"
					var Type = "Integer"
					var Description = "Returns the number of net users in this game session."
				}
				Property
				{
					var Name = "UserCount"
					var Type = "Integer"
					var Description = "Returns the number of added network users."
				}
				Property
				{
					var Name = "Users"
					var Type = "NetUserRange"
					var Description = "Returns all added network users."
				}
				Property
				{
					var Name = "UsersAddedByMyPeer"
					var Type = "NetUserRange"
					var Description = "Returns the network users added by our local peer."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddNetObjectToFamilyTree"
					var Description = "[Client/Server] Adds a non-emplaced net object (ancestor or descendant) to it's appropriate family tree, creating the tree if doesn't exist These MUST be added in depth-first pre-order traversal order! Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetObject ancestor, NetObject netObject)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ancestor"
							var Type = "NetObject"
							var Description = ""
						}
						Parameter
						{
							var Name = "netObject"
							var Type = "NetObject"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddOrFindHost"
					var Description = "Adds or finds a host in the given network's host list."
					var ReturnType = "NetHost"
					var Parameters = "(Network network, const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddUser"
					var Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddUser"
					var Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddUser"
					var Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false."
					var ReturnType = "Boolean"
					var Parameters = "(EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddUserInternal"
					var Description = "Adds the net user to internal lists and allows net object ownership."
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddingLink"
					var Description = "Called before a link is added."
					var ReturnType = "Void"
					var Parameters = "(PeerLink link)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "PeerLink"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AssignNetUserId"
					var Description = "[Server/Offline] Assigns a network user ID to the specified network user Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetUser user)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "user"
							var Type = "NetUser"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CancelHostRequests"
					var Description = "Cancels all host discovery and refresh requests currently in progress (the operations will be considered unsuccessful) Listen to the NetHost event interface to handle the results."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClaimActiveReplicaStream"
					var Description = "[Client] Claims the active replica stream belongs to the specified cog initializer Intended to be called redundantly by objects in the hierarchy to either make initial claim or confirm claim Returns true if successful, else false (could be another initializer has claim or there is currently no active replica stream)"
					var ReturnType = "Boolean"
					var Parameters = "(const CogInitializer cogInitializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cogInitializer"
							var Type = "const CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearHostList"
					var Description = "Clears the given network's host list."
					var ReturnType = "Void"
					var Parameters = "(Network network)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearHostLists"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClientOnConnectConfirmation"
					var Description = "[Client] Called after sending a connect confirmation"
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, BitStream connectConfirmationData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectConfirmationData"
							var Type = "BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClientOnConnectRequest"
					var Description = "[Client] Called after sending a connect request"
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, ConnectRequestData connectRequestData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectRequestData"
							var Type = "ConnectRequestData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClientOnConnectResponse"
					var Description = "[Client] Called after receiving a connect response If accepted, our replicator ID is set immediately before this and a connect confirmation is sent after this If denied, our replicator ID is cleared and link is destroyed immediately after this"
					var ReturnType = "BitStream"
					var Parameters = "(ReplicatorLink link, ConnectResponseData connectResponseData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectResponseData"
							var Type = "ConnectResponseData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClientOnDisconnectNotice"
					var Description = "[Client] Called after sending or receiving a disconnect notice Our replicator ID is cleared and link is destroyed immediately after this"
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, DisconnectNoticeData disconnectNoticeData, TransmissionDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "disconnectNoticeData"
							var Type = "DisconnectNoticeData"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "TransmissionDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CloneFamilyTree"
					var Description = "[Server] Clones all present, live net objects in the family tree locally and remotely along the route Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(FamilyTreeId familyTreeId, const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "familyTreeId"
							var Type = "FamilyTreeId"
							var Description = ""
						}
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CloneNetGame"
					var Description = "[Server] Clones the entire network game on the specified link Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CloneNetLevel"
					var Description = "[Server] Clones the network space's current level and net objects on the specified link Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Space space, Boolean isLevelTransition, NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "isLevelTransition"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CloneNetLevel"
					var Description = "[Server] Clones the network space's current level and net objects on all links Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Space space, Boolean isLevelTransition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "isLevelTransition"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CloneNetObject"
					var Description = "[Server] Clones the live net object locally and remotely along the route Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Close"
					var Description = "Closes the peer (safe to call multiple times)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ConnectLink"
					var Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ConnectLink"
					var Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ConnectLink"
					var Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateReplicas"
					var Description = "Creates replicas using the replica stream and creation info (create context and replica type) Gaps may be represented as null replicas Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(const CreateContext createContext, const ReplicaType replicaType, const ReplicaStream replicaStream, ReplicaArray replicas)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "createContext"
							var Type = "const CreateContext"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicaType"
							var Type = "const ReplicaType"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicaStream"
							var Type = "const ReplicaStream"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicas"
							var Type = "ReplicaArray"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DeserializeNetEvent"
					var Description = "Deserializes the net event Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(const BitStreamExtended bitStream, Event netEvent, Cog destination, NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bitStream"
							var Type = "const BitStreamExtended"
							var Description = ""
						}
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DeserializeReplicas"
					var Description = "Deserializes replicas from a replica stream Creates or finds replicas as necessary depending on replica info and the replica stream mode Gaps may be represented as null replicas and additional data may be deserialized as needed Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(const ReplicaStream replicaStream, ReplicaArray replicas)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicaStream"
							var Type = "const ReplicaStream"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicas"
							var Type = "ReplicaArray"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DestroyNetObject"
					var Description = "[Server] Destroys the live net object locally and remotely along the route Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectAllLinks"
					var Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected"
					var ReturnType = "Integer"
					var Parameters = "(EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectAllLinks"
					var Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected"
					var ReturnType = "Integer"
					var Parameters = "(Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectAllLinks"
					var Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected"
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DiscoverHostList"
					var Description = "Discovers the given network's host list. Listen to the NetHost event interface to handle the results Returns true if the discovery was successfully started, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Network network, Boolean removeStaleHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "removeStaleHosts"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchBroadcastInternal"
					var Description = "[Client/Server] Dispatches the net event on all remote peers Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(StringParam netEventId, Event netEvent, Cog destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netEventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchLocalInternal"
					var Description = "[Client/Server/Offline] Dispatches the net event on the local peer Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(StringParam netEventId, Event netEvent, Cog destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netEventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchRemoteInternal"
					var Description = "[Client/Server] Dispatches the net event on the remote peer Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(StringParam netEventId, Event netEvent, NetPeerId netPeerId, Cog destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netEventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EmplaceNetObjectByGameSetup"
					var Description = "[Client/Server] Emplaces the invalid net object locally against the game setup Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EmplaceNetObjectBySpaceAndLevel"
					var Description = "[Client/Server] Emplaces the invalid net object locally against the specified net space and level Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, Space space, StringParam levelResourceIdName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "levelResourceIdName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForgetNetObject"
					var Description = "[Client] Forgets the valid net object locally [Server] Forgets the live net object locally and remotely along the route Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetActiveReplicaStream"
					var Description = "[Client] Returns the active replica stream used while creating a net object hierarchy"
					var ReturnType = "const ReplicaStream"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBasicNetHostInfo"
					var Description = "Acquires basic project-specific host information (limited to 480 bytes) as a bitstream."
					var ReturnType = "BitStream"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCreationDuration"
					var Description = "Returns the duration in milliseconds since the creation of this peer."
					var ReturnType = "TimeMs"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetExtraNetHostInfo"
					var Description = "Acquires extra project-specific host information as a bitstream."
					var ReturnType = "BitStream"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFacilitateInternetConnections"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGuid"
					var Description = "Returns the peer's permanent GUID This GUID will never change for the lifetime of this peer."
					var ReturnType = "Guid"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHostByAddress"
					var Description = ""
					var ReturnType = "NetHost"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHostByAddress"
					var Description = ""
					var ReturnType = "NetHost"
					var Parameters = "(Network network, const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHostByIndex"
					var Description = "Returns the first equivalent host found in the given network's host list, else nullptr."
					var ReturnType = "NetHost"
					var Parameters = "(Network network, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetHostList"
					var Description = "Returns the given network's host list."
					var ReturnType = "NetHostRange"
					var Parameters = "(Network network)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLink"
					var Description = "[Client/Server] Returns the connected network link with the specified peer ID, else nullptr"
					var ReturnType = "PeerLink"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLink"
					var Description = "[Client/Server] Returns the connected network link with the specified IP address, else nullptr"
					var ReturnType = "PeerLink"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkCreationDirection"
					var Description = "[Client/Server] Returns the direction in which the link was created (which peer initiated the connection), else TransmissionDirection::Unspecified"
					var ReturnType = "TransmissionDirection"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkCreationDuration"
					var Description = "[Client/Server] Returns the duration that the link has existed, else 0"
					var ReturnType = "TimeMs"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkGuid"
					var Description = "[Client/Server] Returns the remote peer's permanent GUID, else 0 (Available if the link is connected or incoming and attempting connection)"
					var ReturnType = "Guid"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkInternetProtocol"
					var Description = "[Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified This IP address protocol will never change for the lifetime of this link"
					var ReturnType = "InternetProtocol"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkIpAddress"
					var Description = "[Client/Server] Returns the remote peer's IP address (as seen from our perspective), else IpAddress() For outgoing links this is the same IP address specified in our connect call This IP address will never change for the lifetime of this link"
					var ReturnType = "IpAddress"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkNetPeerId"
					var Description = "Returns the remote peer's unique network identifier, else 0 [Server] This will be non-zero if the client is connected, else zero [Client] This will always be zero."
					var ReturnType = "NetPeerId"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkState"
					var Description = "[Client/Server] Returns the link's specific state, else LinkState::Unspecified"
					var ReturnType = "LinkState"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkStateDuration"
					var Description = "[Client/Server] Returns the link's specific state duration, else 0"
					var ReturnType = "TimeMs"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinkStatus"
					var Description = "[Client/Server] Returns the link's overall status, else LinkStatus::Unspecified"
					var ReturnType = "LinkStatus"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinks"
					var Description = "[Client/Server] Returns all connected network links"
					var ReturnType = "PeerLinkSet"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLinks"
					var Description = "[Client/Server] Returns the connected network links in the specified route"
					var ReturnType = "PeerLinkSet"
					var Parameters = "(const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObject"
					var Description = "Returns the live net object specified if it is known locally, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(NetObjectId netObjectId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netObjectId"
							var Type = "NetObjectId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOfflineEventId"
					var Description = "Handles behavior when the net object is taken offline, dispatches events accordingly."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOnlineEventId"
					var Description = "Handles behavior when the net object is brought online, dispatches events accordingly."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetSpace"
					var Description = "Returns the live net space specified if it is known locally, else nullptr."
					var ReturnType = "Space"
					var Parameters = "(NetObjectId netObjectId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netObjectId"
							var Type = "NetObjectId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOrAddReplicaChannelType"
					var Description = "Finds the specified net channel type or adds and configures it if it does not exist Returns the found or added net channel type with the specified name."
					var ReturnType = "NetChannelType"
					var Parameters = "(const string netChannelTypeName, NetChannelConfig netChannelConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelTypeName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "netChannelConfig"
							var Type = "NetChannelConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOrAddReplicaPropertyType"
					var Description = "Finds the specified net property type or adds and configures it if it does not exist Returns the found or added net property type with the specified name."
					var ReturnType = "NetPropertyType"
					var Parameters = "(const string netPropertyTypeName, BoundType boundType, SerializeValueFn serializeValueFn, GetValueFn getValueFn, SetValueFn setValueFn, NetPropertyConfig netPropertyConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPropertyTypeName"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "boundType"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "serializeValueFn"
							var Type = "SerializeValueFn"
							var Description = ""
						}
						Parameter
						{
							var Name = "getValueFn"
							var Type = "GetValueFn"
							var Description = ""
						}
						Parameter
						{
							var Name = "setValueFn"
							var Type = "SetValueFn"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOurIpAddressFromLink"
					var Description = "[Client/Server] Returns our peer's IP address (as seen from their perspective), else IpAddress() For incoming links this is the same IP address specified in their connect call (Available if the link is connected or incoming and attempting connection) It is absolutely possible that this does not match our local IP address"
					var ReturnType = "IpAddress"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOurProjectGuid"
					var Description = "Returns our project's GUID."
					var ReturnType = "Guid"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetProjectRecordsMap"
					var Description = "Gets a reference to the Project's HostRecord Map. If it doesn't exist, it creates it."
					var ReturnType = "HostRecordsMap"
					var Parameters = "(Guidconst  projectGuid)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "projectGuid"
							var Type = "Guidconst "
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRole"
					var Description = "Returns the open peer's network role (client, server, offline), else Role::Unspecified."
					var ReturnType = "Role"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetUser"
					var Description = "Returns the specified network user, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(NetUserId netUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetUsersAddedByPeer"
					var Description = "Returns the network users added by the specified peer."
					var ReturnType = "NetUserRange"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetEventReceived"
					var Description = "Handles behavior when a received net event is dispatched."
					var ReturnType = "Void"
					var Parameters = "(Event netEvent, Cog destination, NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetEventSent"
					var Description = "Handles behavior when a dispatched net event is sent."
					var ReturnType = "Void"
					var Parameters = "(Event netEvent, Cog destination, NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetGameStarted"
					var Description = "Handles behavior when a network game is started."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetLevelStarted"
					var Description = "Handles behavior when a network level is started."
					var ReturnType = "Void"
					var Parameters = "(Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetLinkConnected"
					var Description = "Handles behavior when a net link is connected."
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, BitStream connectConfirmationData, TransmissionDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectConfirmationData"
							var Type = "BitStream"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "TransmissionDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetLinkDisconnected"
					var Description = "Handles behavior when a net link is disconnected."
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, DisconnectNoticeData disconnectNoticeData, TransmissionDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "disconnectNoticeData"
							var Type = "DisconnectNoticeData"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "TransmissionDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetPeerClosed"
					var Description = "Handles behavior before the peer is closed Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetPeerOpened"
					var Description = "Handles behavior after the peer is opened Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandlePendingRequests"
					var Description = "Handles pending net requests now."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandlePing"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(IpAddressconst  theirIpAddress, NetHostPingData netHostPingData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "IpAddressconst "
							var Description = ""
						}
						Parameter
						{
							var Name = "netHostPingData"
							var Type = "NetHostPingData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleReceivedUserAddRequest"
					var Description = "[Server/Offline] Handles behavior after receiving a network user add request Returns true to accept the request, else false to deny the request"
					var ReturnType = "NetUser"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle theirRequestBundle, EventBundle returnOurResponseBundle, NetUserId theirNetUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "returnOurResponseBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirNetUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleReceivedUserAddResponse"
					var Description = "Handles behavior after receiving a network user add response."
					var ReturnType = "Void"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle ourRequestBundle, NetUserAddResponse theirAddResponse, EventBundle theirResponseBundle, NetUserId ourNetUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirAddResponse"
							var Type = "NetUserAddResponse"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirResponseBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourNetUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleSentUserAddRequest"
					var Description = "Handles behavior after sending a network user add request."
					var ReturnType = "Void"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle ourRequestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleSentUserAddResponse"
					var Description = "[Server/Offline] Handles behavior after sending a network user add response"
					var ReturnType = "Void"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle theirRequestBundle, NetUserAddResponse ourAddResponse, EventBundle ourResponseBundle, NetUser theirNetUser)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourAddResponse"
							var Type = "NetUserAddResponse"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourResponseBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirNetUser"
							var Type = "NetUser"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasLink"
					var Description = "[Client/Server] Returns true if there is a connected network link with the specified IP address, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasLink"
					var Description = "[Client/Server] Returns true if there is a connected network link with the specified peer ID, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasLinks"
					var Description = "[Client/Server] Returns true if there are connected network links in the specified route, else false"
					var ReturnType = "Boolean"
					var Parameters = "(const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasLinks"
					var Description = "[Client/Server] Returns true if there are connected network links, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsOpen"
					var Description = "Returns true if the peer is open, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsReceivingNetGame"
					var Description = "[Client] Is currently receiving the entire network game"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsSubscribedMasterServer"
					var Description = "Checks to see if the IP address is one of the clients subscribed master servers."
					var ReturnType = "Boolean"
					var Parameters = "(IpAddressconst  ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddressconst "
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MasterServerRecievePublish"
					var Description = "When a master receives a publishing from a server, it becomes stored."
					var ReturnType = "Void"
					var Parameters = "(const IpAddress theirIpAddress, EventBundle basicHostInfo, Guidconst  thierProjectGuid)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "basicHostInfo"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "thierProjectGuid"
							var Type = "Guidconst "
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = "Uninitializes the component (closes the peer if still open)"
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnEngineUpdate"
					var Description = "Called on engine update (updates the peer)"
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnInvalidReplica"
					var Description = "Called before a replica is made invalid (unregistered with the replicator)"
					var ReturnType = "Void"
					var Parameters = "(Replica replica, Boolean isForget)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replica"
							var Type = "Replica"
							var Description = ""
						}
						Parameter
						{
							var Name = "isForget"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnLiveReplica"
					var Description = "Called after a replica is made live (assigned a replica ID by the server replicator)"
					var ReturnType = "Void"
					var Parameters = "(Replica replica)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replica"
							var Type = "Replica"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnNetLinkConnected"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetLinkConnected event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetLinkConnected"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnNetLinkDisconnected"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetLinkDisconnected event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetLinkDisconnected"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnNetPeerReceivedConnectResponse"
					var Description = "The client looks for link connect responses and handles them accordingly."
					var ReturnType = "Void"
					var Parameters = "(NetPeerReceivedConnectResponse event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetPeerReceivedConnectResponse"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnNetPeerSentConnectRequest"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetPeerSentConnectRequest event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetPeerSentConnectRequest"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnNetPeerSentConnectResponse"
					var Description = "When a master server receives a connection, it creates a message and sends it across the link."
					var ReturnType = "Void"
					var Parameters = "(NetPeerSentConnectResponse event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetPeerSentConnectResponse"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnReplicaChannelPropertyChange"
					var Description = "Called after a replica channel property has legitimately changed, determined using comparisons, in a particular replication phase."
					var ReturnType = "Void"
					var Parameters = "(TimeMs timestamp, ReplicationPhase replicationPhase, Replica replica, ReplicaChannel replicaChannel, ReplicaProperty replicaProperty, TransmissionDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "timestamp"
							var Type = "TimeMs"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicationPhase"
							var Type = "ReplicationPhase"
							var Description = ""
						}
						Parameter
						{
							var Name = "replica"
							var Type = "Replica"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicaChannel"
							var Type = "ReplicaChannel"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicaProperty"
							var Type = "ReplicaProperty"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "TransmissionDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnValidReplica"
					var Description = "Called before a replica is made valid (registered with the replicator)"
					var ReturnType = "Void"
					var Parameters = "(Replica replica)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replica"
							var Type = "Replica"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Open"
					var Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Role role, Integer port, Integer retries)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "role"
							var Type = "Role"
							var Description = ""
						}
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "retries"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Open"
					var Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Role role, Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "role"
							var Type = "Role"
							var Description = ""
						}
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Open"
					var Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Role role)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "role"
							var Type = "Role"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenClient"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port, Integer retries)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "retries"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenClient"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenClient"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenMasterServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenMasterServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenOffline"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OpenServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ProcessReceivedCustomMessage"
					var Description = "Processes a custom message received by the link Return true to continue processing custom messages on this link, else false (will continue next update call)"
					var ReturnType = "Boolean"
					var Parameters = "(PeerLink link, Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "PeerLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ProcessReceivedCustomPacket"
					var Description = "Processes a custom packet received by the peer."
					var ReturnType = "Void"
					var Parameters = "(Peer peer, InPacket packet)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "peer"
							var Type = "Peer"
							var Description = ""
						}
						Parameter
						{
							var Name = "packet"
							var Type = "InPacket"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveGameLoadFinished"
					var Description = "[Client] Receives a network game load finished message Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveGameLoadStarted"
					var Description = "[Client] Receives a network game load started message Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveHostPublish"
					var Description = "When the master server receives a host publish message, it is handled here."
					var ReturnType = "Void"
					var Parameters = "(IpAddressconst  theirIpAddress, Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "IpAddressconst "
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveLevelLoadFinished"
					var Description = "[Client] Receives a network level load finished message Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveLevelLoadStarted"
					var Description = "[Client] Receives a network level load started message Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveUserAddRequest"
					var Description = "[Server/Offline] Receives a network user add request Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveUserAddResponse"
					var Description = "Receives a network user add response Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message, EventBundle ourRequestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveUserRemoveRequest"
					var Description = "[Server/Offline] Receives a network user remove request Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirIpAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "message"
							var Type = "const Message"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RefreshHost"
					var Description = "Refreshes the specified host in the given network's host list. Allowing discovery will enable the host to be discovered if it is not an already known host. Listen to the NetHost event interface to handle the results Returns true if the host was found and the refresh successfully started, else false (the host could not be found)"
					var ReturnType = "Boolean"
					var Parameters = "(Network network, const IpAddress ipAddress, Boolean getExtraHostInfo, Boolean allowDiscovery, Boolean removeStaleHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "getExtraHostInfo"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "allowDiscovery"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "removeStaleHosts"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RefreshHostList"
					var Description = "Refreshes all hosts in the given network's host list. Allowing discovery will enable new hosts to be discovered in the process of refreshing. Listen to the NetHost event interface to handle the results Returns true if the refresh was successfully started, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Network network, Boolean getExtraHostInfo, Boolean allowDiscovery, Boolean removeStaleHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "getExtraHostInfo"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "allowDiscovery"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "removeStaleHosts"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseNetUserId"
					var Description = "[Server/Offline] Releases a network user ID from the specified network user"
					var ReturnType = "Void"
					var Parameters = "(NetUser user)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "user"
							var Type = "NetUser"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseReplicas"
					var Description = "Deletes invalid replicas (if they were originally spawned, otherwise do nothing) Gaps may be represented as null replicas Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(const ReplicaArray replicas)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicas"
							var Type = "const ReplicaArray"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveHost"
					var Description = "Removes the specified host from the given network's host list Returns true if the host was found and removed, else false (the host could not be found)"
					var ReturnType = "Boolean"
					var Parameters = "(Network network, const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveHost"
					var Description = "Removes the specified host from the given network's host list Returns true if the host was found and removed, else false (the host could not be found)"
					var ReturnType = "Boolean"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveNetHostRecord"
					var Description = "Remove a NetHostRecord by Ip from a project record map. Intended to give users control over HostRecords in the master server."
					var ReturnType = "Void"
					var Parameters = "(Guidconst  projectGuid, IpAddressconst  netHostRecordIp)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "projectGuid"
							var Type = "Guidconst "
							var Description = ""
						}
						Parameter
						{
							var Name = "netHostRecordIp"
							var Type = "IpAddressconst "
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveNetObjectFromFamilyTree"
					var Description = "[Client/Server] Removes a non-emplaced net object (ancestor or descendant) from it's appropriate family tree, deleting the tree if it's empty These may be removed in any order! When removed the net object is actually just marked absent (pointer is cleared to null) Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetObject netObject)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netObject"
							var Type = "NetObject"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUnresponsiveHosts"
					var Description = "Removes all hosts from the specified network's host list not found in the responding hosts list."
					var ReturnType = "Void"
					var Parameters = "(Network network, const ArraySet<NetHost> respondingHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "respondingHosts"
							var Type = "const ArraySet<NetHost>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetUserId netUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetUserId netUserId, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetUserId netUserId, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveUserInternal"
					var Description = "Removes the net user from internal lists and disallows net object ownership."
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemovingLink"
					var Description = "Called before a link is removed."
					var ReturnType = "Void"
					var Parameters = "(PeerLink link)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "PeerLink"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetConfig"
					var Description = "Resets all configuration settings."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendGameLoadFinished"
					var Description = "[Server] Sends a network game load finished message Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendGameLoadStarted"
					var Description = "[Server] Sends a network game load started message Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendLevelLoadFinished"
					var Description = "[Server] Sends a network level load finished message Tells the client that the level replication is now complete Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendLevelLoadStarted"
					var Description = "[Server] Sends a network level load started message Tells the client to start loading the specified level in the given space Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, Space space, Level level)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "level"
							var Type = "Level"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendUserAddRequest"
					var Description = "Sends a network user add request Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(EventBundle ourRequestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ourRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendUserAddResponse"
					var Description = "[Server/Offline] Sends a network user add response Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId theirNetPeerId, NetUser theirNetUser, EventBundle theirRequestBundle, EventBundle ourResponseBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "theirNetPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirNetUser"
							var Type = "NetUser"
							var Description = ""
						}
						Parameter
						{
							var Name = "theirRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourResponseBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendUserRemoveRequest"
					var Description = "Sends a network user remove request Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetUserId netUserId, EventBundle ourRequestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "NetUserId"
							var Description = ""
						}
						Parameter
						{
							var Name = "ourRequestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Initializes the component."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeNetEvent"
					var Description = "Serializes the net event Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(BitStreamExtended bitStream, Event netEvent, Cog destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "bitStream"
							var Type = "BitStreamExtended"
							var Description = ""
						}
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "destination"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeReplicas"
					var Description = "Serializes replicas to a replica stream Gaps may be represented as null replicas and additional data may be serialized as needed Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(const ReplicaArray replicas, ReplicaStream replicaStream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicas"
							var Type = "const ReplicaArray"
							var Description = ""
						}
						Parameter
						{
							var Name = "replicaStream"
							var Type = "ReplicaStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ServerOnConnectConfirmation"
					var Description = "[Server] Called after receiving a connect confirmation"
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, BitStream connectConfirmationData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectConfirmationData"
							var Type = "BitStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ServerOnConnectRequest"
					var Description = "[Server] Called after receiving a connect request If accepted, their replicator ID is assigned immediately after this Return true to accept the connect request, else false"
					var ReturnType = "Pair<Boolean,BitStream>"
					var Parameters = "(ReplicatorLink link, ConnectRequestData connectRequestData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectRequestData"
							var Type = "ConnectRequestData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ServerOnConnectResponse"
					var Description = "[Server] Called after sending a connect response If denied, their replicator ID is released and link is destroyed immediately after this"
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, ConnectResponseData connectResponseData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "connectResponseData"
							var Type = "ConnectResponseData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ServerOnDisconnectNotice"
					var Description = "[Server] Called after sending or receiving a disconnect notice Their replicator ID is released and link is destroyed immediately after this"
					var ReturnType = "Void"
					var Parameters = "(ReplicatorLink link, DisconnectNoticeData disconnectNoticeData, TransmissionDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ReplicatorLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "disconnectNoticeData"
							var Type = "DisconnectNoticeData"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "TransmissionDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetActiveReplicaStream"
					var Description = "[Client] Sets the active replica stream used while creating a net object hierarchy"
					var ReturnType = "Void"
					var Parameters = "(const ReplicaStream replicaStream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "replicaStream"
							var Type = "const ReplicaStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetFacilitateInternetConnections"
					var Description = "Configures the peer to use connection facilitation (NAT punchthrough) when establishing a connection over the internet (Requires master server subscriptions)"
					var ReturnType = "Void"
					var Parameters = "(Boolean facilitateInternetConnections)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "facilitateInternetConnections"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpawnFamilyTree"
					var Description = "[Server] Spawns all present, invalid net objects in the family tree locally and remotely along the route Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(FamilyTreeId familyTreeId, const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "familyTreeId"
							var Type = "FamilyTreeId"
							var Description = ""
						}
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpawnNetObject"
					var Description = "[Server] Spawns the invalid net object locally and remotely along the route Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, const Route route)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "route"
							var Type = "const Route"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SubscribeToMasterServer"
					var Description = "Subscribes to the master server located at the specified IP address All internet host discovery, record publishing, connection facilitation (NAT punchthrough) requests are performed on these master server subscriptions in the order they were subscribed."
					var ReturnType = "Void"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TryMasterServerConnection"
					var Description = "Internal helper: Clients will try to connect to master servers in succession using this function."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnsubscribeFromMasterServer"
					var Description = "Unsubscribes from the master server located at the specified IP address (if subscribed)"
					var ReturnType = "Void"
					var Parameters = "(const IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "const IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateHostRecords"
					var Description = "Increases lifetime of server records, removes old server records."
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePublishInterval"
					var Description = "On servers that are internet discoverable, it will send out a host data to all its subscribed master servers on a periodic interval."
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateNetEvent"
					var Description = "Validates the net event Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(StringParam netEventId, Event netEvent, TransmissionDirection direction)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netEventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "netEvent"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "TransmissionDirection"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerClosed"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched before gracefully closing the net peer."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerOpened"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after successfully opening the net peer."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerReceivedConnectRequest"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a connect request If accepted, their net peer ID is assigned immediately after this Return true to accept the connect request, else false."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "ReturnOurConnectResponse"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ReturnOurResponseBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerReceivedConnectResponse"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a connect response If accepted, our net peer ID is set immediately before this and a connect confirmation is sent after this If denied, our net peer ID is cleared and link is destroyed immediately after this."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "OurNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "OurPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirConnectResponse"
					var Type = "ConnectResponse"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirResponseBundle"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerReceivedUserAddRequest"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a net user add request."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ReturnOurAddResponse"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ReturnOurResponseBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "ReturnTheirNetUser"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetUserId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerReceivedUserAddResponse"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a net user add response."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurNetUserId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirAddResponse"
					var Type = "NetUserAddResponse"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirResponseBundle"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerSentConnectRequest"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a connect request."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerSentConnectResponse"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a connect response If denied, their net peer ID is released and link is destroyed immediately after this."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurConnectResponse"
					var Type = "ConnectResponse"
					var Description = ""
				}
				Property
				{
					var Name = "OurIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "OurResponseBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerSentUserAddRequest"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a net user add request."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPeerSentUserAddResponse"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a net user add response."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurAddResponse"
					var Type = "NetUserAddResponse"
					var Description = ""
				}
				Property
				{
					var Name = "OurResponseBundle"
					var Type = "EventBundle"
					var Description = ""
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetUser"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "TheirNetUserId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetProperty"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Manages the replication of a single property on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LastChangeTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net property was last changed, else 0."
				}
				Property
				{
					var Name = "LastChangeTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net property was last changed, else 0."
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Net property name."
				}
				Property
				{
					var Name = "NetChannel"
					var Type = "NetChannel"
					var Description = "Operating net channel."
				}
				Property
				{
					var Name = "NetPropertyType"
					var Type = "NetPropertyType"
					var Description = "Operating net property type."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPropertyConfig"
			var BaseClass = "DataResource"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Configuration Defines a configuration for the replication of a single property on the network."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ActiveConvergenceWeight"
					var Type = "Real"
					var Description = "Controls the weight of an actively changing net property's sampled authoritative values when performing active convergence, applied every convergence interval (Setting this to 0 will effectively never converge, and setting this to 1 will effectively always snap)"
				}
				Property
				{
					var Name = "BasicType"
					var Type = "BasicType"
					var Description = "Controls the target network property type."
				}
				Property
				{
					var Name = "ConvergenceInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which a net property's locally simulated values are converged with sampled authoritative values (Increase to spread out convergence-related property setter calls which reduces CPU impact at the expense of convergence smoothness)"
				}
				Property
				{
					var Name = "DeltaThresholdDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdInteger"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdInteger2"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdInteger3"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdInteger4"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdQuaternion"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdReal"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdReal2"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdReal3"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "DeltaThresholdReal4"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "EventOnConvergenceStateChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net properties should dispatch NetChannelPropertyConvergenceStateChange when its convergence state changes."
				}
				Property
				{
					var Name = "ExtrapolationLimit"
					var Type = "Real"
					var Description = "Controls the maximum amount of time to extrapolate beyond a net property's last received authoritative value When sampling beyond this extrapolation limit, the sampled value will remain unchanged until the next authoritative value is received (Helps minimize the negative effects of missing changes or sparse change detection intervals when applied to non-deterministic property data)"
				}
				Property
				{
					var Name = "InterpolationCurve"
					var Type = "CurveType"
					var Description = "Controls the type of curve to use when interpolating a net property's authoritative values to be sampled later locally."
				}
				Property
				{
					var Name = "QuantizationRangeMaxDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger2"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger3"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger4"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxQuaternion"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal2"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal3"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal4"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger2"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger3"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger4"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinQuaternion"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinReal"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinReal2"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinReal3"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "QuantizationRangeMinReal4"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "RestingConvergenceDuration"
					var Type = "Real"
					var Description = "Controls the elapsed duration in which a resting net property will be fully converged with the last received authoritative value, applied every convergence interval (Setting this to 0 will effectively snap to the last received property value immediately on rest)"
				}
				Property
				{
					var Name = "SampleTimeOffset"
					var Type = "Real"
					var Description = "Controls the time offset from now to sample a net property's interpolated authoritative values (This is effectively how \"forward\" or \"backward\" in time we are sampling interpolated authority values)"
				}
				Property
				{
					var Name = "SerializationMode"
					var Type = "SerializationMode"
					var Description = "Controls how net properties are serialized."
				}
				Property
				{
					var Name = "SnapThresholdDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdInteger"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdInteger2"
					var Type = "Integer2"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdInteger3"
					var Type = "Integer3"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdInteger4"
					var Type = "Integer4"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdQuaternion"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdReal"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdReal2"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdReal3"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "SnapThresholdReal4"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "UseConvergence"
					var Type = "Boolean"
					var Description = "Controls whether or not to gradually converge a net property's locally simulated values with received authoritative values (Enable to improve changing value smoothness, at the expense of some small CPU and memory impact)"
				}
				Property
				{
					var Name = "UseDeltaThreshold"
					var Type = "Boolean"
					var Description = "Controls whether or not to use a delta threshold at which a net property's primitive-components are considered changed during change detection."
				}
				Property
				{
					var Name = "UseHalfFloats"
					var Type = "Boolean"
					var Description = "Controls whether or not a floating-point net property's primitive-components are converted to half floats during serialization (Using half floats is mutually exclusive with using quantization)"
				}
				Property
				{
					var Name = "UseInterpolation"
					var Type = "Boolean"
					var Description = "Controls whether or not to interpolate a net property's received authoritative values before sampling them locally (Enable to improve changing value smoothness, at the expense of some small CPU and memory impact)"
				}
				Property
				{
					var Name = "UseQuantization"
					var Type = "Boolean"
					var Description = "Controls whether or not a net property's primitive-components are quantized (bit-packed to use only the bits necessary to represent all possible values) during serialization (Quantization uses the specified delta threshold as a quantum interval value) (Quantization is mutually exclusive with using half floats)"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetName"
					var Description = "Net property configuration name."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes the net property configuration resource."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TranslateAnyProperties"
					var Description = "Translates our any properties into the target network property type (where possible, else defaults)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPropertyInfo"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Network Property Info Configures a network property."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Component"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "NetChannelConfig"
					var Type = "NetChannelConfig"
					var Description = "Network channel configuration resource controlling how this property is grouped and replicated."
				}
				Property
				{
					var Name = "NetPropertyConfig"
					var Type = "NetPropertyConfig"
					var Description = "Network property configuration resource controlling how this property is replicated."
				}
				Property
				{
					var Name = "Property"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetComponentName"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPropertyName"
					var Description = "Property's variable name (the property being configured)"
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes the net property info."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetComponentName"
					var Description = "Component's type name (the component type which defines the property being configured)"
					var ReturnType = "Void"
					var Parameters = "(StringParam componentName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = "Initializes the net property info."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetPropertyInfo rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetPropertyInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const Pair<BoundType,string> rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const Pair<BoundType,string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares component type and property names)"
					var ReturnType = "Boolean"
					var Parameters = "(const NetPropertyInfo rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetPropertyInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares component type and property names)"
					var ReturnType = "Boolean"
					var Parameters = "(const Pair<BoundType,string> rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const Pair<BoundType,string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetPropertyType"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Type Configures the replication of a single property on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Net property type name."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ResetConfig"
					var Description = "Resets all configuration settings (Cannot be modified at game runtime)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetConfig"
					var Description = "Sets all configuration settings according to the specified NetPropertyConfig resource (Cannot be modified at game runtime)"
					var ReturnType = "Void"
					var Parameters = "(NetPropertyConfig netPropertyConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetSpace"
			var BaseClass = "NetObject"
			var Library = "NetworkingLibrary"
			var Description = "Network Space Manages the replication of a single space on the network."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "NetObjectCount"
					var Type = "Integer"
					var Description = "Returns the number of net objects in this space (but not including the net space itself)"
				}
				Property
				{
					var Name = "NetUserCount"
					var Type = "Integer"
					var Description = "Returns the number of net users in this space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddDelayedAttachment"
					var Description = "[Client] Adds a delayed attachment, to be performed once the delayed parent exists locally If a pre-existing delayed attachment is already specified for this child it will be overwritten (Only used during net game cloning, missing attachment parents are an error otherwise)"
					var ReturnType = "Void"
					var Parameters = "(NetObjectId readyChild, NetObjectId delayedParent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "readyChild"
							var Type = "NetObjectId"
							var Description = ""
						}
						Parameter
						{
							var Name = "delayedParent"
							var Type = "NetObjectId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearDelayedAttachments"
					var Description = "[Client] Clears all delayed attachments"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClientOnEngineUpdate"
					var Description = "[Client] Called on engine update"
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FulfillDelayedAttachments"
					var Description = "[Client] Performs any delayed attachments now that the delayed parent exists locally (Only used during net game cloning, missing attachment parents are an error otherwise)"
					var ReturnType = "Void"
					var Parameters = "(Cog delayedParentObject)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "delayedParentObject"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOfflineEventId"
					var Description = "Handles behavior when the net object is taken offline, dispatches events accordingly."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOnlineEventId"
					var Description = "Handles behavior when the net object is brought online, dispatches events accordingly."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOfflinePostDispatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObjectOffline event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetObjectOffline"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOnlinePreDispatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObjectOnline event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetObjectOnline"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initializes the component."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OfflineOnEngineUpdate"
					var Description = "[Offline] Called on engine update"
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnEngineUpdate"
					var Description = "Called on engine update."
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PerformNetLevelStarted"
					var Description = "[Server/Offline] Dispatches the network level started event and clones the current level state to clients"
					var ReturnType = "Void"
					var Parameters = "(Boolean isLevelTransition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "isLevelTransition"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveDelayedAttachment"
					var Description = "[Client] Removes a delayed attachment Returns true if a delayed attachment was removed, else false"
					var ReturnType = "Boolean"
					var Parameters = "(NetObjectId readyChild)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "readyChild"
							var Type = "NetObjectId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ServerOnEngineUpdate"
					var Description = "[Server] Called on engine update"
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ServerOrOfflineOnLevelStarted"
					var Description = "[Server/Offline] Called on level started"
					var ReturnType = "Void"
					var Parameters = "(GameEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "GameEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetUser"
			var BaseClass = "NetObject"
			var Library = "NetworkingLibrary"
			var Description = "Network User Manages the replication of a single negotiated user on the network."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AddedByMyPeer"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "NetPeerId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NetUserId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "OwnedNetObjectCount"
					var Type = "Integer"
					var Description = "Returns the number of net objects owned by this user in all spaces."
				}
				Property
				{
					var Name = "OwnedNetObjects"
					var Type = "CogHashSetRange"
					var Description = "Returns all net objects owned by this user in all spaces."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddedByMyPeer"
					var Description = "Returns true if the user was added by our local peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddedByPeer"
					var Description = "Returns true if the user was added by the specified peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetPeerId netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "NetPeerId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindOwnedNetObjectByName"
					var Description = "Finds a net object with the given name owned by this user in any space, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindOwnedNetObjectByNameInSpace"
					var Description = "Finds a net object with the given name owned by this user in the specified space, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(StringParam name, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOfflineEventId"
					var Description = "Handles behavior when the net object is taken offline, dispatches events accordingly."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNetObjectOnlineEventId"
					var Description = "Handles behavior when the net object is brought online, dispatches events accordingly."
					var ReturnType = "const string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOfflinePostDispatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObjectOffline event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetObjectOffline"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleNetObjectOnlinePreDispatch"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetObjectOnline event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetObjectOnline"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initializes the component."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = "Uninitializes the component."
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnRegisterCppNetProperties"
					var Description = "Adds C++ component net properties to this net object."
					var ReturnType = "Void"
					var Parameters = "(RegisterCppNetProperties event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "RegisterCppNetProperties"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseOwnedNetObjects"
					var Description = "[Server/Offline] Releases ownership of all net objects owned by this user in all spaces"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetUser rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetUser"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetUserId rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetUser rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetUser"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const NetUserId rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares network user IDs)"
					var ReturnType = "Boolean"
					var Parameters = "(const NetUser rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetUser"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = "Comparison Operators (compares network user IDs)"
					var ReturnType = "Boolean"
					var Parameters = "(const NetUserId rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "const NetUserId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetUserAcquiredObjectOwnership"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net user acquires network ownership of a net object."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcquiredObject"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "PreviousNetUserOwner"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetUserCreator"
			var BaseClass = "Component"
			var Library = "NetworkingLibrary"
			var Description = "Network User Creator Creates a network user on add request (intended as a helper component)"
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SpawnSpace"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "UserArchetype"
					var Type = "Archetype"
					var Description = "Returns the network user archetype to be spawned when accepting a new user."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = "Initializes the component."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnNetPeerReceivedUserAddRequest"
					var Description = "Called after receiving a net user add request."
					var ReturnType = "Void"
					var Parameters = "(NetPeerReceivedUserAddRequest event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "NetPeerReceivedUserAddRequest"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serializes the component."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetUserLostObjectOwnership"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net user loses network ownership of a net object."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CurrentNetUserOwner"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "LostObject"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "NetUserOwnerChanged"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net object changes network ownership."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CurrentNetUserOwner"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "PreviousNetUserOwner"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Null"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectEvent"
			var BaseClass = "Event"
			var Library = "MetaLibrary"
			var Description = "Simple event for general signals."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Source"
					var Type = "Object"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectLink"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Forms a link between two positions on two objects. ObjectLinks are used primarily by physics to represent joints, but can also be used by graphics, gameplay, etc... to represent some connection between two objects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The Point on Object A in local space."
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The Point on Object B in local space."
				}
				Property
				{
					var Name = "ObjectA"
					var Type = "Cog"
					var Description = "The first object that is being connected to. Set this to null to clear the link."
				}
				Property
				{
					var Name = "ObjectAPath"
					var Type = "CogPath"
					var Description = "CogPath to object A."
				}
				Property
				{
					var Name = "ObjectB"
					var Type = "Cog"
					var Description = "The second object that is being connected to. Set this to null to clear the link."
				}
				Property
				{
					var Name = "ObjectBPath"
					var Type = "CogPath"
					var Description = "CogPath to object B."
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The point on object A in world space."
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The point on object B in world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetCog"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalPoint"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTransform"
					var Description = ""
					var ReturnType = "Transform"
					var Parameters = "(ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldPoint"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldPosition"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LinkCog"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog newCog, ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newCog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnObjectAChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnObjectBChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetCog"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog newCog, ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newCog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetCogAInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetCogBInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetCogInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalPoint"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 localPoint, ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldPoint"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 worldPoint, ObjectIndex index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "ObjectIndex"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unlink"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectLinkAnchor"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Component used to keep track of what ObjectLinks a cog has. This component is added dynamically whenever a ObjectLink is added to a cog that did not contain an ObjectLink before. This can be used to traverse across linked objects and find the entire \"island\" of ObjectLinks."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ObjectLinks"
					var Type = "ObjectLinkRange"
					var Description = "The range of object link edges connected to this anchor."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ClearLinks"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ShouldSerialize"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectLinkEdge"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "A directed edge between a cog and an object link."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ObjectLink"
					var Type = "ObjectLink"
					var Description = "The object link that this edge is connected to."
				}
				Property
				{
					var Name = "OtherCog"
					var Type = "Cog"
					var Description = "The other cog that the object link is connected to (the one not part of this edge)."
				}
				Property
				{
					var Name = "SelfCog"
					var Type = "Cog"
					var Description = "The cog that this edge on the object link is connected to."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ObjectLink link, Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "link"
							var Type = "ObjectLink"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectLinkEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "An event sent when an object link changes one of its link edges."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EdgeId"
					var Type = "Integer"
					var Description = "The index on the edge that is being overridden."
				}
				Property
				{
					var Name = "NewCog"
					var Type = "Cog"
					var Description = "The new cog being set."
				}
				Property
				{
					var Name = "OldCog"
					var Type = "Cog"
					var Description = "The old cog being overridden."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Cog oldCog, Cog newCog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "oldCog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "newCog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectLinkPointChangedEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EdgeId"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NewLocalPoint"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "OldLocalPoint"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Vec3 oldPoint, Vec3 newPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "oldPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "newPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectStore"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Object cache is use to store objects at runtime."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "StoreName"
					var Type = "string"
					var Description = "Set the object store name. This is to prevent store name conflicts."
				}
				Property
				{
					var Name = "StorePath"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ClearStore"
					var Description = "Clear the store."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Erase"
					var Description = "Attempts to remove an object from the store."
					var ReturnType = "Void"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDirectoryPath"
					var Description = "Returns the directory path to the object store."
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFile"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsStored"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Restore"
					var Description = "Restore an object to the space."
					var ReturnType = "Cog"
					var Parameters = "(string name, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RestoreOrArchetype"
					var Description = "Restore an object if it is not stored use the archetype to create it."
					var ReturnType = "Cog"
					var Parameters = "(string name, Archetype archetype, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetUpDirectory"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Store"
					var Description = "Store an object."
					var ReturnType = "StoreResult"
					var Parameters = "(string name, Cog object)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "object"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ObjectTransformGizmo"
			var BaseClass = ""
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Basis"
					var Type = "GizmoBasis"
					var Description = "Setters / Getters."
				}
				Property
				{
					var Name = "ObjectCount"
					var Type = "Integer"
					var Description = "Object getters."
				}
				Property
				{
					var Name = "Pivot"
					var Type = "GizmoPivot"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddObject"
					var Description = "Adds an object to be modified by this gizmo."
					var ReturnType = "Void"
					var Parameters = "(HandleParam meta)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "meta"
							var Type = "HandleParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearObjects"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetObjectAtIndex"
					var Description = ""
					var ReturnType = "Handle"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnFrameUpdate"
					var Description = "We want to update the gizmo basis every frame to reflect any changes made to the objects we're modifying."
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnGizmoModified"
					var Description = "As the gizmo is being dragged, we want to update all objects."
					var ReturnType = "Void"
					var Parameters = "(GizmoUpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "GizmoUpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMouseDragEnd"
					var Description = "Queue the final changes to the objects in the given operation queue."
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMouseDragStart"
					var Description = "Store the state of every object."
					var ReturnType = "Void"
					var Parameters = "(ViewportMouseEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "ViewportMouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HandleParam meta)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "meta"
							var Type = "HandleParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetOperationQueue"
					var Description = "If set, this Gizmo will add operations for all modifications to cogs."
					var ReturnType = "Void"
					var Parameters = "(OperationQueue opQueue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "opQueue"
							var Type = "OperationQueue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToggleCoordinateMode"
					var Description = "Toggle between local / world."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateGizmoBasis"
					var Description = "Updates the position of the gizmo based on the current list of objects."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "OpcodeEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Orientation"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = "Defines a new basis for a desired right, up, and forward vector. Provides a bunch of helper functions to change between these spaces and to perform simple look-at behavior."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AbsoluteAngle"
					var Type = "Real"
					var Description = "Get the angle of the object about the up vector."
				}
				Property
				{
					var Name = "DefaultOrientationBases"
					var Type = "OrientationBases"
					var Description = ""
				}
				Property
				{
					var Name = "GlobalUp"
					var Type = "Real3"
					var Description = "The world-space up vector to use for LookAt operations that don't take an up vector."
				}
				Property
				{
					var Name = "LocalForward"
					var Type = "Real3"
					var Description = "The orientation's forward vector after having been transformed into local space."
				}
				Property
				{
					var Name = "LocalOrientationBasis"
					var Type = "Quaternion"
					var Description = "A local-space basis that represents this orientation. If you build a basis from an up of (0, 1, 0), and a forward of (0, 0, -1) then this should result in the identity rotation."
				}
				Property
				{
					var Name = "LocalRight"
					var Type = "Real3"
					var Description = "The orientation's right vector after having been transformed into local space."
				}
				Property
				{
					var Name = "LocalToOrientationRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an local space vector into orientation space. For example, this transforms LocalRight into OrientationRight."
				}
				Property
				{
					var Name = "LocalToWorldRotation"
					var Type = "Quaternion"
					var Description = "The rotation that transforms a vector from local space into world space. For example, this transforms LocalRight into WorldRight."
				}
				Property
				{
					var Name = "LocalUp"
					var Type = "Real3"
					var Description = "The orientation's up vector after having been transformed into local space."
				}
				Property
				{
					var Name = "OrientationForward"
					var Type = "Real3"
					var Description = "The forward vector in orientation space. This is always the vector (0, 0, -1) but is provided for clarity with transformations."
				}
				Property
				{
					var Name = "OrientationRight"
					var Type = "Real3"
					var Description = "The right vector in orientation space. This is always the vector (1, 0, 0) but is provided for clarity with transformations."
				}
				Property
				{
					var Name = "OrientationToLocalRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an orientation space vector into local space. For example, this transforms OrientationRight into LocalRight."
				}
				Property
				{
					var Name = "OrientationToWorldRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an orientation space vector into world space. For example, this transforms OrientationRight into WorldRight."
				}
				Property
				{
					var Name = "OrientationUp"
					var Type = "Real3"
					var Description = "The up vector in orientation space. This is always the vector (0, 1, 0) but is provided for clarity with transformations."
				}
				Property
				{
					var Name = "WorldForward"
					var Type = "Real3"
					var Description = "The orientation's forward vector after having been transformed into world space."
				}
				Property
				{
					var Name = "WorldRight"
					var Type = "Real3"
					var Description = "The orientation's right vector after having been transformed into world space."
				}
				Property
				{
					var Name = "WorldToLocalRotation"
					var Type = "Quaternion"
					var Description = "The rotation that transforms a vector from world space into local space. For example, this transforms WorldRight into LocalRight."
				}
				Property
				{
					var Name = "WorldToOrientationRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an world space vector into orientation space. For example, this transforms WorldRight into OrientationRight."
				}
				Property
				{
					var Name = "WorldUp"
					var Type = "Real3"
					var Description = "The orientation's up vector after having been transformed into world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AbsoluteAngle"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AbsoluteAngle"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forward"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "newVector"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeNormalizedLocalVector"
					var Description = "Transforms the given orientation-space vector into local space and then normalizes it."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 orientationVector)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "orientationVector"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeNormalizedWorldVector"
					var Description = "Transforms the given orientation-space vector into world space and then normalizes it."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 orientationVector)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "orientationVector"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeSignedAngle"
					var Description = "Compute the rotation angle between two vectors (in radians)"
					var ReturnType = "Real"
					var Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forward"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "newVector"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDrawBases"
					var Description = "Debug draws the current orientation bases in world space."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalBasisVectors"
					var Description = "Transform all 3 orientation-space basis vectors into local space."
					var ReturnType = "Void"
					var Parameters = "(Vec3 localRight, Vec3 localUp, Vec3 localForward)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRight"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "localUp"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "localForward"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLookAtDirectionRotation"
					var Description = "Gets the forward to look in the given direction. Keeps the current world up."
					var ReturnType = "Quat"
					var Parameters = "(Vec3 lookDir)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLookAtDirectionWithUpRotation"
					var Description = "Same as GetLookAtDirectionRotation but allows the user to specify the up vector."
					var ReturnType = "Quat"
					var Parameters = "(Vec3 lookDir, Vec3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLookAtPointRotation"
					var Description = "Get the rotation so that the forward will look at the given point. Keeps the current world up."
					var ReturnType = "Quat"
					var Parameters = "(Vec3 lookPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLookAtPointWithUpRotation"
					var Description = "Same as GetLookAtPointRotation but allows the user to specify the up vector."
					var ReturnType = "Quat"
					var Parameters = "(Vec3 lookPoint, Vec3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldBasisVectors"
					var Description = "Transform all 3 orientation-space basis vectors into world space."
					var ReturnType = "Void"
					var Parameters = "(Vec3 worldRight, Vec3 worldUp, Vec3 worldForward)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRight"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldUp"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldForward"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LocalVectors"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, Vec3 upOut, Vec3 forwardOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "upOut"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forwardOut"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LookAtDirection"
					var Description = "Sets the forward to look in the given direction. Keeps the current world up."
					var ReturnType = "Void"
					var Parameters = "(Vec3 lookDir)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LookAtDirectionWithUp"
					var Description = "Same as LookAtDirection but allows the user to specify the up vector."
					var ReturnType = "Void"
					var Parameters = "(Vec3 lookDir, Vec3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LookAtPoint"
					var Description = "Sets the forward to look at the given point. Keeps the current world up."
					var ReturnType = "Void"
					var Parameters = "(Vec3 lookPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LookAtPointWithUp"
					var Description = "Same as LookAtPoint but allows the user to specify the up vector."
					var ReturnType = "Void"
					var Parameters = "(Vec3 lookPoint, Vec3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalLookAtRotation"
					var Description = "Set the transform's local rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward)"
					var ReturnType = "Void"
					var Parameters = "(QuatParam localLookAtRotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localLookAtRotation"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldLookAtRotation"
					var Description = "Set the transform's world rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward)"
					var ReturnType = "Void"
					var Parameters = "(QuatParam worldLookAtRotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldLookAtRotation"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SignedAngle"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forward"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "newVector"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToWorld"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, Vec3 upOut, Vec3 forwardOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "upOut"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forwardOut"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WorldVectors"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, Vec3 upOut, Vec3 forwardOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "upOut"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forwardOut"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PanningNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Changes the left and right channel volumes of its input SoundNode's audio separately."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LeftVolume"
					var Type = "Real"
					var Description = "The volume multiplier applied to audio in the left channel."
				}
				Property
				{
					var Name = "RightVolume"
					var Type = "Real"
					var Description = "The volume multiplier applied to audio in the right channel."
				}
				Property
				{
					var Name = "SumToMono"
					var Type = "Boolean"
					var Description = "If this property is true, the audio will be combined into a single channel before being split between the right and left channels. If it is false and the audio has more than two channels, it will be combined into only two channels before being processed."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateLeftVolume"
					var Description = "Interpolates the LeftVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateRightVolume"
					var Description = "Interpolates the RightVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolumes"
					var Description = "Interpolates both left and right volume properties at once. The first parameter is the value to change the LeftVolume to, the second is the RightVolume, and the third is the number of seconds to use for the interpolation."
					var ReturnType = "Void"
					var Parameters = "(Real leftVolume, Real rightVolume, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "leftVolume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "rightVolume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParseEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleAnimator"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Particle Animator Interface. Particle Animators effect partices in the system."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GraphicsSpace"
					var Type = "GraphicsSpace"
					var Description = ""
				}
				Property
				{
					var Name = "link"
					var Type = "Link<ParticleAnimator>"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleAttractor"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Strength"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleColorAnimator"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color0"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Color1"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Color2"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Color3"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Color4"
					var Type = "Real4"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleEmitter"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Particle emitters add new particles to the system and control where the particles will appear (sphere emitter, mesh emitter, etc)"
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GraphicsSpace"
					var Type = "GraphicsSpace"
					var Description = ""
				}
				Property
				{
					var Name = "LastFramePosition"
					var Type = "Vec3"
					var Description = ""
				}
				Property
				{
					var Name = "Transform"
					var Type = "Transform"
					var Description = ""
				}
				Property
				{
					var Name = "link"
					var Type = "Link<ParticleEmitter>"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "EmitParticles"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity, Real timeAlive)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "velocity"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeAlive"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetCount"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateLastTranslation"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleEmitterShared"
			var BaseClass = "ParticleEmitter"
			var Library = "GraphicsLibrary"
			var Description = "Particle Emitter Shared."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "EmitCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "EmitDelay"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "EmitRate"
					var Type = "Real"
					var Description = "Rate that particles spawn per second."
				}
				Property
				{
					var Name = "EmitRateSoftStartTime"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "EmitVariance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "EmitterSize"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "EmitterVelocityPercent"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "FastMovingEmitter"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Fill"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Lifetime"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "LifetimeVariance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "RandomSpin"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RandomVelocity"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "Size"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SizeVariance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Spin"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SpinVariance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "StartVelocity"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "TangentVelocity"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateInitializedParticle"
					var Description = ""
					var ReturnType = "Particle"
					var Parameters = "(ParticleList particleList, Integer particle, Mat4Ref transform, Vec3 emitterVelocity)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "particle"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "emitterVelocity"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetParticleEmissionCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(ParticleList particleList, Real dt, Real timeAlive)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeAlive"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResetCount"
					var Description = "Reset the number of particles to emit back to EmitCount."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleGradientAnimator"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ColorGradient"
					var Type = "ColorGradient"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleSystem"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "An interface for generating and managing particles of a generic definition using emitters and animators."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BoundingBoxSize"
					var Type = "Real"
					var Description = "Size of all sides of the bounding box used for frustum culling."
				}
				Property
				{
					var Name = "ChildSystem"
					var Type = "Boolean"
					var Description = "If set, particle emission will happen for each particle in a parent system."
				}
				Property
				{
					var Name = "PreviewInEditor"
					var Type = "Boolean"
					var Description = "If the particle system should run on frame update in the editor instead of logic update."
				}
				Property
				{
					var Name = "SystemSpace"
					var Type = "SystemSpace"
					var Description = ""
				}
				Property
				{
					var Name = "WarmUpTime"
					var Type = "Real"
					var Description = "The amount of time to simulate the particle system on startup. This will be done on AllObjectsCreated, and will use the engines dt. This is good for when you want the particle effect to be in full bloom when you first see it. However, it can hurt performance at high values on startup."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddAnimator"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleAnimator animator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animator"
							var Type = "ParticleAnimator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddChildSystem"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleSystem child)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "child"
							var Type = "ParticleSystem"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddEmitter"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleEmitter emitter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "emitter"
							var Type = "ParticleEmitter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AllParticles"
					var Description = "A list of all particles currently active in the system."
					var ReturnType = "ParticleListRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BaseUpdate"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ChildUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real dt, ParticleList parentList, Integer emitCount)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "parentList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "emitCount"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clear all current particles."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetParentSystem"
					var Description = ""
					var ReturnType = "ParticleSystem"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsSelectedInEditor"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSelectionFinal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SelectionChangedEvent selectionEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "selectionEvent"
							var Type = "SelectionChangedEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveChildSystem"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleSystem child)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "child"
							var Type = "ParticleSystem"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SystemUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateLifetimes"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleTwister"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Axis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Strength"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ParticleWander"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = "Particle animator that causes particle to wander or smoothly vary directions."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WanderAngle"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WanderAngleVariance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WanderStrength"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhyGunJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A Physics gun joint is just a tool for the editor. This acts as a weld between an object and the world."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPoint"
					var Type = "Real3"
					var Description = "The body point on the object that should match the target point."
				}
				Property
				{
					var Name = "TargetPoint"
					var Type = "Real3"
					var Description = "The point in space that the object's point should match."
				}
				Property
				{
					var Name = "TargetRotation"
					var Type = "Quaternion"
					var Description = "The world space rotation that the basis of the object should match. Used to set the desired rotation of the object in world space."
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = "The world point on the object that should match the target point."
				}
				Property
				{
					var Name = "WorldRotation"
					var Type = "Quaternion"
					var Description = "Used to set the world rotation basis of the object that should be matched to the target rotation."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsCar"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A controller for a high speed physics based car. The car is controlled with a steer, gas and a brake coefficient. The car will raycast wheel positions to try to keep the wheels on the ground and then apply friction and normal forces to propel the car."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AntiLockBrakes"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Brake"
					var Type = "Real"
					var Description = "How much the brake is being pressed [0,1] where 1 is full brake."
				}
				Property
				{
					var Name = "DebugDraw"
					var Type = "Boolean"
					var Description = "Whether or not the car should debug draw."
				}
				Property
				{
					var Name = "Gas"
					var Type = "Real"
					var Description = "How much the gas is being pressed [-1,1] where -1 is full reverse."
				}
				Property
				{
					var Name = "GripScalar"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "MaxSpeed"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "MaxTorque"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Steer"
					var Type = "Real"
					var Description = "How much the wheel is being steered. This is measured in radians about this object's y-axis."
				}
				Property
				{
					var Name = "TorqueGovernor"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "WheelCogs"
					var Type = "CarWheelArray"
					var Description = ""
				}
				Property
				{
					var Name = "WheelFrictionFrontRollCoef"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WheelFrictionSideRollCoef"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddWheelCog"
					var Description = "Add the PhysicsCarWheel to be controlled by this car."
					var ReturnType = "Void"
					var Parameters = "(Cog wheelCog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "wheelCog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplySpringForces"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BeginFrictionCalculations"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CacheActiveWheels"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CalculateFrictionImpulses"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CalculateSpringForces"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastWheelPositions"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearWheels"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Debug draws all of the wheels associated with this car."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EndFrictionCalculations"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NumberOfWheelsInContact"
					var Description = "The number of wheels currently in contact with an object."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveWheelCog"
					var Description = "Remove the PhysicsCarWheel from being controlled by this car."
					var ReturnType = "Void"
					var Parameters = "(Cog wheelCog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "wheelCog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePositions"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateWheelData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateWheelTransforms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsCarWheel"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A wheel for a high speed physics based car. Used to manage the connection to the car body. The wheel Contains most of the properties about how it interacts (eg. spring forces, friction etc)."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Should this wheel be used for physics calculations."
				}
				Property
				{
					var Name = "BodyWheelStartPos"
					var Type = "Real3"
					var Description = "The body position that wheel starts at."
				}
				Property
				{
					var Name = "ContactNormal"
					var Type = "Real3"
					var Description = "The normal of the surface where the wheel is currently in contact. Will be the zero vector if nothing is being contacted."
				}
				Property
				{
					var Name = "ContactPoint"
					var Type = "Real3"
					var Description = "The point in world space where the wheel is currently in contact. Will be the zero vector if nothing is being contacted."
				}
				Property
				{
					var Name = "ContactedObject"
					var Type = "Cog"
					var Description = "The object that this wheel is currently in contact with."
				}
				Property
				{
					var Name = "DampeningCompressionRatio"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "DampeningRelaxationRatio"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "DriveFactor"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "ForwardDynamicFriction"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "ForwardImpulse"
					var Type = "Real"
					var Description = "The forward impulse (drive force) being exerted by the wheel."
				}
				Property
				{
					var Name = "ForwardStaticFriction"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "FrequencyHz"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Grip"
					var Type = "Real"
					var Description = "A coefficient from 0 to 1 that represents how much grip the wheel has."
				}
				Property
				{
					var Name = "GripScalar"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Is2DWheel"
					var Type = "Boolean"
					var Description = "If this wheel is designed to work in 2d mode. Ignores the side friction axis."
				}
				Property
				{
					var Name = "IsDriveWheel"
					var Type = "Boolean"
					var Description = "If the wheel is a drive wheel, then it will turn when the gas is pressed on the car body."
				}
				Property
				{
					var Name = "IsInContact"
					var Type = "Boolean"
					var Description = "If the wheel is currently in contact with an object."
				}
				Property
				{
					var Name = "IsSliding"
					var Type = "Boolean"
					var Description = "If the wheel is currently sliding. This means that the wheel is slipping due to exerting too high of a force for what static friction is."
				}
				Property
				{
					var Name = "MaxBrakeStrength"
					var Type = "Real"
					var Description = "The max force that this wheel can exert with its breaks."
				}
				Property
				{
					var Name = "MaxSpringCompressionDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "MaxSpringForce"
					var Type = "Real"
					var Description = "The maximum force that the wheel's spring can exert."
				}
				Property
				{
					var Name = "MaxSpringRelaxationDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "NormalImpulse"
					var Type = "Real"
					var Description = "The normal impulse (spring force) being exerted by the wheel."
				}
				Property
				{
					var Name = "PhysicsCarPath"
					var Type = "CogPath"
					var Description = "The path to the car that we are a wheel for."
				}
				Property
				{
					var Name = "PreRotation"
					var Type = "Quaternion"
					var Description = "Used to rotate the wheel before taking into account it's transform. Currently used to rotate cylinders that define +y as default to +x being default."
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The radius of the wheel."
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Real"
					var Description = "The current rotation of the wheel in radians about it's axle."
				}
				Property
				{
					var Name = "RotationalVelocity"
					var Type = "Real"
					var Description = "The current rotational velocity of the wheel about it's axle."
				}
				Property
				{
					var Name = "SideDynamicFriction"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SideImpulse"
					var Type = "Real"
					var Description = "The side impulse (side friction) being exerted by the wheel."
				}
				Property
				{
					var Name = "SideStaticFriction"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SpringLength"
					var Type = "Real"
					var Description = "The current length of the spring."
				}
				Property
				{
					var Name = "SpringMax"
					var Type = "Real"
					var Description = "The maximum length of the spring of the wheel. If the wheel hits something further away than this length (plus the wheel radius) then that object will be ignored."
				}
				Property
				{
					var Name = "SpringMin"
					var Type = "Real"
					var Description = "The minimum length of the spring of the wheel. If a wheel cast hits an object at a time before min but after start then the wheel will still collide with this object but the spring forces and visuals will be at the min spring length. This is useful for putting the starting raycast position inside of the object so as to avoid tunneling but still having the wheel only visually display where it should."
				}
				Property
				{
					var Name = "SpringRest"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SpringStart"
					var Type = "Real"
					var Description = "The t value to start the raycast at. This t value is 0 at the wheel position and travels in the direction of the wheel spring direction. This value is useful to modify where the start of the raycast is in conjunction with the min flag to help ensure that the start position is never inside of an object due to tunneling."
				}
				Property
				{
					var Name = "SteerFactor"
					var Type = "Real"
					var Description = "How much this wheel steers. [0:1] where 1 is the max steering of the car."
				}
				Property
				{
					var Name = "WorldAngularVelocity"
					var Type = "Real3"
					var Description = "The axis that represents the world angular velocity of the wheel."
				}
				Property
				{
					var Name = "WorldAxleAxis"
					var Type = "Real3"
					var Description = "The current axis of the wheel's axle in world space."
				}
				Property
				{
					var Name = "WorldForwardAxis"
					var Type = "Real3"
					var Description = "The current axis of the wheel's forward in world space."
				}
				Property
				{
					var Name = "WorldLinearVelocity"
					var Type = "Real3"
					var Description = "The velocity of the center of the wheel having taken into account the car's velocity."
				}
				Property
				{
					var Name = "WorldSpringAxis"
					var Type = "Real3"
					var Description = "The current axis of the wheel's spring in world space."
				}
				Property
				{
					var Name = "WorldWheelBasis"
					var Type = "Quaternion"
					var Description = "Determines what directions the forward, axle and spring are on the wheel. The forward direction is taken from the x-axis of the basis passed in. Likewise the axle is from the y-axis and the spring is from the z-axis. Use BuildFromBases on quaternion to construct this."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplySpringForce"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BeginIteration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CalculateImpulse"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(Vec3 dir, Vec3 relativeVelocity)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dir"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "relativeVelocity"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CalculateRotationalVelocity"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(Vec3 dir, Vec3 relativeVelocity)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dir"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "relativeVelocity"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CalculateSpringForce"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastWheelPosition"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FinishedIteration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FixChildState"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog parent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "parent"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCarBody"
					var Description = ""
					var ReturnType = "PhysicsCar"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRelativeVelocity"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalFrictionCalculation"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "(Vec3 dir, ConstraintInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dir"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "info"
							var Type = "ConstraintInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnCogPathCogChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SolveFrictionImpulse"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateCachedCarBody"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateCarBodyConnections"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateLocalPointOnCar"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean forcedUpdate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "forcedUpdate"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePreRotationOnCar"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean forcedUpdate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "forcedUpdate"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateTransformRelativeToParent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateWheelData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateWheelTransform"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsEffect"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A common interface for all effects in physics. An effect is something that can be attached to a collider, rigid body, region or even a space. This effect will then perform its action every frame according to the rules of the object it is attached to."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Enable/disable this effect."
				}
				Property
				{
					var Name = "DebugDrawEffect"
					var Type = "Boolean"
					var Description = "Should the effect debug draw."
				}
				Property
				{
					var Name = "EffectType"
					var Type = "PhysicsEffectType"
					var Description = "What kind of effect this is."
				}
				Property
				{
					var Name = "WakeUpOnChange"
					var Type = "Boolean"
					var Description = "Whether the object associated with this is woken up when any property is changed."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddEffect"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(SpringSystem obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "SpringSystem"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BodyAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BodyRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CheckWakeUp"
					var Description = "If the property is set, tell the associated object ( RigidBody , Region , etc...) to wake up."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ColliderAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ColliderRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentRemoved"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HierarchyAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HierarchyRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LevelAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsSpace space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "PhysicsSpace"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LevelRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsSpace space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "PhysicsSpace"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RegionAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Region region)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "region"
							var Type = "Region"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RegionRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Region region)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "region"
							var Type = "Region"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveEffect"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpaceAdd"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsSpace space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "PhysicsSpace"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpaceRemove"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsSpace space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "PhysicsSpace"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Toggle"
					var Description = "Toggles whether or not this effect is active."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformLocalDirectionAndPointToWorld"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 localPoint, Vec3 localDir)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPoint"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "localDir"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformLocalDirectionToWorld"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 localDir)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localDir"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformLocalPointToWorld"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsMaterial"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Describes material properties of a collider. The material properties are mainly used during collision resolution."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Density"
					var Type = "Real"
					var Description = "Density is used to determine the mass of an object. Mass is computed as density * volume. Density can be set to 0 exactly to produce a massless object, however this should only be done with children objects to add collision without affecting mass."
				}
				Property
				{
					var Name = "Friction"
					var Type = "Real"
					var Description = "How slippery or rough the object is. When friction is 0 the object will be slippery. As friction increases sliding objects will stop quicker. The friction of two object's are combined with the formula sqrt(a * b)."
				}
				Property
				{
					var Name = "HighPriority"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Restitution"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CopyTo"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsMaterial destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "destination"
							var Type = "PhysicsMaterial"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<PhysicsMaterial>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResourceModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<PhysicsMaterial>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDensityInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real density, Boolean markModified)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "density"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "markModified"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAndNotifyIfModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsMesh"
			var BaseClass = "GenericPhysicsMesh"
			var Library = "PhysicsLibrary"
			var Description = "A mesh used to represent static world geometry. All geometry is stored and tested as a collection of triangles."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Tree"
					var Type = "StaticAabbTree<Integer>"
					var Description = "Aabb Tree used for fast ray casts and triangle lookups."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CastRay"
					var Description = "Finds the first triangle hit by the local-space ray."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CopyTo"
					var Description = "Copy all relevant info for runtime clone."
					var ReturnType = "Void"
					var Parameters = "(PhysicsMesh destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "destination"
							var Type = "PhysicsMesh"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<PhysicsMesh>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceRebuild"
					var Description = "Recomputes mass, volume, the local space aabb, and internal edge information. If a mesh wants to do something special (such as a mid-phase) then it should override this. Note: Inertia is not calculated as it cannot be (non-uniformly) scaled afterwards."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GenerateInternalEdgeData"
					var Description = "Generates the voronoi region data for internal edge catching prevention. Virtual so that any mesh can use its appropriate mid-phase for optimization."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GenerateTree"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAabbTree"
					var Description = "Returns the mesh's Aabb tree."
					var ReturnType = "StaticAabbTree<Integer>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOverlappingTriangles"
					var Description = "Fills out the given array with all overlapping triangles."
					var ReturnType = "Void"
					var Parameters = "(Aabb aabb, TriangleArray triangles, Array<Integer> triangleIds)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "triangles"
							var Type = "TriangleArray"
							var Description = ""
						}
						Parameter
						{
							var Name = "triangleIds"
							var Type = "Array<Integer>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnResourceModified"
					var Description = "Called when a mesh is modified. This is typically done when the vertices/indices are modified in script."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildMidPhase"
					var Description = "Rebuild a mid-phase if it is needed. This will happen before internal edge data is generated."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<PhysicsMesh>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unload"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsMeshIndexData"
			var BaseClass = "BoundMeshData< GenericPhysicsMesh, uint >"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "PhysicsMeshIndexRange"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsMeshVertexData"
			var BaseClass = "BoundMeshData< GenericPhysicsMesh, Vec3 >"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "PhysicsMeshVertexRange"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsSolverConfig"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Defines various configuration values used by physics to solve constraints. This resource defines a tiered set of properties that can be override global or per constraint type."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CacheContacts"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "PositionCorrectionType"
					var Type = "PhysicsSolverPositionCorrection"
					var Description = "What method should be used to fix errors in joints. Baumgarte fixes errors by adding extra velocity but results in a more spongy behavior. Post Stabilization fixes errors by directly modifying position but can behave worse in unsolvable configurations."
				}
				Property
				{
					var Name = "PositionIterationCount"
					var Type = "Integer"
					var Description = "The number of iterations used for position correction (if position correction is used)."
				}
				Property
				{
					var Name = "SolverIterationCount"
					var Type = "Integer"
					var Description = "The number of iterations used in the constraint solver. Affects how stiff joints will be."
				}
				Property
				{
					var Name = "SolverType"
					var Type = "PhysicsSolverType"
					var Description = "The kind of solver used. For the most part this is internal and should only affect performance."
				}
				Property
				{
					var Name = "SubCorrectionType"
					var Type = "PhysicsSolverSubType"
					var Description = "What kind of solver to use for post stabilization. Mostly for testing."
				}
				Property
				{
					var Name = "VelocityRestitutionThreshold"
					var Type = "Real"
					var Description = "To prevent numerical issues, restitution is only applied if the relative velocity between the two objects is above this value."
				}
				Property
				{
					var Name = "WarmStart"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const HandleOf<ConstraintConfigBlock> block, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "block"
							var Type = "const HandleOf<ConstraintConfigBlock>"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CopyTo"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsSolverConfig destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "destination"
							var Type = "PhysicsSolverConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBlockAt"
					var Description = ""
					var ReturnType = "HandleOf<ConstraintConfigBlock>"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetById"
					var Description = ""
					var ReturnType = "HandleOf<ConstraintConfigBlock>"
					var Parameters = "(BoundType typeId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetContactBlock"
					var Description = ""
					var ReturnType = "ConstraintConfigBlock"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSize"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildConstraintBlockValues"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Remove"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const HandleOf<ConstraintConfigBlock> block)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "block"
							var Type = "const HandleOf<ConstraintConfigBlock>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResourceModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<PhysicsSolverConfig>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PhysicsSpace"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "The PhysicsSpace is an \"instance\" of a world. This world manages and stores all of the other physical components of this world. PhysicSpaces act independently of each other."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllowSleep"
					var Type = "Boolean"
					var Description = "Determines if anything in the space is allowed to sleep or not."
				}
				Property
				{
					var Name = "CollisionTable"
					var Type = "CollisionTable"
					var Description = "The collision table resource being used to filter collisions in this space."
				}
				Property
				{
					var Name = "Deterministic"
					var Type = "Boolean"
					var Description = "Does some extra work to help enforce determinism in the simulation."
				}
				Property
				{
					var Name = "DynamicBroadphaseType"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "IsSolverShared"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IslandCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "IslandType"
					var Type = "PhysicsIslandType"
					var Description = ""
				}
				Property
				{
					var Name = "Mode2D"
					var Type = "Boolean"
					var Description = "Determines if all new objects should operate in 2d mode."
				}
				Property
				{
					var Name = "PhysicsSolverConfig"
					var Type = "PhysicsSolverConfig"
					var Description = "The resource that controls how physics solves things. Mostly related to how collision is resolved."
				}
				Property
				{
					var Name = "PostProcessIslands"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "PreProcessing"
					var Type = "PhysicsIslandPreProcessingMode"
					var Description = ""
				}
				Property
				{
					var Name = "StaticBroadphaseType"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "SubStepCount"
					var Type = "Integer"
					var Description = "The number of iterations the physics space will take every frame. Used to achieve higher accuracy and visual results."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ActivateKinematic"
					var Description = "Takes a kinematic object and moves it to the moving kinematic list."
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponent"
					var Description = "Adds the component to the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(SpringSystem system)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "system"
							var Type = "SpringSystem"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponent"
					var Description = "Adds the component to the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(PhysicsCar car)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "car"
							var Type = "PhysicsCar"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponent"
					var Description = "Adds the component to the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponent"
					var Description = "Adds the component to the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(Region region)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "region"
							var Type = "Region"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponent"
					var Description = "Adds the component to the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(Joint joint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "joint"
							var Type = "Joint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddComponent"
					var Description = "Adds the component to the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddGlobalEffect"
					var Description = "For adding effects to all objects in a space."
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddHierarchyPairFilter"
					var Description = "Adds a filter to ignore collision between both trees passed in. See AddPairFilter for more info."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddHierarchyPairFilterInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog hierarchyCog, Cog normalCog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "hierarchyCog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "normalCog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddPairFilter"
					var Description = "Filters these two cogs to not resolve collision. This is a runtime only feature and will not be saved."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddPairFilterInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider1, Collider collider2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider1"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "collider2"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddToInactive"
					var Description = "Adds and removes from the inactive body list so that it is not updated."
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyGlobalEffects"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RigidBody body, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyHierarchyEffects"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BroadPhase"
					var Description = "Updates all the BroadPhases then gets all possible collisions from them."
					var ReturnType = "Void"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastAabb"
					var Description = "Returns the results of the filtered Aabb cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Aabb aabb, Integer count, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "const Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastAabb"
					var Description = "Returns the results of the filtered Aabb cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "Void"
					var Parameters = "(const Aabb aabb, CastResults results)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "const Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "results"
							var Type = "CastResults"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastCollider"
					var Description = "Cast out a collider to see what it's colliding with."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Vec3 offset, Collider testCollider, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "offset"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "testCollider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastCollider"
					var Description = "Currently a hack function for player controller sweeping."
					var ReturnType = "Void"
					var Parameters = "(Vec3 offset, Collider testCollider, ManifoldArray results, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "offset"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "testCollider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "results"
							var Type = "ManifoldArray"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastFrustum"
					var Description = "Returns the results of the filtered Frustum cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Frustum frustum, Integer count, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frustum"
							var Type = "const Frustum"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastFrustum"
					var Description = "Returns the results of the filtered Frustum cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "Void"
					var Parameters = "(const Frustum frustum, CastResults results)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frustum"
							var Type = "const Frustum"
							var Description = ""
						}
						Parameter
						{
							var Name = "results"
							var Type = "CastResults"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Returns the results of a Ray Cast. The results of the ray cast are stored in the passed in vector sorted by time of collision. The number of results given is based on the size of the CastResults passed in."
					var ReturnType = "Void"
					var Parameters = "(const Ray worldRay, CastResults results)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "results"
							var Type = "CastResults"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Returns the results of the filtered ray cast. The number of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Ray worldRay, Integer count, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Returns the results of the ray cast. The number of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Ray worldRay, Integer count)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRayFirst"
					var Description = "Performs a ray cast and returns the first object that is collided with."
					var ReturnType = "CastResult"
					var Parameters = "(const Ray worldRay)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "const Ray"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastRayFirst"
					var Description = "Performs a ray cast and returns the first object that is collided with."
					var ReturnType = "CastResult"
					var Parameters = "(const Ray worldRay, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastSegment"
					var Description = "Returns the results of the filtered segment cast. The number of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Segment segment, Integer count, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "segment"
							var Type = "const Segment"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastSegment"
					var Description = "Returns the results of the segment cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Segment segment, Integer count)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "segment"
							var Type = "const Segment"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastSegment"
					var Description = "Returns the results of a Segment Cast. The results of the segment cast are stored in the passed in vector sorted by time of collision. The number of results given is based on the size of the CastResults passed in."
					var ReturnType = "Void"
					var Parameters = "(const Segment segment, CastResults results)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "segment"
							var Type = "const Segment"
							var Description = ""
						}
						Parameter
						{
							var Name = "results"
							var Type = "CastResults"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastSphere"
					var Description = "Returns the results of the filtered Sphere cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "CastResultsRange"
					var Parameters = "(const Sphere sphere, Integer count, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sphere"
							var Type = "const Sphere"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CastSphere"
					var Description = "Returns the results of the filtered Sphere cast. The amount of objects returned is based on the count passed in."
					var ReturnType = "Void"
					var Parameters = "(const Sphere sphere, CastResults results)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sphere"
							var Type = "const Sphere"
							var Description = ""
						}
						Parameter
						{
							var Name = "results"
							var Type = "CastResults"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ColliderToBroadPhaseData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider, BroadPhaseData data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "BroadPhaseData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentStateChange"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentStateChange"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateJoint"
					var Description = "Creates a joint of jointName between the two cogs passed in. The anchor of the joint is set to the world point passed in."
					var ReturnType = "Cog"
					var Parameters = "(Cog cog0, Cog cog1, StringParam jointName, Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog0"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "jointName"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DecrementDrawLevel"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchWithinAabb"
					var Description = "Dispatches an event to all objects within the given box."
					var ReturnType = "Void"
					var Parameters = "(const Aabb aabb, string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "const Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchWithinSphere"
					var Description = "Dispatches an event to all objects within the given sphere."
					var ReturnType = "Void"
					var Parameters = "(const Sphere sphere, string eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sphere"
							var Type = "const Sphere"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawColliders"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawInactiveObjects"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawRigidBodies"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FixColliderCollisionGroups"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ColliderList colliders)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "colliders"
							var Type = "ColliderList"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FixCollisionTable"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CollisionTable table)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "table"
							var Type = "CollisionTable"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FlushPhysicsQueue"
					var Description = "Debug."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceAwakeRigidBodies"
					var Description = "Wakes up all inactive objects."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FrameUpdate"
					var Description = "Debug draws and makes sure broadphase is up-to-date."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAllDynamicColliders"
					var Description = "For debug purposes (select all)."
					var ReturnType = "range"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAllInIsland"
					var Description = ""
					var ReturnType = "range"
					var Parameters = "(Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAllStaticColliders"
					var Description = ""
					var ReturnType = "range"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCollisionGroupInstance"
					var Description = "Helper for a collider. Returns the instance for this space of the given group name."
					var ReturnType = "CollisionGroupInstance"
					var Parameters = "(ResourceId groupId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "groupId"
							var Type = "ResourceId"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCollisionManager"
					var Description = ""
					var ReturnType = "CollisionManager"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGlobalEffects"
					var Description = "Returns all global effects."
					var ReturnType = "range"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetIslandPreProcessType"
					var Description = ""
					var ReturnType = "PhysicsIslandPreProcessingMode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetIslandingType"
					var Description = ""
					var ReturnType = "PhysicsIslandType"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetObjectsInIsland"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider, ColliderArray objects)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "objects"
							var Type = "ColliderArray"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IncrementDrawLevel"
					var Description = "Draw level for broad phase."
					var ReturnType = "Void"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IntegrateBodiesPosition"
					var Description = "Integrates the position of all of the bodies."
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IntegrateBodiesVelocity"
					var Description = "Adds global effect to all of the bodies then integrates their velocities."
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IterateTimestep"
					var Description = "Iterates one timestep of the physics engine with the given dt. Does not take care of batch insertion/removal in broadphases or debug drawing."
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NarrowPhase"
					var Description = "Takes the possible collisions from the BroadPhase step and checks if they actually do collide. If they do collide then they are added to the contact graph for further refinement."
					var ReturnType = "Void"
					var Parameters = "(Void)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculateEffects"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreSolve"
					var Description = "Temp fix."
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Publish"
					var Description = "Tells the engine where the new position of the objects are."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PublishEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PushBroadPhaseQueue"
					var Description = "Pushes all of the objects in the broadphase queue. Before hand, it also recomputes the world matrix values so that everything is in the right spot."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PushBroadPhaseQueueProfiled"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueuePhysicsNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "PhysicsNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = "Removes the component from the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = "Removes the component from the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(PhysicsCar car)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "car"
							var Type = "PhysicsCar"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = "Removes the component from the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(SpringSystem system)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "system"
							var Type = "SpringSystem"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = "Removes the component from the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(Region region)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "region"
							var Type = "Region"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = "Removes the component from the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(Joint joint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "joint"
							var Type = "Joint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveComponent"
					var Description = "Removes the component from the appropriate list based on it's type."
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveFromInactive"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RigidBody body)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveGlobalEffect"
					var Description = "Removes a global effect (region)."
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveHierarchyPairFilter"
					var Description = "Removes the filters between both trees. See RemovePairFilter for more info."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveHierarchyPairFilterInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog hierarchyCog, Cog normalCog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "hierarchyCog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "normalCog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemovePairFilter"
					var Description = "Removes the filter between these two cogs so they can collide again."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemovePairFilterInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Collider collider1, Collider collider2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider1"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "collider2"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReplaceBroadPhase"
					var Description = ""
					var ReturnType = "BroadPhasePackage"
					var Parameters = "(BroadPhasePackage newBroadPhase)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newBroadPhase"
							var Type = "BroadPhasePackage"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResolutionPhase"
					var Description = "Takes the manifolds from the contact graph and inserts them into a contact graph where all constraints are solved simultaneously."
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeBroadPhases"
					var Description = "Serializes the broad phase information."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetIslandPreProcessType"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsIslandPreProcessingMode preProcessType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "preProcessType"
							var Type = "PhysicsIslandPreProcessingMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetIslandingType"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsIslandType islandingType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "islandingType"
							var Type = "PhysicsIslandType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetKinematic"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(RigidBody body, Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SolvePositions"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SolveSprings"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SweepCollider"
					var Description = "Generate sweep data from the current position to a new location (stop at the first contact)."
					var ReturnType = "SweepResultRange"
					var Parameters = "(Collider collider, Vec3 velocity, real dt, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "velocity"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SystemLogicUpdate"
					var Description = "Updates every object in the space (integration, collision detection / resolution, etc...)."
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent updateEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "updateEvent"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToggleKinematic"
					var Description = "Toggles an object as being kinematic."
					var ReturnType = "Void"
					var Parameters = "(RigidBody body, Boolean kinematic)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "kinematic"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateKinematicState"
					var Description = "Clears the old values from all kinematic objects so it will be static the next frame."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateKinematicVelocities"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateModifiedResources"
					var Description = "Updates any modified resource (typically from script) that physics cares about."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePhysicsCars"
					var Description = "Updates all the physics cars. (needs to happen before resolution)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdatePhysicsCarsTransforms"
					var Description = "Updates the positions of the wheels for the cars. (Needs to happen after position integration)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateRegions"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateTransformAndMassOfTree"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "PhysicsNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WakeInactiveMovingBodies"
					var Description = "Checks all inactive objects to see if they should be woken up."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WhyAreTheyNotColliding"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PitchNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Changes the pitch and speed of audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "The pitch adjustment applied to the node's input. A value of 0 will not affect the sound's pitch; 1 will raise the pitch by an octave and speed up the sound, and -1 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound."
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "The pitch adjustment, in semitones (or half-steps), applied to the node's input. A value of 0 will not affect the sound's pitch; 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitchRatio, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitchRatio"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitchSemitones, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitchSemitones"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PluginEvent"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PointForceEffect"
			var BaseClass = "BasicPointEffect"
			var Library = "PhysicsLibrary"
			var Description = "A force effect who's direction and strength is based upon the distance from a central point. The direction of the force will always point to the center of the field, but the strength will vary depending on the min/max distance and strength values. Useful to make planetary force field like effects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PointGravityEffect"
			var BaseClass = "BasicPointEffect"
			var Library = "PhysicsLibrary"
			var Description = "A force effect that pulls an object towards a central point. This effect is identical to the PointForceEffect except it ignores the mass of the object. This means that all objects will accelerate at the same speed irrespective of their mass (just like gravity). This is useful to make planetary gravity or other similar effects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PositionJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Represents a ball and socket joint. A position joint constrains the two anchor points on each object to be equal. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on every axis (x,y,z) that the objects must be between. Motor: A motor will attempt to drive the translation in the positive direction on every axis. Spring: A spring will make the translation on every axis springy at the bounds."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PreSolveEvent"
			var BaseClass = "BaseCollisionEvent"
			var Library = "PhysicsLibrary"
			var Description = "Event sent out from collision groups with the PreSolve block type. This event is sent out after collision detection but before collision resolution. This can be used to slightly alter the state of the two objects in a collision before they're resolved (say turn one from static to dynamic). Warning: Do not delete objects or do any other significant changes as this may destabilize the system."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Block"
					var Type = "CollisionFilterBlock"
					var Description = ""
				}
				Property
				{
					var Name = "EventLink"
					var Type = "Link<PreSolveEvent>"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const Manifold manifold, CollisionFilterBlock preSolveBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "manifold"
							var Type = "const Manifold"
							var Description = ""
						}
						Parameter
						{
							var Name = "preSolveBlock"
							var Type = "CollisionFilterBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PrismaticJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A prismatic joint is used to create something similar to a piston. This joint fixes all degrees of rotation and leaves one linear axis free. Therefore, the bodies will rotate with each other and move with each other, except on one axis they can slide in and out. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJointTranslation"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PrismaticJoint2d"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A prismatic joint is used to create something similar to a piston. This is the 2d version of the prismatic joint. This joint is used in 2d mode for increased speed and stability. The slider axis is projected onto the z axis (the z component is ignored) so that the objects can be arbitrarily far apart. The x and y rotations are also ignored since the objects are only allowed to rotate about the z axis. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJointTranslation"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ProcessClass"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ProcessStartInfo"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ApplicationName"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "Arguments"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "MergeErrorIntoOut"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RedirectError"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RedirectIn"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RedirectOut"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "SearchPath"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ShowWindow"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "WorkingDirectory"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Property"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Getter"
					var Type = "Function"
					var Description = ""
				}
				Property
				{
					var Name = "Setter"
					var Type = "Function"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PropertyRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "PropertyRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Property"
					var Description = ""
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "PulleyJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A PulleyJoint turn two StickJoints into a pulley via a pulley ratio. A PulleyJoint connects the two free objects of two different stick joints. These two objects will then be bound to move together via the formula length0 + ratio * length1 = 0. Limits, motors and springs should not be used on a pulley."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "JointA"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "JointAPath"
					var Type = "CogPath"
					var Description = ""
				}
				Property
				{
					var Name = "JointB"
					var Type = "Cog"
					var Description = ""
				}
				Property
				{
					var Name = "JointBPath"
					var Type = "CogPath"
					var Description = ""
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The ratio between the two stick joints. The ratio is used in the formula length0 + ratio * length1 = 0."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindAndSetJoint"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Collider collider, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RelinkJoint"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index, Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SpecificJointRelink"
					var Description = "Used for a specific joint type (eg PulleyJoint ) to reject a relink. This is the last step that happens when relinking, after the joint has set valid to true/false."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Collider collider)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateJoints"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Quaternion"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Identity"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "W"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "XW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "YW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "ZW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Real4"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Random"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxInteger"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Seed"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RandomContext"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = "A random object that contains its own unique random state apart from all other instances of this class."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxInt"
					var Type = "Integer"
					var Description = "The max integer value that can be returned."
				}
				Property
				{
					var Name = "RandomSeed"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Seed"
					var Type = "Integer"
					var Description = "Seeds the the random number generator."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BellCurve"
					var Description = "Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BellCurveDistribution"
					var Description = "Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation."
					var ReturnType = "Real"
					var Parameters = "(Real center, Real range, Real standardDeviation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "center"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "range"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "standardDeviation"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BellCurveRange"
					var Description = "Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1."
					var ReturnType = "Real"
					var Parameters = "(Real center, Real range)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "center"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "range"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Bool"
					var Description = "Returns a random bool value."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CoinFlip"
					var Description = "Returns true if the coin flips heads."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DieRoll"
					var Description = "Randomly rolls a number in the range [1, sides]."
					var ReturnType = "Integer"
					var Parameters = "(Integer sides)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sides"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DoubleRange"
					var Description = "A random float in the range [min,max]."
					var ReturnType = "double"
					var Parameters = "(double min, double max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "double"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "double"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DoubleReal"
					var Description = "Returns a random double real in the range [0,1]."
					var ReturnType = "double"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DoubleRealVariance"
					var Description = "Returns a double real in the range [base - variance, base + variance]."
					var ReturnType = "double"
					var Parameters = "(double base, double variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "double"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "double"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Float"
					var Description = "Returns a random float in the range [0,1]."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FloatVariance"
					var Description = "Returns a float in the range [base - variance, base + variance]."
					var ReturnType = "Real"
					var Parameters = "(Real base, Real variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Int"
					var Description = "Returns a random int in the range of [0, MaxInt]."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IntVariance"
					var Description = "Int in the range [base - variance, base + variance]."
					var ReturnType = "Integer"
					var Parameters = "(Integer base, Integer variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Probability"
					var Description = "Takes a given probability that we get a true value."
					var ReturnType = "Boolean"
					var Parameters = "(Real probOfTrue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "probOfTrue"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Quaternion"
					var Description = "Random unit length quaternion. This is also a unit quaternion."
					var ReturnType = "Quat"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Range"
					var Description = "A random float in the range [min,max]."
					var ReturnType = "Real"
					var Parameters = "(Real min, Real max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RangeExclusiveMax"
					var Description = "Int in the range [min, max)"
					var ReturnType = "Integer"
					var Parameters = "(Integer min, Integer max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RangeInclusiveMax"
					var Description = "Int in the range [min, max]."
					var ReturnType = "Integer"
					var Parameters = "(Integer min, Integer max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Real"
					var Description = "Returns a random real in the range [0,1]."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RealVariance"
					var Description = "Returns a real in the range [base - variance, base + variance]."
					var ReturnType = "Real"
					var Parameters = "(Real base, Real variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Rotation"
					var Description = "Random rotation quaternion. This is the same as calling Quaternion()"
					var ReturnType = "Quat"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnitVector2"
					var Description = "Generates a unit length Vec2."
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnitVector3"
					var Description = "Generates a unit length Vec3."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Vector2"
					var Description = "Randomly generates a Vec2 with its length between min and max."
					var ReturnType = "Vec2"
					var Parameters = "(Real minLength, Real maxLength)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "minLength"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxLength"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Vector3"
					var Description = "Randomly generates a Vec3 with its length between min and max."
					var ReturnType = "Vec3"
					var Parameters = "(Real minLength, Real maxLength)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "minLength"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxLength"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Reactive"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = "Reactive component allows the object to react to mouse events. Uses the collision volume of the collider on this composition for picking."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnLeftMouseDown"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MouseEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "MouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnLeftMouseUp"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MouseEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "MouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMiddleMouseDown"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MouseEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "MouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMiddleMouseUp"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MouseEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "MouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnRightMouseDown"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MouseEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "MouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnRightMouseUp"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MouseEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "MouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ReactiveSpace"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Over"
					var Type = "Cog"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real2"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real2x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real2x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real2x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real3x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real3x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real3x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M23"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "W"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "WAxis"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "WZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "WZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "X"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "XZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "XZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "XZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Y"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "YZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "YZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "YZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Z"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZW"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZWW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZWZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZX"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZXW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZXZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZY"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZYW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZYZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZ"
					var Type = "Real2"
					var Description = ""
				}
				Property
				{
					var Name = "ZZW"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZWZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZX"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZXZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZY"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZYZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZ"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZW"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZX"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZY"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "ZZZZ"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real4"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real4x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real4x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M32"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Real4x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M03"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M13"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M23"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M30"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M31"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M32"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "M33"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RecordingNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Records audio generated by its input SoundNodes into a WAV file."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FileName"
					var Type = "string"
					var Description = "The name of the output file that will be created, including the full path. Do not include the file extension."
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "When true, recording is paused, and can be resumed by setting to false."
				}
				Property
				{
					var Name = "StreamToDisk"
					var Type = "Boolean"
					var Description = "When false, audio data will be saved in a buffer and written to the file when StopRecording is called. When true, data will be written to the file constantly during every update frame, and nothing will be saved."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "StartRecording"
					var Description = "Starts writing all audio input to a file."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StopRecording"
					var Description = "Stops writing data and closes the file."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ReflectionObject"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Region"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Regions are used to logically turn collision volumes (a collider) into trigger volume or a region for physics effects. Any effects attached to a cog with a Region will be applied to whatever is in contact with this region."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WakeUpOnEffectChange"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddEffect"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "RegionContactRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyEffects"
					var Description = "Helper to apply effects to a body."
					var ReturnType = "Void"
					var Parameters = "(RigidBody body, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "body"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchEvent"
					var Description = "Dispatches an event to all objects in the region."
					var ReturnType = "Void"
					var Parameters = "(string eventId, Event toSend)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "toSend"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveEffect"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = "Applies effects to all of the objects in the region."
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WakeUpAll"
					var Description = "Wakes up all bodies in contact with this region (so effects will take affect)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RegisterCppNetProperties"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Dispatched while adding C++ component net properties to a NetObject ."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Resource"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Base Resource class."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = "Name of resource for display."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddReference"
					var Description = "Reference counting."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddTags"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HashSet<string> tags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "tags"
							var Type = "HashSet<string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CanReference"
					var Description = "Can this resource hold a reference to the given resource. Checks resource library dependencies to see if the given resource is in a dependent (parent) library."
					var ReturnType = "Boolean"
					var Parameters = "(Resource resource)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "resource"
							var Type = "Resource"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBaseResource"
					var Description = "Returns the base Resource that this Resource inherited form."
					var ReturnType = "Resource"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBaseResources"
					var Description = ""
					var ReturnType = "InheritRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDataTree"
					var Description = ""
					var ReturnType = "DataNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDependencies"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HashSet<ContentItem> dependencies, HandleParam instance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dependencies"
							var Type = "HashSet<ContentItem>"
							var Description = ""
						}
						Parameter
						{
							var Name = "instance"
							var Type = "HandleParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetEditType"
					var Description = "How this resource is edited."
					var ReturnType = "Type"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetManager"
					var Description = "Resource Manager for this resource."
					var ReturnType = "ResourceManager"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNameOrFilePath"
					var Description = "Gets the name of the resource (or the contents file path if we have it)"
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetReferenceCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetResourceTemplate"
					var Description = ""
					var ReturnType = "ResourceTemplate"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTags"
					var Description = "Fills the given array with all tags associated with this resource."
					var ReturnType = "Void"
					var Parameters = "(Array<string> coreTags, Array<string> userTags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "coreTags"
							var Type = "Array<string>"
							var Description = ""
						}
						Parameter
						{
							var Name = "userTags"
							var Type = "Array<string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTags"
					var Description = "Fills the given array with all tags associated with this resource."
					var ReturnType = "Void"
					var Parameters = "(Array<string> tags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "tags"
							var Type = "Array<string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTags"
					var Description = "Fills the given array with all tags associated with this resource."
					var ReturnType = "Void"
					var Parameters = "(HashSet<string> tags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "tags"
							var Type = "HashSet<string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasTag"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringParam tag)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "tag"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InheritsFrom"
					var Description = "Returns whether or not this Resource inherits from the given base Resource ."
					var ReturnType = "Boolean"
					var Parameters = "(Resource baseResource)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "baseResource"
							var Type = "Resource"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsRuntime"
					var Description = "Is the resource marked as runtime?"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsWritable"
					var Description = "Can this resource be saved?"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Release"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResourceModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Save"
					var Description = "Save the content item to the given file."
					var ReturnType = "Void"
					var Parameters = "(string filename)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filename"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = "Set the resource to default values."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unload"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateContentItem"
					var Description = "Called when a content item is added to the resource."
					var ReturnType = "Void"
					var Parameters = "(ContentItem contentItem)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "contentItem"
							var Type = "ContentItem"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "Resource"
					var Parameters = "(const Resource source)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "const Resource"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ResourceTable"
			var BaseClass = "DataResource"
			var Library = "EngineLibrary"
			var Description = "A table of resources (or strings) that can be indexed, searched by name or sampled randomly. The table can be sampled to return a string or a resource pointer. If other info about the sampled value is needed, the table can be sampled for an index that can then be used to fetch the name, value, resource and weight at that index. This index can also be used to randomly sample arrays that are created along-side this resource."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ResourceTableEntryRange"
					var Description = "Range to iterate over all entries."
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "How many items are stored in the table."
				}
				Property
				{
					var Name = "MaxWeight"
					var Type = "Real"
					var Description = "The maximum probability weight value that can be stored in the table. Setting this will clamp all weight values."
				}
				Property
				{
					var Name = "ResourceType"
					var Type = "string"
					var Description = "The kind of resource contained in this table. This is either a resource type or \"String\"."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddNewEntry"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const ValueType name, const ValueType value, const WeightType prob)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "const ValueType"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "const ValueType"
							var Description = ""
						}
						Parameter
						{
							var Name = "prob"
							var Type = "const WeightType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddNewEntry"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddOrError"
					var Description = "Add the given entry. If another entry with the same name exists then an error is thrown."
					var ReturnType = "Void"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddOrIgnore"
					var Description = "Add the given entry. If another entry with the same name exists then no operation is performed."
					var ReturnType = "Boolean"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddOrOverwrite"
					var Description = "Add the given entry. If another entry with the same name exists then it is overwritten."
					var ReturnType = "Boolean"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BuildIfOutOfDate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clear all items in the table."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "HandleOf<Resource>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Contains"
					var Description = "Returns if the given key is contained."
					var ReturnType = "Boolean"
					var Parameters = "(StringParam key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CopyTo"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ResourceTable destination)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "destination"
							var Type = "ResourceTable"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = ""
					var ReturnType = "HandleOf<ResourceTable>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceRebuild"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Get"
					var Description = "Access an item at the given index."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Get"
					var Description = "Hash-Set interface. Gets/Sets the item with the same name as the entry."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Get"
					var Description = "Hash-Map interface. Gets/Sets the via the provided key."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(StringParam key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOrDefault"
					var Description = "Returns the entry associated with the given key. If no entry matches the key then the provided default is returned."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(StringParam key, ResourceTableEntry defaultValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "defaultValue"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOrError"
					var Description = "Returns the entry associated with the given key. If no entry matches the key then an exception is thrown."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(StringParam key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetOrNull"
					var Description = "Returns the entry associated with the given key. If no entry matches the null is returned."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(StringParam key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetResource"
					var Description = ""
					var ReturnType = "Resource"
					var Parameters = "(StringParam resourceIdName, ResourceNotFound notFoundMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "resourceIdName"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "notFoundMode"
							var Type = "ResourceNotFound"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildMap"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildTable"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = "Removes the item at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveOrError"
					var Description = "Removes the entry associated with the given key. If no entry matches an exception is thrown."
					var ReturnType = "Void"
					var Parameters = "(StringParam key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveOrIgnore"
					var Description = "Removes the entry associated with the given key. If no entry matches then no operation is performed."
					var ReturnType = "Boolean"
					var Parameters = "(StringParam key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = ""
					var ReturnType = "HandleOf<ResourceTable>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Sample"
					var Description = "Samples the table to return a random entry. Takes two (different) random floats from [0,1) in order to sample. Returns an empty string if the table is empty."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(Real random1, Real random2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "random1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "random2"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Sample"
					var Description = "Samples the table to return a random entry given a random context."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(RandomContext random)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "random"
							var Type = "RandomContext"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleIndex"
					var Description = "Samples the table to return a random index into the table. Takes two (different) random floats from [0,1) in order to sample."
					var ReturnType = "Integer"
					var Parameters = "(Real random1, Real random2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "random1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "random2"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleIndex"
					var Description = "Samples the table to return a random index into the table given a random context."
					var ReturnType = "Integer"
					var Parameters = "(RandomContext random)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "random"
							var Type = "RandomContext"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringParam key, ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index, ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetOutOfDate"
					var Description = "Mark the table as having changes that need to be processed on the next sample."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Size"
					var Description = "How many items are stored in the table."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateEntries"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateEntry"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateEntryType"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(ResourceTableEntry entry, Boolean throwException)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
						Parameter
						{
							var Name = "throwException"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator[]"
					var Description = ""
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ReverbNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a simple reverb filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = "The length of the reverb tail, in seconds. The default value is 0.1."
				}
				Property
				{
					var Name = "WetPercent"
					var Type = "Real"
					var Description = "The percentage of the node's output which has the reverb filter applied to it. Setting this property to 0 will stop all reverb calculations. The default value is 50.0."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateWetPercent"
					var Description = "Interpolates the WetPercent property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real percent, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "percent"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RevoluteJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A revolute joint is used to create a wheel or a hinge. A revolute joint bring the two locally defined axes together and allows free rotation on only that axis. This axis is also where the motor is applied. The two axes that are orthogonal to the motor axis have their rotation locked (objects rotate together unless on the motor axis). Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "UseBasisA"
					var Type = "Boolean"
					var Description = "Should the default basis of the constraint be object A or B? This determines which object's world axis is used when constructing the basis for the constraint. In the case of a dynamic and static object, the static object is generally the better choice. As a general rule of thumb, it should be the heavier/most important object."
				}
				Property
				{
					var Name = "WorldBasis"
					var Type = "Quaternion"
					var Description = "The basis of the joint in world-space. This basis will come from object A's frame if UseBasisA is true, otherwise this will come from B. The basis is constructed such that the x-axis is the primary axis while the z-axis is the hinge axis."
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BuildFrameFromAxis"
					var Description = ""
					var ReturnType = "Quat"
					var Parameters = "(QuatParam oldWorldFrame, Vec3 axis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldWorldFrame"
							var Type = "QuatParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "axis"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = "Used to detect when motors/limits/springs are added dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJointAngle"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldAxis"
					var Description = "The axis of freedom for the joint in world space. This is the axis that rotational movement is allowed on. Which object's axis is used to compute this is determined by UseFrameA. : Remove later."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetBodyAxisInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer objIndex, Vec3 axis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "objIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "axis"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldAxis"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 axis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "axis"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldFrame"
					var Description = "Used to set the entire frame in world space for this joint. The x and y axes are used as a basis for limiting the joint. The x axis is at angle 0 and the y axis is at angle 90. The z axis is the axis of rotational freedom. : Remove later."
					var ReturnType = "Void"
					var Parameters = "(QuatParam rot)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rot"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RevoluteJoint2d"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A revolute joint is used to create a wheel or a hinge. This is the 2d version of the revolute joint. This joint is used in 2d mode for increased speed and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate upon. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = "Used to detect when motors/limits/springs are added dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetJointAngle"
					var Description = ""
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldAxis"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RigidBody"
			var BaseClass = "BaseRigidBody"
			var Library = "PhysicsLibrary"
			var Description = "The RigidBody defines the dynamics of an object. A body defines the mass properties and movement of an object. Without a RigidBody , an object will be static. Any effects attached to a RigidBody without a region will be applied to the body directly."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllowSleep"
					var Type = "Boolean"
					var Description = "Sleeping happens when an object has not \"moved\" (small enough linear + angular velocity) for long enough. If this happens then the physics engine can stop updating this object (integration, collision detection, etc...) until something not asleep hits it. Sleeping is purely an optimization. Sometimes it is not desirable for a body to ever fall asleep (such as a player) so this behavior can be overridden."
				}
				Property
				{
					var Name = "AngularVelocity"
					var Type = "Real3"
					var Description = "The angular velocity of the object in world space. Max bounds are around 1e+10, after this the angular velocity will be capped."
				}
				Property
				{
					var Name = "Asleep"
					var Type = "Boolean"
					var Description = "Whether or not this object is currently asleep. Setting this to true will force the object asleep even if this causes invalid behavior (objects floating)."
				}
				Property
				{
					var Name = "DynamicState"
					var Type = "RigidBodyDynamicState"
					var Description = "How this rigid body handles dynamics. Is it a regular rigid body (dynamic)? Does it not move (static)? Does the user want to manually move it and have objects properly collide with it (kinematic)? Note: Static vs. static don't check collision."
				}
				Property
				{
					var Name = "Force"
					var Type = "Real3"
					var Description = "The total accumulated force (in world space) that is being applied to the center of mass of this rigid body this frame."
				}
				Property
				{
					var Name = "LocalInverseInertiaTensor"
					var Type = "Real3x3"
					var Description = "The inverse inertia tensor in local space of this body. The local space inertia tensor doesn't change when the object rotates but is not typically useful for any calculations other than computing the world-space inverse inertia tensor."
				}
				Property
				{
					var Name = "Mass"
					var Type = "Real"
					var Description = "The current mass of the rigid body. This includes all child colliders belonging to this body."
				}
				Property
				{
					var Name = "Mode2D"
					var Type = "Mode2DStates"
					var Description = "Used to make an object act as if it were 2D. This is done by locking it to the current z plane and only allowing rotation around the world's z axis. This object can be translated and rotated manually. The object can be set to always be 2D or 3D, or it can choose to inherit the setting that the space currently has."
				}
				Property
				{
					var Name = "RotationLocked"
					var Type = "Boolean"
					var Description = "Used to make it so an object cannot rotate from physics. The rotation can still be manually changed."
				}
				Property
				{
					var Name = "Torque"
					var Type = "Real3"
					var Description = "The total accumulated torque (in world space) that is being applied to the center of mass of this rigid body this frame."
				}
				Property
				{
					var Name = "Velocity"
					var Type = "Real3"
					var Description = "The velocity of the object in world space. Max bounds are around 1e+10, after this the velocity will be capped."
				}
				Property
				{
					var Name = "WorldCenterOfMass"
					var Type = "Real3"
					var Description = "The position of the center of mass in world space."
				}
				Property
				{
					var Name = "WorldInverseInertiaTensor"
					var Type = "Real3x3"
					var Description = "The inverse inertia tensor in world space of this body. Describes how hard it is to rotate an object about the world-space axes. Useful to convert any torque into an angular velocity."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddBodyEffect"
					var Description = "Adds an effect to be applied to this body."
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyAngularImpulse"
					var Description = "Applies an angular impulse through the center of mass (world space). Only results in a change of angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Vec3 angular)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angular"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyAngularVelocity"
					var Description = "Adds to the current angular velocity. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Vec3 angular)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angular"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyConstraintImpulse"
					var Description = "Applies a linear and angular impulse. Used in solving constraints."
					var ReturnType = "Void"
					var Parameters = "(Vec3 linear, Vec3 angular)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "linear"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "angular"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyForce"
					var Description = "Applies a force through the center of mass of the body. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Vec3 force)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "force"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyForceAtOffsetVector"
					var Description = "Applies a force (world space) at an offset from the center of mass. Results in a force and torque to the center of mass."
					var ReturnType = "Void"
					var Parameters = "(Vec3 force, Vec3 worldR)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "force"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldR"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyForceAtPoint"
					var Description = "Applies a force (world space) at a point on an object. Results in a force and torque to the center of mass."
					var ReturnType = "Void"
					var Parameters = "(Vec3 force, Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "force"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyImpulseAtOffsetVector"
					var Description = "Applies an impulse (world space) at a point on the object. Results in a change in linear and angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Vec3 impulse, Vec3 worldR)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "impulse"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldR"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyImpulseAtPoint"
					var Description = "Applies an impulse to the object at a world space point. Results in a change to linear and angular velocity. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Vec3 impulse, Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "impulse"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyLinearImpulse"
					var Description = "Applies a linear impulse through the center of mass (world space). Only results in a change of linear velocity."
					var ReturnType = "Void"
					var Parameters = "(Vec3 linear)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "linear"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyLinearVelocity"
					var Description = "Adds to the current linear velocity. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Vec3 linear)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "linear"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyTorque"
					var Description = "Applies a torque through the center of mass of the body. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Vec3 torque)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "torque"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyVelocityAtPoint"
					var Description = "Applies a velocity at a world space point on the object. Results in a change to linear and angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Vec3 velocity, Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "velocity"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClampVelocityValue"
					var Description = "Helper function to clamp linear/angular velocity."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 value, StringParam varName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "varName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClearMassAndVelocities"
					var Description = "Clear all mass and velocity terms to 0. Used when switching to static/kinematic states."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeVelocities"
					var Description = "Compute the delta velocities to get from the passed translation and rotation to the current ones."
					var ReturnType = "Void"
					var Parameters = "(Vec3 oldTranslation, Mat3Param oldRotation, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldTranslation"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "oldRotation"
							var Type = "Mat3Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceAsleep"
					var Description = "Forces the object asleep. Will wake if anything hits it or if it is in contact with any non-asleep objects. Warning: calling this function could create gameplay flaws if used incorrectly, use at your own risk (and sparingly)."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceAwake"
					var Description = "Forces the object awake. Will reset the sleep timer."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GenerateIntegrationUpdate"
					var Description = "Generates an integration update for all of the colliders of this body."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetActiveBody"
					var Description = "If this is a static body then the active body (the one force/velocity should be applied to or calculated from) is the nearest parent body up the hierarchy that is not static. If one isn't found then this returns the current rigid body (this)."
					var ReturnType = "RigidBody"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetColliders"
					var Description = "Returns all colliders that are owned by this rigid body. This is all colliders at or below the rigid body's level in the hierarchy, including all colliders under static/kinematic bodies. This is basically the full list of colliders that affect this body's velocity/mass/etc..."
					var ReturnType = "range"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetKinematic"
					var Description = "Kinematic objects are static objects that can be moved during runtime. Kinematics will correctly deal with position change during collisions by approximating the linear and angular velocity from the transform changes."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPointVelocity"
					var Description = "Computes the linear velocity of a point on the body."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPointVelocityInternal"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetStatic"
					var Description = "Static objects cannot be moved by collisions, forces or velocity changes. This is a more efficient way of changing an object between static and dynamic during runtime. Static objects should not be moved during runtime as they will not correctly account for their position change when colliding with objects."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldMatrix"
					var Description = "The full local-to-world transform of this rigid body."
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldRotationMat3"
					var Description = "The cached local-to-world rotation matrix of this rigid body (even if static/kinematic)."
					var ReturnType = "Mat3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldRotationQuat"
					var Description = "The cached local-to-world rotation quaternion of this rigid body (even if static/kinematic). Mostly used for integration."
					var ReturnType = "Quat"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldTranslation"
					var Description = "The cached world-space translation of this rigid body."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalGetWorldCenterOfMass"
					var Description = "Recompute the mass, inertia, and world inertia of this body. Internal function that doesn't check the modified state (otherwise infinite loops can happen)."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalRecomputeOrientation"
					var Description = "Shared logic when updating orientation (assumes mRotationQuat was already set and normalized). This will update the cached world transform matrix and re-compute the world translation."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalWakeUp"
					var Description = "The shared functionality between ForceAwake and WakeUp."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsDynamic"
					var Description = "Returns if the object is dynamic (not static or kinematic)"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsInitialized"
					var Description = "Has this body already started initialization (aka, we have a physics space). Used to deal with setters during serialization that require updating the physics space."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PublishTransform"
					var Description = "Set the transform values from the current cached body-to-world values."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PutToSleep"
					var Description = "Sleeps the object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "QueueMassUpdate"
					var Description = "Queue up this body (and all necessary parents) for a mass update."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RecomputeAllMassTerms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RecomputeCenterMass"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RecomputeInertiaTensor"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveBodyEffect"
					var Description = "Removes an effect from being applied to this body."
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffect effect)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effect"
							var Type = "PhysicsEffect"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Rotate"
					var Description = "Applies a rotation to the rigid body."
					var ReturnType = "Void"
					var Parameters = "(QuatParam rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rotation"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set2DInternal"
					var Description = "Internal helper that actually sets state associated with 2d mode and doesn't worry about the inheritance of the space's 2d mode."
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetAxisLock"
					var Description = "Sets the allowed local-space axes that an object can rotate about."
					var ReturnType = "Void"
					var Parameters = "(Boolean xAxis, Boolean yAxis, Boolean zAxis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "xAxis"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "yAxis"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "zAxis"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetInverseMass"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(real invMass)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "invMass"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetRotationLockedInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateBodyEffects"
					var Description = "Apply all of the effects on this body to the passed in body. If the passed in body is null this will apply to the current body. An extra body must be passed in to properly deal with child static/kinematic bodies."
					var ReturnType = "Void"
					var Parameters = "(real dt, RigidBody rootBody)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "rootBody"
							var Type = "RigidBody"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateCenterMass"
					var Description = "Updates the Rigid Body's center of mass by an offset vector. Also updates the cached world transform data."
					var ReturnType = "Void"
					var Parameters = "(Vec3 offset)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "offset"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateCenterMassFromWorldPosition"
					var Description = "Use the stored offset from the center of mass to the translation of the cog to recompute where the center of mass is relative to the translation. Normally the center of mass updates the translation but if a user translates this body we need to shift the center of mass based upon the translation performed."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateKinematicVelocities"
					var Description = "Recompute kinematic velocities from any translations that have happened."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateMode2D"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateOrientation"
					var Description = "Updates the Rigid Body's orientation by an offset vector (from integration, this does a small angle approximation). This updates the body's cached world transform data as we not only rotate but the position might be rotating about the center of mass."
					var ReturnType = "Void"
					var Parameters = "(QuatParam offset)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "offset"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateResourcesAndQueue"
					var Description = "Force update any modified resources and update the physics queue state."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateSleepTimer"
					var Description = "Updates the objects sleep state."
					var ReturnType = "Boolean"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateWorldInertiaTensor"
					var Description = "Recomputes the world-space inertia tensor for this body."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WakeUp"
					var Description = "Wakes the object up. Does not reset the sleep timer, meaning it will go to sleep instantly if it is not moving."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Rune"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Value"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "RuneParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "RuneParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "RuneParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "RuneParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator>"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "RuneParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator>"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator>="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "RuneParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator>="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "RuneIterator"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "RuneIterator"
					var Description = ""
				}
				Property
				{
					var Name = "ByteIndex"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Rune"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "OriginalString"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ScaleGizmo"
			var BaseClass = ""
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SnapDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SnapMode"
					var Type = "GizmoSnapMode"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnGizmoModified"
					var Description = "As the gizmo is being dragged, we want to update all objects."
					var ReturnType = "Void"
					var Parameters = "(GizmoUpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "GizmoUpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMouseDragStart"
					var Description = "Record where a gizmo drag began."
					var ReturnType = "Void"
					var Parameters = "(ViewportMouseEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "ViewportMouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SelectionIcon"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Material"
					var Type = "Material"
					var Description = ""
				}
				Property
				{
					var Name = "OverrideSelections"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ShaderInputs"
					var Type = "ShaderInputs"
					var Description = ""
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = ""
				}
				Property
				{
					var Name = "ViewScale"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "VisibilityEvents"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Visible"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddToSpace"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMaterial"
					var Description = ""
					var ReturnType = "Material"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRadius"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Camera camera)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetRadius"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(ViewBlock viewBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWorldTranslation"
					var Description = ""
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MidPhaseQuery"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Array<GraphicalEntry> entries, Camera camera, Frustum frustum)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entries"
							var Type = "Array<GraphicalEntry>"
							var Description = ""
						}
						Parameter
						{
							var Name = "camera"
							var Type = "Camera"
							var Description = ""
						}
						Parameter
						{
							var Name = "frustum"
							var Type = "Frustum"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetSelectionFlag"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean selectionLimited)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "selectionLimited"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestFrustum"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const Frustum frustum, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frustum"
							var Type = "const Frustum"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestRay"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(GraphicsRayCast rayCast, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rayCast"
							var Type = "GraphicsRayCast"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SendableEvent"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "This event can be sent over the network."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Connection"
					var Type = "const ConnectionData"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Delete"
					var Description = "Because the event could be implemented in scripting, it needs to know how to destroy itself The standard method is to call delete on its own this pointer."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Load"
					var Description = "Read an event from a stream."
					var ReturnType = "SendableEvent"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Save"
					var Description = "Write an event to a stream."
					var ReturnType = "Void"
					var Parameters = "(SendableEvent event, Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Serialization of the event."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SimpleAnimation"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Plays a single animation on Initialize."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Animation"
					var Type = "Animation"
					var Description = "Animation getter/setter."
				}
				Property
				{
					var Name = "PlayMode"
					var Type = "AnimationPlayMode"
					var Description = "Play mode getter/setter."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ChainAnimation"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CrossBlend"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, Real transitionTime, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "transitionTime"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DirectBlend"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, Real transitionTime, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "transitionTime"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayIsolatedAnimation"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, Cog rootBone, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "rootBone"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlaySingle"
					var Description = "Play animations directly."
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SimpleGizmoBase"
			var BaseClass = ""
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "DrawOnTop"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "HoverColor"
					var Type = "Real4"
					var Description = ""
				}
				Property
				{
					var Name = "MouseInput"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "PickingPriority"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "UseParentAsViewScaleOrigin"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SimpleSound"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Plays a specified SoundCue , either when created or when the Play method is called."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Cue"
					var Type = "SoundCue"
					var Description = ""
				}
				Property
				{
					var Name = "IsPlaying"
					var Type = "Boolean"
					var Description = "Will be true if the SoundCue is currently being played."
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this Property to true will pause a currently playing SoundCue . Setting it to false will resume playback."
				}
				Property
				{
					var Name = "Positional"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "StartPlaying"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Play"
					var Description = "Begins playing the SoundCue chosen in the Cue property and returns the resulting SoundInstance . If already playing it will be stopped and re-started."
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Stop"
					var Description = "Stops a currently playing SoundInstance if it exists."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Skeleton"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Bones"
					var Type = "Array<BoneInfo>"
					var Description = ""
				}
				Property
				{
					var Name = "CachedTransformRange"
					var Type = "IndexRange"
					var Description = ""
				}
				Property
				{
					var Name = "CachedVersion"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "NameMap"
					var Type = "HashMap<string,Integer>"
					var Description = ""
				}
				Property
				{
					var Name = "NeedsRebuild"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Transform"
					var Type = "Transform"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BuildSkeleton"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "BuildSkeletonRecursive"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, Integer parentIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "parentIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDrawBone"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(BoneInfo boneInfo, Boolean highlight)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "boneInfo"
							var Type = "BoneInfo"
							var Description = ""
						}
						Parameter
						{
							var Name = "highlight"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDrawSkeleton"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringParam boneName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "boneName"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDrawSkeleton"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Array<string> boneNames)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "boneNames"
							var Type = "Array<string>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBoneRadius"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(BoneInfo boneInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "boneInfo"
							var Type = "BoneInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetBoneTransforms"
					var Description = ""
					var ReturnType = "IndexRange"
					var Parameters = "(Array<Mat4> skinningBuffer, Integer version)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "skinningBuffer"
							var Type = "Array<Mat4>"
							var Description = ""
						}
						Parameter
						{
							var Name = "version"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MarkModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnUpdateSkeletons"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestRay"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(GraphicsRayCast raycast)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "raycast"
							var Type = "GraphicsRayCast"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SkinnedModel"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Renders a mesh using the transform hierarchy of a Skeleton to apply skinning."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "Mesh"
					var Description = "Mesh that the graphical will render."
				}
				Property
				{
					var Name = "SkeletonPath"
					var Type = "CogPath"
					var Description = "Path to an object with a Skeleton component that will be used for skinning."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMeshModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ResourceEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "ResourceEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSkeletonComponentsChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSkeletonDestroyed"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSkeletonModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnSkeletonPathChanged"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogPathEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "CogPathEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TestRay"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(GraphicsRayCast rayCast, CastInfo castInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rayCast"
							var Type = "GraphicsRayCast"
							var Description = ""
						}
						Parameter
						{
							var Name = "castInfo"
							var Type = "CastInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateBoneIndexRemap"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Sound"
			var BaseClass = "Resource"
			var Library = "SoundLibrary"
			var Description = "The resource for a single audio file."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Channels"
					var Type = "Integer"
					var Description = "The number of audio channels in the file."
				}
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = "The length of the audio file, in seconds."
				}
				Property
				{
					var Name = "SampleCount"
					var Type = "Integer"
					var Description = "The total number of audio samples in the file."
				}
				Property
				{
					var Name = "SampleRate"
					var Type = "Integer"
					var Description = "The samples per second rate used by the audio file."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateAsset"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Status status, string assetName, string fileName, Boolean streaming)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "status"
							var Type = "Status"
							var Description = ""
						}
						Parameter
						{
							var Name = "assetName"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "fileName"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "streaming"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetFormat"
					var Description = "This is the file format used for the audio file."
					var ReturnType = "AudioFileFormats"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetStreaming"
					var Description = "This will be true if the audio file is set to stream from disk."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundAttenuator"
			var BaseClass = "DataResource"
			var Library = "SoundLibrary"
			var Description = "Decreases a positional sound's volume as the SoundEmitter gets further away from a SoundListener ."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FalloffCurve"
					var Type = "SampleCurve"
					var Description = "The SampleCurve resource to use as the attenuation's falloff curve. It will be normalized and stretched to fit between the StartDistance and StopDistance values."
				}
				Property
				{
					var Name = "FalloffCurveType"
					var Type = "FalloffCurveType"
					var Description = "The type of curve used to reduce the sound's volume over distance. The default is a logarithmic curve which mimics the real world (volume drops quickly at the start, then slowly). Other options are Linear, Squared (slow then linear), Sine (linear then slow), SquareRoot (quick then linear), or Custom."
				}
				Property
				{
					var Name = "LowPassCutoffFreq"
					var Type = "Real"
					var Description = "The lowest cutoff frequency of the low pass filter, reached at the StopDistance. The cutoff frequency will be interpolated logarithmically from 15000.00 (a value with very little effect on the sound) to the LowPassCutoffFreq between the LowPassStartDistance and the StopDistance."
				}
				Property
				{
					var Name = "LowPassStartDistance"
					var Type = "Real"
					var Description = "The distance at which the low pass filter begins to take effect."
				}
				Property
				{
					var Name = "MinAttenuatedVolume"
					var Type = "Real"
					var Description = "The lowest volume that the attenuation will reach. If set above 0, the sound will continue to be heard at all distances."
				}
				Property
				{
					var Name = "StartDistance"
					var Type = "Real"
					var Description = "The distance from a SoundListener at which the sound's volume begins attenuating. At shorter distances the volume will not be changed."
				}
				Property
				{
					var Name = "StopDistance"
					var Type = "Real"
					var Description = "The distance at which the attenuation reaches the minimum volume. No volume changes will happen past this distance."
				}
				Property
				{
					var Name = "UseLowPassFilter"
					var Type = "Boolean"
					var Description = "If true, a low pass filter will be applied to the sound after reaching a specified distance, mimicking the way sound is muffled with distance in real life. The filter begins at the LowPassStartDistance and interpolates its cutoff frequency logarithmically until the StopDistance. The filter will not change past the StopDistance."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetAttenuationNode"
					var Description = ""
					var ReturnType = "SoundAttenuatorNode"
					var Parameters = "(string name, unsigned ID)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "ID"
							var Type = "unsigned"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HasInput"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAttenuationNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SoundAttenuatorNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundAttenuatorNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer serializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "serializer"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unload"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateCurve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundBuffer"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = "Used with a CustomAudioNode to play audio data directly."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SampleCount"
					var Type = "Integer"
					var Description = "The number of samples currently in the buffer."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddSampleToBuffer"
					var Description = "Adds a new audio sample to the end of the buffer."
					var ReturnType = "Void"
					var Parameters = "(Real sample)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sample"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetChannels"
					var Description = "The number of audio channels in the buffer."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSampleAtIndex"
					var Description = "Returns the sample at a specific index from the beginning of the buffer."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSampleRate"
					var Description = "The sample rate of the audio in the buffer."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Reset"
					var Description = "Removes all data from the buffer and resets it."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetChannels"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer numChannels)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "numChannels"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetSampleRate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer sampleRate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sampleRate"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundCue"
			var BaseClass = "DataResource"
			var Library = "SoundLibrary"
			var Description = "Settings and Sounds for playing audio files."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Attenuator"
					var Type = "SoundAttenuator"
					var Description = "If a SoundAttenuator resource is selected, it will be applied to reduce the sound's volume with distance when played through a SoundEmitter . If DefaultNoAttenuation is selected on the SoundCue and a different SoundAttenuator is selected on the SoundEmitter , the SoundEmitter's settings will be applied. If DefaultNoAttenuation is selected on both the sound will not be attenuated."
				}
				Property
				{
					var Name = "BeatsPerMinute"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "DecibelVariation"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other)."
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "This property affects both the pitch and speed of the sound played by the SoundCue . A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,."
				}
				Property
				{
					var Name = "PitchVariation"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "PlayMode"
					var Type = "SoundPlayMode"
					var Description = "If Single is chosen the SoundInstance created by the SoundCue will be played once and will stop when it reaches its EndTime. If Looping is chosen the SoundInstance will play continuously until either it is stopped or its Looping property is set to false."
				}
				Property
				{
					var Name = "SelectMode"
					var Type = "SoundSelectMode"
					var Description = "If Random is chosen the SoundCue will randomly choose which SoundEntry to play. If Sequential is chosen it will play the SoundEntries in order."
				}
				Property
				{
					var Name = "SemitoneVariation"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "This property, specified in semitones (or half-steps), affects both the pitch and speed of the sound played by the SoundCue . A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other)."
				}
				Property
				{
					var Name = "ShowMusicOptions"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "SoundTags"
					var Type = "Array<SoundTagEntry>"
					var Description = ""
				}
				Property
				{
					var Name = "Sounds"
					var Type = "Array<SoundEntry>"
					var Description = ""
				}
				Property
				{
					var Name = "TimeSigBeats"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "TimeSigValue"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "UseDecibelVariation"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "UseSemitoneVariation"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment that will be applied to the sound when it plays. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other)."
				}
				Property
				{
					var Name = "VolumeVariation"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddSoundEntry"
					var Description = "Adds a new SoundEntry to this SoundCue ."
					var ReturnType = "Void"
					var Parameters = "(Sound sound, Real weight)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sound"
							var Type = "Sound"
							var Description = ""
						}
						Parameter
						{
							var Name = "weight"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddSoundTagEntry"
					var Description = "Adds a new SoundTagEntry to this SoundCue ."
					var ReturnType = "Void"
					var Parameters = "(SoundTag soundTag)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "soundTag"
							var Type = "SoundTag"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCue"
					var Description = ""
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundSpace space, SoundNode outputNode, Boolean startPaused)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "SoundSpace"
							var Description = ""
						}
						Parameter
						{
							var Name = "outputNode"
							var Type = "SoundNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "startPaused"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCueOnNode"
					var Description = "Plays this SoundCue using a specified SoundNode as the output and returns the resulting SoundInstance ."
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundNode outputNode, Boolean startPaused)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "outputNode"
							var Type = "SoundNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "startPaused"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Preview"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer serializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "serializer"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StopPreview"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unload"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundEmitter"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Allows 3D positioning of sounds relative to SoundListeners."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Attenuator"
					var Type = "SoundAttenuator"
					var Description = "If a SoundAttenuator resource other than DefaultNoAttenuation is selected it will be applied to SoundCues without their own SoundAttenuator resource. If a SoundCue has attenuation settings those will always be used. If neither has settings, the sound will not be attenuated."
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, applied to all sounds played through this SoundEmitter . A value of 0 does nothing, 6 will double the volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other)."
				}
				Property
				{
					var Name = "Directional"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "EmitAngle"
					var Type = "Real"
					var Description = "The angle of full volume sound for a directional SoundEmitter . An angle of 90, for example, will be centered at the object's front, extending 45 degrees to the left and right."
				}
				Property
				{
					var Name = "InputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode to use for attaching other nodes to the input of the SoundEmitter ."
				}
				Property
				{
					var Name = "IsPlaying"
					var Type = "Boolean"
					var Description = "This property will be true if there are SoundInstances currently associated with this SoundEmitter , even if they are paused or otherwise not audible."
				}
				Property
				{
					var Name = "OutputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode to use for attaching other nodes to the output of the SoundEmitter ."
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this property to true pauses all sounds currently playing through the SoundEmitter . Setting it to false will resume playback."
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "This property affects both the pitch and speed of all sounds played through this SoundEmitter . A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down. The Pitch property is linked to the Semitones property (changing one will change the other)."
				}
				Property
				{
					var Name = "RearVolume"
					var Type = "Real"
					var Description = "The volume of sound heard directly behind a directional SoundEmitter . It will only reach this value in a small area, since volume is interpolated from the edge of the EmitAngle. To make the volume as quiet as possible behind the object, use a small EmitAngle."
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "This property, specified in semitones (or half-steps), affects both the pitch and speed of all sounds played through this SoundEmitter .. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other)."
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment applied to all sounds played through this SoundEmitter . A value of 1 does nothing, 2 will double the volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CheckAttenuatorInputs"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCue"
					var Description = "Plays the SoundCue passed into the function and returns the resulting SoundInstance ."
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCueInternal"
					var Description = ""
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundCue cue, Boolean startPaused)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
						Parameter
						{
							var Name = "startPaused"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCuePaused"
					var Description = "Plays the SoundCue passed into the function and returns the resulting SoundInstance , which starts off paused."
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetUpAttenuatorNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(HandleOf<SoundAttenuator> attenuator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "attenuator"
							var Type = "HandleOf<SoundAttenuator>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundEntry"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = "Stores Sounds and associated properties to be used by a SoundCue ."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CrossFadeLoopTail"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "EndTime"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "LoopEndTime"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "LoopStartTime"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "LoopTailLength"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Sound"
					var Type = "Sound"
					var Description = "The Sound resource that will be played by this SoundEntry ."
				}
				Property
				{
					var Name = "StartTime"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Weight"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Preview"
					var Description = "Preview this sound with no SoundCue settings."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StopPreview"
					var Description = "Stop previewing this sound."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundInstance"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = "The object associated with a currently playing sound."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CustomEventTime"
					var Type = "Real"
					var Description = "The time (in seconds from the beginning of the file) to get a MusicCustomTime event."
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment (in decibels) of the SoundInstance , initially set by the SoundCue's Decibels property. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other)."
				}
				Property
				{
					var Name = "EndTime"
					var Type = "Real"
					var Description = "The time in seconds from the beginning of the file that the instance will stop."
				}
				Property
				{
					var Name = "FileLength"
					var Type = "Real"
					var Description = "The length of the entire audio file, in seconds."
				}
				Property
				{
					var Name = "IsPlaying"
					var Type = "Boolean"
					var Description = "This Property will be true while the SoundInstance is playing, then will become false when its sound has stopped."
				}
				Property
				{
					var Name = "Looping"
					var Type = "Boolean"
					var Description = "When this Property is true the SoundInstance will loop indefinitely. If changed to false while a SoundInstance is looping the SoundInstance will continue playing to its EndTime and then stop."
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this Property to true will pause a currently playing SoundInstance . Setting it to false will resume playback."
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "The pitch adjustment of the SoundInstance , initially set by the SoundCue's Pitch property. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,."
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "The pitch adjustment, in semitones (or half-steps), of the SoundInstance , initially set by the SoundCue's Semitones property. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other)."
				}
				Property
				{
					var Name = "SoundName"
					var Type = "string"
					var Description = "The name of the Sound being played by this SoundInstance ."
				}
				Property
				{
					var Name = "SoundNode"
					var Type = "SoundNode"
					var Description = "The SoundNode associated with this SoundInstance ."
				}
				Property
				{
					var Name = "Time"
					var Type = "Real"
					var Description = "This property tells you to the current playback position, in seconds from the beginning of the file, and allows you to tell the instance to change its playback position to a different time. Be aware that the time will not be precisely accurate. If the Sound resource used to play the SoundInstance has Streamed selected, you cannot set the playback position."
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment of the SoundInstance , initially set by the SoundCue's Volume property. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetBeatsPerMinute"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the SoundInstance's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the SoundInstance's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the SoundInstance's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitchSemitones, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitchSemitones"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the SoundInstance's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Play"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean loop, SoundTag tag, SoundNode outputNode, Boolean startPaused)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "loop"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "tag"
							var Type = "SoundTag"
							var Description = ""
						}
						Parameter
						{
							var Name = "outputNode"
							var Type = "SoundNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "startPaused"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetBeatsPerMinute"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real beats)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "beats"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetTimeSignature"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real beats, Real noteType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "beats"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "noteType"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Stop"
					var Description = "Stops the playback of this SoundInstance . It cannot be re-started."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundListener"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Uses the object's position to \"hear\" all SoundEmitters in the SoundSpace ."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "If this property is set to false the SoundListener will not produce any sound. All audio in the SoundSpace will continue to be processed, so this is not the same as pausing the sounds."
				}
				Property
				{
					var Name = "SoundNode"
					var Type = "SoundNode"
					var Description = "The SoundNode associated with this SoundListener ."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real invDt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "invDt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundNode"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoCollapse"
					var Type = "Boolean"
					var Description = "If true, this node will automatically remove itself from the graph when its last input node is removed."
				}
				Property
				{
					var Name = "BypassPercent"
					var Type = "Real"
					var Description = "The percentage of output (0 to 100) that should skip whatever processing the node does."
				}
				Property
				{
					var Name = "HasInputs"
					var Type = "Boolean"
					var Description = "Will be true if this node has any input nodes."
				}
				Property
				{
					var Name = "HasOutputs"
					var Type = "Boolean"
					var Description = "Will be true if this node has any output nodes."
				}
				Property
				{
					var Name = "InputCount"
					var Type = "Integer"
					var Description = "The number of input nodes that are currently attached to this node."
				}
				Property
				{
					var Name = "OutputCount"
					var Type = "Integer"
					var Description = "The number of output nodes that are currently attached to this node."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddInputNode"
					var Description = "Adds the passed in node to this node's inputs."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InsertNodeAfter"
					var Description = "Inserts the passed in node after this node in the signal path, placing it between this node and any nodes which were connected to this node's output."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InsertNodeBefore"
					var Description = "Inserts the passed in node before this node in the signal path, placing it between this node and any nodes which were connected to this node as inputs."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReleaseNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAllInputs"
					var Description = "Removes the connections between this node and all of its input nodes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAllOutputs"
					var Description = "Removes the connections between this node and all of its output nodes, disconnecting this node from the graph. If this node has no inputs it will be deleted when no longer referenced."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAndAttachInputsToOutputs"
					var Description = "Removes this node from the graph by disconnecting it from all inputs and outputs and attaching the input nodes to the output nodes, keeping the rest of the graph intact. This node will be deleted when it is no longer referenced."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveInputNode"
					var Description = "Removes the node passed in as a parameter from this node's inputs."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReplaceWith"
					var Description = "Replaces this node in the graph with the node passed in as a parameter. This node will be deleted when it is no longer referenced."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SoundNode node, Status status)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "status"
							var Type = "Status"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundSpace"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Sound functionality associated with a Space ."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, applied to all sounds in the space. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it."
				}
				Property
				{
					var Name = "InputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode which is the ultimate output of all sounds in this space."
				}
				Property
				{
					var Name = "OutputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode which can be used to attach other nodes which should process all audio in the SoundSpace ."
				}
				Property
				{
					var Name = "PauseWithTimeSpace"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this Property to true will pause all audio in the space. Setting it to false will resume all audio."
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "The pitch adjustment applied to all sounds in the space. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down."
				}
				Property
				{
					var Name = "PitchWithTimeSpace"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "The pitch adjustment, in semitones (or half-steps), applied to all sounds in the space. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound,."
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment applied to all sounds in the space. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetListeners"
					var Description = ""
					var ReturnType = "InList<SoundListener>"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the SoundSpace's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the SoundSpace's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the SoundSpace's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the SoundSpace's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real value, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCue"
					var Description = "Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance ."
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PlayCuePaused"
					var Description = "Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance , which starts off paused."
					var ReturnType = "HandleOf<SoundInstance>"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundTag"
			var BaseClass = "DataResource"
			var Library = "SoundLibrary"
			var Description = "Controls settings on all tagged SoundInstances."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CompressorAttack"
					var Type = "Real"
					var Description = "The time, in milliseconds, for the filter to ramp to full effect after the input reaches the threshold."
				}
				Property
				{
					var Name = "CompressorKneeWidth"
					var Type = "Real"
					var Description = "The knee width of the filter, in decibels."
				}
				Property
				{
					var Name = "CompressorRatio"
					var Type = "Real"
					var Description = "The ratio of the compression applied by the filter."
				}
				Property
				{
					var Name = "CompressorRelease"
					var Type = "Real"
					var Description = "The time, in milliseconds, for the filter to ramp from full effect to off after the input drops below the threshold."
				}
				Property
				{
					var Name = "CompressorThreshold"
					var Type = "Real"
					var Description = "The threshold, in decibels, at which the volume is affected by the filter."
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, applied to all tagged instances."
				}
				Property
				{
					var Name = "EQBand1Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 150 Hz. Positive values will boost these frequencies while negative values will reduce them."
				}
				Property
				{
					var Name = "EQBand2Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 600 Hz. Positive values will boost these frequencies while negative values will reduce them."
				}
				Property
				{
					var Name = "EQBand3Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 2500 Hz. Positive values will boost these frequencies while negative values will reduce them."
				}
				Property
				{
					var Name = "EQHighPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies above 5000 Hz. Positive values will boost these frequencies while negative values will reduce them."
				}
				Property
				{
					var Name = "EQLowPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies below 80 Hz. Positive values will boost these frequencies while negative values will reduce them."
				}
				Property
				{
					var Name = "InstanceCount"
					var Type = "Integer"
					var Description = "The number of SoundInstances currently associated with this SoundTag ."
				}
				Property
				{
					var Name = "InstanceLimit"
					var Type = "Real"
					var Description = "If this value is greater than zero, SoundCues with this SoundTag will only play if the number of tagged SoundInstances is less than this number."
				}
				Property
				{
					var Name = "Instances"
					var Type = "SoundInstanceRange"
					var Description = "This allows you to get all currently tagged SoundInstances. Using a foreach loop, you can access any SoundInstance functionality on each of the tagged instances."
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this property to true will pause all tagged instances. Setting it to false will resume playback."
				}
				Property
				{
					var Name = "TagForDucking"
					var Type = "SoundTag"
					var Description = "If this property is not null, the selected SoundTag will be used to trigger this SoundTag's compressor."
				}
				Property
				{
					var Name = "UseCompressor"
					var Type = "Boolean"
					var Description = "If true, the SoundTag's compressor settings will be applied to the tagged SoundInstances."
				}
				Property
				{
					var Name = "UseEqualizer"
					var Type = "Boolean"
					var Description = "If true, the SoundTag's equalizer settings will be applied to the tagged SoundInstances."
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment applied to all tagged instances."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "EQSetAllBands"
					var Description = "Sets all equalizer band gain values at once. The parameters are in order from the lowest band to the highest. The last parameter is the number of seconds to interpolate the values over."
					var ReturnType = "Void"
					var Parameters = "(Real lowPass, Real band1, Real band2, Real band3, Real highPass, Real timeToInterpolate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lowPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band2"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band3"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "highPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeToInterpolate"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the SoundTag's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the SoundTag's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real value, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendAudioEvent"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const AudioEventType eventType, Void data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventType"
							var Type = "const AudioEventType"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "Void"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StopSounds"
					var Description = "Stops all currently tagged SoundInstances."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TagSound"
					var Description = "Adds a new SoundInstance to this SoundTag ."
					var ReturnType = "Void"
					var Parameters = "(SoundInstance instance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "instance"
							var Type = "SoundInstance"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UnTagSound"
					var Description = "Removes a SoundInstance from this SoundTag ."
					var ReturnType = "Void"
					var Parameters = "(SoundInstance instance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "instance"
							var Type = "SoundInstance"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Unload"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SoundTagEntry"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = "Stores a SoundTag which will be applied to all SoundInstances created by this SoundCue ."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SoundTag"
					var Type = "SoundTag"
					var Description = "This SoundTag will be added to all SoundInstances created by the SoundCue ."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Space"
			var BaseClass = "Cog"
			var Library = "EngineLibrary"
			var Description = "A space is a near boundless, three-dimensional extent in which objects and events occur and have relative position, direction, and time. Essentially a world of objects that exist together. Used to divide objects between UI, World, Editor, and others. The two most Common spaces are the 'World' for the game world and the 'Ui' for the HUD and menus."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllObjects"
					var Type = "SpaceRange"
					var Description = ""
				}
				Property
				{
					var Name = "AllRootObjects"
					var Type = "HierarchyListRange"
					var Description = ""
				}
				Property
				{
					var Name = "CurrentLevel"
					var Type = "Level"
					var Description = "Last level loaded."
				}
				Property
				{
					var Name = "IsEditorMode"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "ObjectCount"
					var Type = "Integer"
					var Description = "Number of objects in the space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddObjectsFromLevel"
					var Description = "Add all objects from a level."
					var ReturnType = "Level"
					var Parameters = "(Level levelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "levelName"
							var Type = "Level"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddObjectsFromStream"
					var Description = "Add objects from serializer stream."
					var ReturnType = "range"
					var Parameters = "(string source, Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AddToNameMap"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AllObjects"
					var Description = "All objects in the space."
					var ReturnType = "range"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AllRootObjects"
					var Description = ""
					var ReturnType = "range"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ChangedObjects"
					var Description = "This should be called whenever we want the object view to be refreshed / updated."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CheckForChangedObjects"
					var Description = "Any change to the count / structure of the objects."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clone"
					var Description = "Clones this cog."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Create"
					var Description = "Create an object in the space."
					var ReturnType = "Cog"
					var Parameters = "(Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAt"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(string source, Transform transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Transform"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAt"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(string source, Vec3 position)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "position"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAt"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(string source, Vec3 position, QuatParam rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "position"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "rotation"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAt"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(string source, Vec3 position, Vec3 scale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "position"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "scale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAt"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(string source, Vec3 position, QuatParam rotation, Vec3 scale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "position"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "rotation"
							var Type = "QuatParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "scale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateAtPosition"
					var Description = "Create a object at a position in the space."
					var ReturnType = "Cog"
					var Parameters = "(Archetype archetype, Vec3 position)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "position"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateLink"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(Archetype archetype, Cog objectA, Cog objectB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateNamed"
					var Description = "Create an object from an archetype."
					var ReturnType = "Cog"
					var Parameters = "(string archetypeName, string name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetypeName"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateNamedLink"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(string archetypeName, Cog objectA, Cog objectB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetypeName"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Destroy"
					var Description = "Destroy the space and all objects inside it."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DestroyAll"
					var Description = "Destroy all objects in space."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DestroyAllFromLevel"
					var Description = "Destroy all objects created from level."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindAllObjectsByName"
					var Description = "Find an object in the space with a given name."
					var ReturnType = "CogNameRange"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstRootObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastRootObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindObjectByName"
					var Description = "Find an object in the space with a given name."
					var ReturnType = "Cog"
					var Parameters = "(StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceDestroy"
					var Description = "Internal Destroy."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCreationFlags"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGameSession"
					var Description = "Get the GameSession that owns us and our space."
					var ReturnType = "GameSession"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetModified"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetSpace"
					var Description = ""
					var ReturnType = "Space"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize all the components on the composition. The order of initialize is as follows: 1. Initialize 2. OnAllObjectsCreated 3. ScriptInitialize 4. The event 'AllObjectsInitialized' is sent out on the CogInitializer Generally script Initialize comes after ALL C++ initialization because it makes scripts safer and easier to debug (knowing all C++ components have been fully setup, can't access anything bad)"
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEditorMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsEditorOrPreviewMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsPreviewMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadLevel"
					var Description = "Load new level replace the current level."
					var ReturnType = "Void"
					var Parameters = "(Level levelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "levelName"
							var Type = "Level"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadLevelAdditive"
					var Description = "Do no destroy current objects, add objects from level and change loaded level."
					var ReturnType = "Void"
					var Parameters = "(Level levelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "levelName"
							var Type = "Level"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadLevelFile"
					var Description = "Load the level file."
					var ReturnType = "Void"
					var Parameters = "(string filePath)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "filePath"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "LoadPendingLevel"
					var Description = "Load the pending level. Called before update."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Modified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NotModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReloadLevel"
					var Description = "Reload the current level."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveFromNameMap"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog, StringParam name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "name"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SaveLevelFile"
					var Description = "Save a level file."
					var ReturnType = "Void"
					var Parameters = "(string levelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "levelName"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SerializeObjectsToSpace"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer, CogCreationContext context, Serializer loader)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
						Parameter
						{
							var Name = "context"
							var Type = "CogCreationContext"
							var Description = ""
						}
						Parameter
						{
							var Name = "loader"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetName"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(string newName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "newName"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SphereCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "SphereCollider is a basic collision primitive of a sphere."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The radius of the sphere in local space (before transform is applied)."
				}
				Property
				{
					var Name = "WorldRadius"
					var Type = "Real"
					var Description = "The radius of the sphere after transform is applied (scale)"
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CacheWorldValues"
					var Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeLocalInverseInertiaTensor"
					var Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass."
					var ReturnType = "Void"
					var Parameters = "(real mass, Mat3Ref localInvInertia)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mass"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "localInvInertia"
							var Type = "Mat3Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldAabbInternal"
					var Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extents of an aabb."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldBoundingSphereInternal"
					var Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeWorldVolumeInternal"
					var Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside)."
					var ReturnType = "real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function."
					var ReturnType = "Void"
					var Parameters = "(Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SphericalParticleEmitter"
			var BaseClass = "ParticleEmitterShared"
			var Library = "GraphicsLibrary"
			var Description = "Emits particles inside a sphere."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "EmitParticles"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity, Real timeAlive)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
						Parameter
						{
							var Name = "velocity"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeAlive"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Spline"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "A spline built from control points. Bakes out the curve using an error term (distance from actual spline). Provides an interface to sample the curve at a given arc-length distance in order to provide constant speed interpolation."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BakedPoints"
					var Type = "SplineBakedPoints"
					var Description = "The read-only curve points baked out to line segments using the provided error."
				}
				Property
				{
					var Name = "Closed"
					var Type = "Boolean"
					var Description = "Does the spline loop back on itself?"
				}
				Property
				{
					var Name = "ControlPoints"
					var Type = "SplineControlPoints"
					var Description = "The control points used to bake out the curve."
				}
				Property
				{
					var Name = "Error"
					var Type = "Real"
					var Description = "The max number of units that a line segment is allowed to deviate from the curve."
				}
				Property
				{
					var Name = "SplineType"
					var Type = "SplineType"
					var Description = "The kind of spline (Linear, BSpline, CatmulRom). Determines how the control points affect the curve."
				}
				Property
				{
					var Name = "TotalDistance"
					var Type = "Real"
					var Description = "The total arc-length of the curve. Use to normalize the curve if you wish."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = "Create a new copy of this spline."
					var ReturnType = "Spline"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Create"
					var Description = "Create a new instance of a spline."
					var ReturnType = "Spline"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draw the baked points of the curve with the provided color."
					var ReturnType = "Void"
					var Parameters = "(Vec4 color)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "color"
							var Type = "Vec4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ForceRebuild"
					var Description = "Forcibly rebuild the baked points from the control points."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RebuildIfModified"
					var Description = "Rebuild the baked points from the control points if they have changed. Should not need to be manually called unless the user wants to control the timing when the points are baked."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SampleDistance"
					var Description = "Samples the curve at a given arc-length distance."
					var ReturnType = "SplineSampleData"
					var Parameters = "(Real distance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "distance"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SplineBakedPoint"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Data for a spline's baked point."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WorldPosition"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SplineBakedPoints"
			var BaseClass = "SafeId32Object"
			var Library = "EngineLibrary"
			var Description = "Read-only baked points for the Spline class. Will auto-recompute if the control points have changed."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "SplineBakedPoint"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SplineControlPoint"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Data for a spline's control point."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WorldPosition"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SplineControlPoints"
			var BaseClass = "SafeId32Object"
			var Library = "EngineLibrary"
			var Description = "Control points for the Spline class. Modifying this will cause the spline to be marked as modified to rebuild the baked curve when needed."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "The number of control points contained."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = "Add a new point to the end of the array."
					var ReturnType = "Void"
					var Parameters = "(const SplineControlPoint controlPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "controlPoint"
							var Type = "const SplineControlPoint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clear all control points."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Get"
					var Description = "Get the control point at the given index."
					var ReturnType = "SplineControlPoint"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Insert"
					var Description = "Inserts the given point at the specified index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, const SplineControlPoint controlPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "controlPoint"
							var Type = "const SplineControlPoint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = "Remove the item at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Set"
					var Description = "Sets the control point at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, const SplineControlPoint value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "const SplineControlPoint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SplineParticleAnimator"
			var BaseClass = ""
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoCalculateLifetime"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Helix"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "HelixOffset"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "HelixRadius"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "HelixWaveLength"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Mode"
					var Type = "SplineAnimatorMode"
					var Description = ""
				}
				Property
				{
					var Name = "Speed"
					var Type = "Real"
					var Description = "Speed setter / getter."
				}
				Property
				{
					var Name = "SpringDampingRatio"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SpringFrequencyHz"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Animate"
					var Description = "ParticleAnimator Interface."
					var ReturnType = "Void"
					var Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "particleList"
							var Type = "ParticleList"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Ref"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Sprite"
			var BaseClass = "BaseSprite"
			var Library = "GraphicsLibrary"
			var Description = "A generated quad that addresses atlased image data for effiecient frame-based animations and batched rendering."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AnimationActive"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "AnimationSpeed"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "CurrentFrame"
					var Type = "Integer"
					var Description = "Index of the frame the animation is currently on."
				}
				Property
				{
					var Name = "FlipX"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "FlipY"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = "The resource defining one or more image sequences used for frame-based animation."
				}
				Property
				{
					var Name = "StartFrame"
					var Type = "Integer"
					var Description = "Index of the frame to start the animation on when the object is initialized, 0-based."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalCenter"
					var Description = ""
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalWidths"
					var Description = ""
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnLogicUpdate"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAnimation"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WrapIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SpriteParticleSystem"
			var BaseClass = "ParticleSystem"
			var Library = "GraphicsLibrary"
			var Description = "A particle system that uses sprites to represent each particle."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BeamBaseScale"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "BeamVelocityScale"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "GeometryMode"
					var Type = "SpriteParticleGeometryMode"
					var Description = ""
				}
				Property
				{
					var Name = "ParticleAnimation"
					var Type = "SpriteParticleAnimationMode"
					var Description = ""
				}
				Property
				{
					var Name = "ParticleSort"
					var Type = "SpriteParticleSortMode"
					var Description = ""
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = ""
				}
				Property
				{
					var Name = "VertexColor"
					var Type = "Real4"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CheckSort"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewBlock viewBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMaterial"
					var Description = ""
					var ReturnType = "Material"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SpriteText"
			var BaseClass = "BaseSprite"
			var Library = "GraphicsLibrary"
			var Description = "Text that is rendered from a texture atlas in the same way that Sprites are."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Font"
					var Type = "Font"
					var Description = "Font used to display the text."
				}
				Property
				{
					var Name = "FontSize"
					var Type = "Integer"
					var Description = "Size that the font will be rastered at to a texture atlas."
				}
				Property
				{
					var Name = "PixelsPerUnit"
					var Type = "Real"
					var Description = "Number of pixels of the font size that map to one world space unit."
				}
				Property
				{
					var Name = "Text"
					var Type = "string"
					var Description = "Text to display."
				}
				Property
				{
					var Name = "TextAlign"
					var Type = "TextAlign"
					var Description = "How to position the text about the objects origin."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ExtractFrameData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(FrameNode frameNode, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frameNode"
							var Type = "FrameNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractViewData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewNode"
							var Type = "ViewNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewBlock"
							var Type = "ViewBlock"
							var Description = ""
						}
						Parameter
						{
							var Name = "frameBlock"
							var Type = "FrameBlock"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCharacterPosition"
					var Description = "Get the position in world space of a character by index."
					var ReturnType = "Vec3"
					var Parameters = "(Integer characterIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "characterIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalCenter"
					var Description = ""
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalWidths"
					var Description = ""
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MeasureGivenText"
					var Description = "Get the effective size in world space that the SpriteText would be if this was its text."
					var ReturnType = "Vec2"
					var Parameters = "(string text)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "text"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MeasureText"
					var Description = "Get the effective size in world space of the current text."
					var ReturnType = "Vec2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StandardResults"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "StandardError"
					var Type = "string"
					var Description = ""
				}
				Property
				{
					var Name = "StandardOut"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StickJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A stick joint is used to simulate a rope or a stick. This joint forces a constant distance between the anchor points on the objects. If there is no limit, this behaves as a stick. If there is a limit, then this behaves as a rope. Motors and springs are also applied to the axis of the rope. Add on definitions: Limit: A limit will provide a min/max distance that the anchors can be between. Motor: A motor will push/pull the objects in the direction of the rope. The motor will not have any effect unless a limit or spring is present. Spring: A spring will make the rope behave springlike at its boundaries."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = "The desired length between the anchor points of object A and B."
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = "Used to detect when motors/limits/springs are added dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StreamCapabilities"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GetCount"
					var Type = "StreamCapabilities"
					var Description = ""
				}
				Property
				{
					var Name = "None"
					var Type = "StreamCapabilities"
					var Description = ""
				}
				Property
				{
					var Name = "Read"
					var Type = "StreamCapabilities"
					var Description = ""
				}
				Property
				{
					var Name = "Seek"
					var Type = "StreamCapabilities"
					var Description = ""
				}
				Property
				{
					var Name = "SetCount"
					var Type = "StreamCapabilities"
					var Description = ""
				}
				Property
				{
					var Name = "Write"
					var Type = "StreamCapabilities"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StreamOrigin"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Current"
					var Type = "StreamOrigin"
					var Description = ""
				}
				Property
				{
					var Name = "End"
					var Type = "StreamOrigin"
					var Description = ""
				}
				Property
				{
					var Name = "Start"
					var Type = "StreamOrigin"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "String"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "StringRange"
					var Description = ""
				}
				Property
				{
					var Name = "Begin"
					var Type = "RuneIterator"
					var Description = ""
				}
				Property
				{
					var Name = "ByteCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "Empty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "End"
					var Type = "RuneIterator"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AllocateNode"
					var Description = ""
					var ReturnType = "StringNode"
					var Parameters = "(size_type size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "size"
							var Type = "size_type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Assign"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "StringNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Assign"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const_pointer data, size_type size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "const_pointer"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Back"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Begin"
					var Description = ""
					var ReturnType = "StringIterator"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CompareTo"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeRuneCount"
					var Description = ""
					var ReturnType = "size_t"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Contains"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Data"
					var Description = ""
					var ReturnType = "cstr"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugIsNodePointerInPool"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(string node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Empty"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "End"
					var Description = ""
					var ReturnType = "StringIterator"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EndData"
					var Description = ""
					var ReturnType = "cstr"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EndsWith"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstNonWhitespaceRune"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(Rune value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastNonWhitespaceRune"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(Rune value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindRangeExclusive"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam startRange, StringRangeParam endRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "endRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindRangeInclusive"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam startRange, StringRangeParam endRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "endRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Format"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(cstr format, ...)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "format"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "..."
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FormatArgs"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(cstr format, va_list va)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "format"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = "va"
							var Type = "va_list"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Front"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetNode"
					var Description = ""
					var ReturnType = "StringNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetPreAllocatedCharacterStrings"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Hash"
					var Description = ""
					var ReturnType = "size_type"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InitializeCharacter"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer character)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "character"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InitializeCharacterNonPreallocated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer character)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "character"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsAllUpper"
					var Description = "Returns true if all the characters in a string are upper-case."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsAllWhitespace"
					var Description = "Returns true if all the characters in a string are whitespace."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Join"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, StringRangeParam string1, StringRangeParam string2, StringRangeParam string3, StringRangeParam string4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string1"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string2"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string3"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string4"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Join"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, StringRangeParam string1, StringRangeParam string2, StringRangeParam string3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string1"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string2"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string3"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Join"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, StringRangeParam string1, StringRangeParam string2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string1"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "string2"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Join"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, const string strings, size_t stringCount)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "strings"
							var Type = "const string"
							var Description = ""
						}
						Parameter
						{
							var Name = "stringCount"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "JoinInternal"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, const StringRange values, size_t count)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "values"
							var Type = "const StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "JoinRange"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, RangeType range)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "range"
							var Type = "RangeType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "JoinRange"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam separator, RangeType range, PolicyType policy)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "range"
							var Type = "RangeType"
							var Description = ""
						}
						Parameter
						{
							var Name = "policy"
							var Type = "PolicyType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Repeat"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(Rune rune, size_t numberOfTimes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
						Parameter
						{
							var Name = "numberOfTimes"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Replace"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam oldValue, StringRangeParam newValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldValue"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "newValue"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReplaceSub"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRange source, StringRange text, size_type start, size_type end)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "text"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "start"
							var Type = "size_type"
							var Description = ""
						}
						Parameter
						{
							var Name = "end"
							var Type = "size_type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SizeInBytes"
					var Description = ""
					var ReturnType = "size_type"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Split"
					var Description = ""
					var ReturnType = "StringSplitRange"
					var Parameters = "(StringRangeParam separator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StartsWith"
					var Description = "Returns true if the string starts with the given text."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange source, StringRange startsWith, RuneComparer compare)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "source"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "startsWith"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "compare"
							var Type = "RuneComparer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StartsWith"
					var Description = "Returns true if the string starts with the given text."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange startsWith, RuneComparer compare)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startsWith"
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = "compare"
							var Type = "RuneComparer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StartsWith"
					var Description = "Returns true if the string starts with the given text."
					var ReturnType = "Boolean"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SubString"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringIterator begin, StringIterator end)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "begin"
							var Type = "StringIterator"
							var Description = ""
						}
						Parameter
						{
							var Name = "end"
							var Type = "StringIterator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SubStringFromByteIndices"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(size_t startIndex, size_t endIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startIndex"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "endIndex"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToLower"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToUpper"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Trim"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrimEnd"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrimStart"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "addRef"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "c_str"
					var Description = ""
					var ReturnType = "cstr"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "initializeToDefault"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const string right)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "right"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(const string other)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "other"
							var Type = "const string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "poolOrDeleteNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "StringNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "release"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StringBuilder"
			var BaseClass = "ByteBuffer"
			var Library = "Core"
			var Description = "Extension of ByteBuffer for building strings. Has stream operators overloaded so it can act as a replacement for io streams."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Append"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringRange adapter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "adapter"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Append"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(char character)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "character"
							var Type = "char"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Append"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Rune rune)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Append"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(cstr begin, Integer sizeInBytes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "begin"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = "sizeInBytes"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "AppendFormat"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(cstr format, ...)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "format"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "..."
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Repeat"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(size_t count, StringParam str)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "count"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "str"
							var Type = "StringParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator+="
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(StringRange adapter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "adapter"
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator+="
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Rune rune)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const StringBuilder)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "const StringBuilder"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator[]"
					var Description = ""
					var ReturnType = "char"
					var Parameters = "(size_t index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StringRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "StringRange"
					var Description = ""
				}
				Property
				{
					var Name = "Begin"
					var Type = "RuneIterator"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "Rune"
					var Description = ""
				}
				Property
				{
					var Name = "Empty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "End"
					var Type = "RuneIterator"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "OriginalString"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "const StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Back"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Begin"
					var Description = ""
					var ReturnType = "StringIterator"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CompareTo"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(const StringRange right)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "right"
							var Type = "const StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeRuneCount"
					var Description = ""
					var ReturnType = "size_t"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Contains"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Contains"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringIterator pos)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pos"
							var Type = "StringIterator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Data"
					var Description = ""
					var ReturnType = "cstr"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DecrementPointerByRune"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(cstr ptr)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ptr"
							var Type = "cstr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Empty"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "End"
					var Description = ""
					var ReturnType = "StringIterator"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "EndsWith"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstByBytes"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(cstr buffer, Integer valueSizeInBytes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = "valueSizeInBytes"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstNonWhitespaceRune"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstNonWhitespaceRuneIt"
					var Description = ""
					var ReturnType = "StringIterator"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindFirstOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(Rune rune)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastByBytes"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(cstr buffer, Integer valueSizeInBytes)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "cstr"
							var Description = ""
						}
						Parameter
						{
							var Name = "valueSizeInBytes"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastNonWhitespaceRune"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastNonWhitespaceRuneIt"
					var Description = ""
					var ReturnType = "StringIterator"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(Rune rune)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindLastOf"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindRangeExclusive"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam startRange, StringRangeParam endRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "endRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindRangeInclusive"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam startRange, StringRangeParam endRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "endRange"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Front"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IncrementByRune"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsAllUpper"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsAllWhitespace"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsContinuationByte"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(cstr byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "byte"
							var Type = "cstr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsCurrentRuneLower"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsCurrentRuneUpper"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsCurrentRuneWhitespace"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsValid"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PopBack"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PopFront"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(size_t n)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "n"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PopFront"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReadCurrentRune"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Replace"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(StringRangeParam oldValue, StringRangeParam newValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldValue"
							var Type = "StringRangeParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "newValue"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SizeInBytes"
					var Description = ""
					var ReturnType = "size_t"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Split"
					var Description = ""
					var ReturnType = "StringSplitRange"
					var Parameters = "(StringRangeParam separator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "separator"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "StartsWith"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(StringRangeParam value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SubString"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringIterator begin, StringIterator end)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "begin"
							var Type = "StringIterator"
							var Description = ""
						}
						Parameter
						{
							var Name = "end"
							var Type = "StringIterator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SubStringFromByteIndices"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(size_t startIndex, size_t endIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startIndex"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "endIndex"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToLower"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToUpper"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Trim"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrimEnd"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrimStart"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateByte"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(cstr byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "byte"
							var Type = "cstr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(char c)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "c"
							var Type = "char"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer i)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "i"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator!="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Rune rune)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator<"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const StringRange right)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "right"
							var Type = "const StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator="
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "(StringRangeParam rhs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rhs"
							var Type = "StringRangeParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer i)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "i"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(const StringRange right)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "right"
							var Type = "const StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Rune rune)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rune"
							var Type = "Rune"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "operator=="
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(char c)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "c"
							var Type = "char"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "StringSplitRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = "A range that splits a StringRange based upon a separator range."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "StringSplitRange"
					var Description = ""
				}
				Property
				{
					var Name = "Current"
					var Type = "StringRange"
					var Description = ""
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "StringSplitRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "All"
					var Description = ""
					var ReturnType = "const StringSplitRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Empty"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Front"
					var Description = ""
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PopFront"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SkipNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "SubConvexMesh"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = "Contains the indices of a convex mesh. The triangle indices are the primary method to configure this (required for mass computations). The regular indices are used for debug drawing and to reduce intersection tests by removing duplicate points. Indices can be left empty and will be auto-filled."
			var Tags = Array
			{
				"Physics"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Indices"
					var Type = "MultiConvexMeshIndexData"
					var Description = "The vertex indices on the main mesh used to generate the convex hull."
				}
				Property
				{
					var Name = "Mesh"
					var Type = "MultiConvexMesh"
					var Description = ""
				}
				Property
				{
					var Name = "TriangleIndices"
					var Type = "MultiConvexMeshIndexData"
					var Description = "The vertex indices on the main mesh used to generate triangle indices for computing mass information and debug drawing. More indices are needed for determining triangles than for generating the convex mesh."
				}
				Property
				{
					var Name = "Valid"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CastRay"
					var Description = "Determines if a local-space ray hits this mesh."
					var ReturnType = "Boolean"
					var Parameters = "(const Ray localRay, MultiConvexMesh mesh, ProxyResult result, BaseCastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRay"
							var Type = "const Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "mesh"
							var Type = "MultiConvexMesh"
							var Description = ""
						}
						Parameter
						{
							var Name = "result"
							var Type = "ProxyResult"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "BaseCastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "(VertexArrayParam verts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeCenterOfMassAndVolume"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInertiaTensor"
					var Description = ""
					var ReturnType = "Mat3"
					var Parameters = "(VertexArrayParam verts, Vec3 centerOfMass, Vec3 scale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "centerOfMass"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "scale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeUniqueIndices"
					var Description = "Compute the mesh indices (for debug drawing in 2d and support functions) from the triangle indices."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Draw"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts, Mat4Param transform, Boolean drawEdges, Boolean drawFaces)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "drawEdges"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "drawFaces"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Draw2d"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts, Mat4Param transform, Boolean drawEdges, Boolean drawFaces)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "drawEdges"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "drawFaces"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawEdges"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts, Mat4Param transform, ByteColor color)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "color"
							var Type = "ByteColor"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawEdges2d"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts, Mat4Param transform, ByteColor color)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "color"
							var Type = "ByteColor"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DrawFaces"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts, Mat4Param transform, ByteColor color)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "transform"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "color"
							var Type = "ByteColor"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetCenter"
					var Description = "Some center point of the mesh (the center of mass in this case)"
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTriangle"
					var Description = ""
					var ReturnType = "Triangle"
					var Parameters = "(VertexArrayParam verts, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTriangleCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTriangleIndexed"
					var Description = ""
					var ReturnType = "Triangle"
					var Parameters = "(VertexArrayParam verts, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetOwner"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MultiConvexMesh owner)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "owner"
							var Type = "MultiConvexMesh"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Support"
					var Description = "Find the point furthest in the given direction."
					var ReturnType = "Void"
					var Parameters = "(VertexArrayParam verts, Vec3 direction, Vec3Ptr support)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "direction"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "support"
							var Type = "Vec3Ptr"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Validate"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(VertexArrayParam verts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateInternal"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(VertexArrayParam verts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "verts"
							var Type = "VertexArrayParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "TcpSocket"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Manages all the client/server/peer connections."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ConnectionCount"
					var Type = "Integer"
					var Description = "Get the number of connections we have."
				}
				Property
				{
					var Name = "IncomingConnectionCount"
					var Type = "Integer"
					var Description = "Get the number of incoming connections."
				}
				Property
				{
					var Name = "OutgoingConnectionCount"
					var Type = "Integer"
					var Description = "Get the number of outgoing connections."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Close"
					var Description = "Close all activity (whether listening or connected to a server)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CloseConnection"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Connect"
					var Description = "Attempt to connect to a host on the given port."
					var ReturnType = "Void"
					var Parameters = "(string host, Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "host"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "CreateSocket"
					var Description = ""
					var ReturnType = "SocketHandle"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DispatchError"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ExtractIntoBuffer"
					var Description = ""
					var ReturnType = "size_t"
					var Parameters = "(const BinaryBufferSaver message, byte buffer, size_t bufferSize)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "message"
							var Type = "const BinaryBufferSaver"
							var Description = ""
						}
						Parameter
						{
							var Name = "buffer"
							var Type = "byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "bufferSize"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FinalizePacket"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(PodArray<byte> dataOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dataOut"
							var Type = "PodArray<byte>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "FindOpenOrCreateSocketData"
					var Description = ""
					var ReturnType = "SocketData"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetErrorString"
					var Description = ""
					var ReturnType = "string"
					var Parameters = "(Integer errorCode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "errorCode"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetGuid"
					var Description = "Get the Guid for this client."
					var ReturnType = "NetGuid"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetTrackedGuids"
					var Description = "Get a range of all tracked guids."
					var ReturnType = "Array<NetGuidrange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleChunks"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SocketData socketData, const byte buffer, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleEventProtocol"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const SocketData socketData, const byte buffer, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "const SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleGuidProtocol"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const SocketData socketData, const byte buffer, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "const SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleIncomingConnections"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleIncomingData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleOutgoingConnections"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleOutgoingData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleProtocols"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const SocketData socketData, const byte buffer, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "const SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "HandleReceivedData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const SocketData socketData, const byte buffer, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "const SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InternalConnect"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const ConnectionData info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "const ConnectionData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsConnected"
					var Description = "Check if we are currently connected to anyone."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "IsError"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer result)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "result"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Listen"
					var Description = "Listen for incoming connections."
					var ReturnType = "Boolean"
					var Parameters = "(Integer port, Integer maxConnections)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxConnections"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Listen"
					var Description = "Listen for incoming connections."
					var ReturnType = "Boolean"
					var Parameters = "(Integer port, Integer maxConnections, TcpSocketBind bindTo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxConnections"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "bindTo"
							var Type = "TcpSocketBind"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MakeEventPacket"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SendableEvent event, PodArray<byte> dataOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataOut"
							var Type = "PodArray<byte>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MakeGuidPacket"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(NetGuid guid, PodArray<byte> dataOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "guid"
							var Type = "NetGuid"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataOut"
							var Type = "PodArray<byte>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MakeUserPacket"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const byte data, size_t size, PodArray<byte> dataOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataOut"
							var Type = "PodArray<byte>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PrintData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const char mode, const byte data, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "mode"
							var Type = "const char"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RawSend"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SocketData socketData, const byte data, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ReceiveData"
					var Description = ""
					var ReturnType = "ReceiveState"
					var Parameters = "(SocketData socketData, size_t index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socketData"
							var Type = "SocketData"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ResolveHost"
					var Description = ""
					var ReturnType = "unsignedlong"
					var Parameters = "(string host)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "host"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendBufferTo"
					var Description = "Send a message to a specific connection index."
					var ReturnType = "Void"
					var Parameters = "(const byte buffer, size_t size, size_t index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendBufferToAll"
					var Description = "Send a message to all connections."
					var ReturnType = "Void"
					var Parameters = "(const byte buffer, size_t size)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendBufferToAllExcept"
					var Description = "Send a message to all connections except a particular connection index."
					var ReturnType = "Void"
					var Parameters = "(const byte buffer, size_t size, size_t exceptIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "exceptIndex"
							var Type = "size_t"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendTo"
					var Description = "Send an event to a specific connection index."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, SendableEvent event, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendToAll"
					var Description = "Send an event to all connections."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, SendableEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendToAllAndSelf"
					var Description = "Send an event to all connections and dispatch on self."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, SendableEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SendToAllExcept"
					var Description = "Send an event to all connections except a particular connection index."
					var ReturnType = "Void"
					var Parameters = "(StringParam eventId, SendableEvent event, Integer exceptIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "StringParam"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
						Parameter
						{
							var Name = "exceptIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetSocketOptions"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(SocketHandle socket)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "socket"
							var Type = "SocketHandle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetupPacket"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(TCPSocketMessageType messageType, PodArray<byte> dataOut)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "messageType"
							var Type = "TCPSocketMessageType"
							var Description = ""
						}
						Parameter
						{
							var Name = "dataOut"
							var Type = "PodArray<byte>"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrackReceive"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const byte data, size_t size, SocketHandle socket)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "socket"
							var Type = "SocketHandle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TrackSend"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(const byte data, size_t size, SocketHandle socket)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "const byte"
							var Description = ""
						}
						Parameter
						{
							var Name = "size"
							var Type = "size_t"
							var Description = ""
						}
						Parameter
						{
							var Name = "socket"
							var Type = "SocketHandle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(UpdateEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "UpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ValidateServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "VerifyResult"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer result)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "result"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "TextEditorConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoCompleteOnEnter"
					var Type = "Boolean"
					var Description = "Whether or not the auto-complete allows enter (similar to Tab) to be used as an auto-completer If the user manually scrolls through the list of suggestions, Enter will always complete regardless of this option."
				}
				Property
				{
					var Name = "CodeFolding"
					var Type = "Boolean"
					var Description = "Is code folding enabled?"
				}
				Property
				{
					var Name = "ColorScheme"
					var Type = "string"
					var Description = "Name of color scheme to use."
				}
				Property
				{
					var Name = "ConfidentAutoCompleteOnSymbols"
					var Type = "Boolean"
					var Description = "When the auto-complete is confident in its results (green), this controls whether or not we will finish completion on any symbol rather than just Tab Non-confident results (red) always require the user to press Tab (or Enter if AutoCompleteOnEnter is set)"
				}
				Property
				{
					var Name = "FontSize"
					var Type = "Integer"
					var Description = "Default Font Size."
				}
				Property
				{
					var Name = "KeywordAndTypeCompletion"
					var Type = "Boolean"
					var Description = "Whether we include keywords and types from the languages."
				}
				Property
				{
					var Name = "LineNumbers"
					var Type = "Boolean"
					var Description = "Show Line numbers."
				}
				Property
				{
					var Name = "LocalWordCompletion"
					var Type = "Boolean"
					var Description = "Whether we include local words from the current document / language."
				}
				Property
				{
					var Name = "ShowWhiteSpace"
					var Type = "Boolean"
					var Description = "If we show whitespace as special symbols in the text editor."
				}
				Property
				{
					var Name = "TabWidth"
					var Type = "TabWidth"
					var Description = "Number of spaces inserted for tabs."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ThrustEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a directional force at the thrust effects center. When applied to a rigid body, this force will cause the rigid body to torque if the force's direction does not go through the center of mass. Useful for modeling any sort of a thruster."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ForceDirection"
					var Type = "Real3"
					var Description = "The direction that the force should be applied."
				}
				Property
				{
					var Name = "ForceStrength"
					var Type = "Real"
					var Description = "The strength of the force being applied in the force direction."
				}
				Property
				{
					var Name = "LocalSpaceDirection"
					var Type = "Boolean"
					var Description = "Determines if this force is to be applied in local or in world space."
				}
				Property
				{
					var Name = "WorldForceDirection"
					var Type = "Real3"
					var Description = "The direction that the force should be applied in world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "TimeSpace"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Time space component controls time for a Space ."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "DtOrZero"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Frame"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "GloballyPaused"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "MaxDt"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "MinDt"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "RealDt"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "RealTimePassed"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "StepCount"
					var Type = "Integer"
					var Description = ""
				}
				Property
				{
					var Name = "TimeMode"
					var Type = "TimeMode"
					var Description = "When set to fixed framerate the Dt/frame time will never change (it will send whatever the project frame-rate-limiter is set to) This means it is important to run with a frame-rate limiter of some kind otherwise the game will appear to run much faster/slower Note: For determinism, you should always run in FixedFrametime mode When set to actual framerate we will send out the real time that the engine is encountering (clamped by MinDt / MaxDt)"
				}
				Property
				{
					var Name = "TimePassed"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "TimeScale"
					var Type = "Real"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Step"
					var Description = "Allows the engine to be advance one frame forward. Useful for debugging one frame at a time."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TogglePause"
					var Description = "Toggles the state of paused."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "TorqueEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a general torque to the object (objects will act differently based on their mass)."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalTorque"
					var Type = "Boolean"
					var Description = "Determines if the directional torque is applied in world space or locally."
				}
				Property
				{
					var Name = "TorqueAxis"
					var Type = "Real3"
					var Description = "The axis that the torque is being applied about."
				}
				Property
				{
					var Name = "TorqueStrength"
					var Type = "Real"
					var Description = "The strength of the torque force being applied."
				}
				Property
				{
					var Name = "WorldTorqueAxis"
					var Type = "Real3"
					var Description = "The axis of the torque in world space (can be directly applied to an RigidBody's torque)."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Transform"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Transform component class. The transform component provides the position, rotation and scale of an object."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EulerAngles"
					var Type = "Real3"
					var Description = "The rotation of the transform as an Euler angle vector in radians."
				}
				Property
				{
					var Name = "LocalRotation"
					var Type = "Quaternion"
					var Description = "Local rotation relative to parent."
				}
				Property
				{
					var Name = "LocalScale"
					var Type = "Real3"
					var Description = "Local Scale relative to parent."
				}
				Property
				{
					var Name = "LocalTranslation"
					var Type = "Real3"
					var Description = "Local Translation relative to parent."
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Quat"
					var Description = "Local rotation relative to parent."
				}
				Property
				{
					var Name = "Scale"
					var Type = "Vec3"
					var Description = "Local Scale relative to parent."
				}
				Property
				{
					var Name = "Translation"
					var Type = "Vec3"
					var Description = "Local Translation relative to parent."
				}
				Property
				{
					var Name = "WorldMatrix"
					var Type = "Real4x4"
					var Description = ""
				}
				Property
				{
					var Name = "WorldRotation"
					var Type = "Quaternion"
					var Description = "Rotation in World Space ."
				}
				Property
				{
					var Name = "WorldScale"
					var Type = "Real3"
					var Description = "Scale in World Space ."
				}
				Property
				{
					var Name = "WorldTranslation"
					var Type = "Real3"
					var Description = "Translation in World Space ."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AttachTo"
					var Description = "Signal that the Cog has been attached to another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ClampTranslation"
					var Description = "Clamps a translation value between the max values on the space. This will display a notification if any value was clamped."
					var ReturnType = "Vec3"
					var Parameters = "(Space space, Cog owner, Vec3 translation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
						Parameter
						{
							var Name = "owner"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "translation"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeDeltaTransform"
					var Description = "Sets up the TransformUpdateInfo with the delta transformation that goes from oldWorldMat to newWorldMat."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info, Mat4Param oldWorldMat, Mat4Param newWorldMat)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
						Parameter
						{
							var Name = "oldWorldMat"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "newWorldMat"
							var Type = "Mat4Param"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Detached"
					var Description = "Signal that the Cog has been detached from another Cog ."
					var ReturnType = "Void"
					var Parameters = "(AttachmentInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "AttachmentInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetInWorld"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetLocalMatrix"
					var Description = ""
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetParent"
					var Description = ""
					var ReturnType = "Transform"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetParentWorldMatrix"
					var Description = ""
					var ReturnType = "Mat4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "NormalizeRotation"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnDestroy"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Reset"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RotateAnglesLocal"
					var Description = "Rotate object in local space by the given Euler angle vector (in radians)."
					var ReturnType = "Void"
					var Parameters = "(Vec3 angles)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angles"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RotateAnglesWorld"
					var Description = "Rotate object in world space by the given Euler angle vector (in radians)."
					var ReturnType = "Void"
					var Parameters = "(Vec3 angles)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angles"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RotateAround"
					var Description = "Rotate around a given point with the given rotation."
					var ReturnType = "Void"
					var Parameters = "(Vec3 point, Quat rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "rotation"
							var Type = "Quat"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RotateLocal"
					var Description = "Rotate object in local space."
					var ReturnType = "Void"
					var Parameters = "(Quat rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rotation"
							var Type = "Quat"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "RotateWorld"
					var Description = "Rotate object in world space."
					var ReturnType = "Void"
					var Parameters = "(Quat rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rotation"
							var Type = "Quat"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDefaults"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetDirty"
					var Description = "Free's the cached world matrix for this and all child objects."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetEulerAnglesXYZ"
					var Description = "Sets the rotation of the transform by the given Euler angles in radians."
					var ReturnType = "Void"
					var Parameters = "(Real xRadians, Real yRadians, Real zRadians)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "xRadians"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "yRadians"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "zRadians"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetInWorld"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean state)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "state"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalRotationInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(QuatParam localRotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localRotation"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalScaleInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 localScale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localScale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetLocalTranslationInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 localTranslation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localTranslation"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetRotationBases"
					var Description = "Generates a rotation matrix from the given bases."
					var ReturnType = "Void"
					var Parameters = "(Vec3 facing, Vec3 up, Vec3 right)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "facing"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "right"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldRotationInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(QuatParam worldRotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRotation"
							var Type = "QuatParam"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldScaleInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 worldScale)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldScale"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetWorldTranslationInternal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Vec3 worldTranslation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldTranslation"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformNormal"
					var Description = "Transforms a local normal (direction) into world space."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normal"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformNormalInverse"
					var Description = "Transforms a world normal (direction) into local space."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normal"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformNormalLocal"
					var Description = "Transforms a normal by the local matrix (ignores parent's transform) Needed now because there is no quaternion times vector in script."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normal"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformPoint"
					var Description = "Transforms a local point into world space."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformPointInverse"
					var Description = "Transforms a world point into local space."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformPointLocal"
					var Description = "Transforms a point by the local matrix (ignores parent's transform)"
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "TransformUpdate"
					var Description = "Special function for transform updating from editor."
					var ReturnType = "Void"
					var Parameters = "(TransformUpdateInfo info)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "info"
							var Type = "TransformUpdateInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = "Send the TransformUpdateInfo and compute the delta transform from the old transform to the current transform (mostly for the gizmo)."
					var ReturnType = "Void"
					var Parameters = "(Integer flags, Mat4Param oldMat)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "oldMat"
							var Type = "Mat4Param"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Update"
					var Description = "Send the TransformUpdateInfo and compute the delta transform from the old transform to the current transform (mostly for the gizmo)."
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAll"
					var Description = "Same as the above update function but it also auto sets the scale, rotation, and translation flags. Currently used for attach/detach."
					var ReturnType = "Void"
					var Parameters = "(Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAll"
					var Description = "Same as the above update function but it also auto sets the scale, rotation, and translation flags. Currently used for attach/detach."
					var ReturnType = "Void"
					var Parameters = "(Mat4Param oldMat, Integer flags)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldMat"
							var Type = "Mat4Param"
							var Description = ""
						}
						Parameter
						{
							var Name = "flags"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "TranslateGizmo"
			var BaseClass = ""
			var Library = "EditorLibrary"
			var Description = "Updates the translation of the gizmo when it's being dragged."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SnapDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "SnapMode"
					var Type = "GizmoSnapMode"
					var Description = ""
				}
				Property
				{
					var Name = "UpdateMode"
					var Type = "UpdateMode"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetStartPosition"
					var Description = "Start Position getter (we want it to be read only)."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnGizmoModified"
					var Description = "As the gizmo is being dragged, we want to update the Transform based on the current update mode."
					var ReturnType = "Void"
					var Parameters = "(GizmoUpdateEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "GizmoUpdateEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnMouseDragStart"
					var Description = "When the mouse drag starts, we want to store our position in order to calculate our new position when the gizmo is modified."
					var ReturnType = "Void"
					var Parameters = "(Event e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Type"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IsAny"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsDelegate"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsEnum"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsEnumOrFlags"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsFlags"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsHandle"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "IsValue"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "Library"
					var Type = "ZilchLibrary"
					var Description = ""
				}
				Property
				{
					var Name = "Name"
					var Type = "string"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "UiFocusEvent"
			var BaseClass = ""
			var Library = "UiWidgetLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CancelFocus"
					var Type = "Boolean"
					var Description = "On UiFocusGainedPreview, allows you to cancel the focus gain."
				}
				Property
				{
					var Name = "LostFocus"
					var Type = "CogId"
					var Description = "The object that has lost focus, or will lose focus (in the case of preview)."
				}
				Property
				{
					var Name = "ReceivedFocus"
					var Type = "CogId"
					var Description = "The object that is gaining focus."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "UniversalJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A universal joint locks positional movement of two points together as well as locks rotation about 1 axis. This means it is a joint that constrains 4 axes and leaves 2 free rotational axes. This joint is most useful to model something like a arm or leg that has a nice range of rotational movement."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxis0OfBodyA"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object A that the objects are allowed to rotate about."
				}
				Property
				{
					var Name = "LocalAxis0OfBodyB"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object B that the objects are allowed to rotate about."
				}
				Property
				{
					var Name = "LocalAxis1OfBodyA"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object A that the objects are allowed to rotate about."
				}
				Property
				{
					var Name = "LocalAxis1OfBodyB"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object B that the objects are allowed to rotate about."
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "UpdateEvent"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Update event Contains current time and delta time."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = "The amount of time that passed between this frame and the last (scaled by TimeSpace.TimeScale)."
				}
				Property
				{
					var Name = "RealTimePassed"
					var Type = "Real"
					var Description = "The real amount of time that has passed since this space was created (uncapped and unclamped)."
				}
				Property
				{
					var Name = "TimePassed"
					var Type = "Real"
					var Description = "The amount of time that has passed since this space was created (TimeSpace.TimeScale affects this value)."
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "UprightJoint"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Utf8Encoding"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Variable"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ViewportMouseEvent"
			var BaseClass = "MouseEvent"
			var Library = "GameplayLibrary"
			var Description = "All mouse events that are forwarded to reactive components or the space use this event to add extra data."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CameraViewport"
					var Type = "CameraViewport"
					var Description = "Camera viewport that generated this event."
				}
				Property
				{
					var Name = "HitDistance"
					var Type = "Real"
					var Description = ""
				}
				Property
				{
					var Name = "HitNormal"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "HitObject"
					var Type = "Cog"
					var Description = "Object hit in ray cast."
				}
				Property
				{
					var Name = "HitPosition"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "RayDirection"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "RayStart"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldRay"
					var Type = "Ray"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetViewport"
					var Description = ""
					var ReturnType = "ReactiveViewport"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToWorldPlane"
					var Description = "The world mouse position on any arbitrary plane."
					var ReturnType = "Vec3"
					var Parameters = "(Vec3 worldPlaneNormal, Vec3 worldPlanePosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPlaneNormal"
							var Type = "Vec3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPlanePosition"
							var Type = "Vec3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToWorldViewPlane"
					var Description = "The world mouse position on the view plane at view depth."
					var ReturnType = "Vec3"
					var Parameters = "(Real viewDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ToWorldZPlane"
					var Description = "The world mouse position on the z plane at depth."
					var ReturnType = "Vec3"
					var Parameters = "(Real worldDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Void"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "VolumeNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Changes the volume of audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, that will be applied to the node's input. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0."
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment that will be applied to the node's input. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volumeDB, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volumeDB"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "VortexEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a force about an axis at the object's center. This will apply two forces to a body: One pulls the object towards the center of the vortex and the other applies a tangential force. Useful to model a vortex."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EndCondition"
					var Type = "PhysicsEffectEndCondition"
					var Description = "How the interpolation should be handled at the max distance. ClampToMax will clamp to strength at max. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative)."
				}
				Property
				{
					var Name = "InterpolationType"
					var Type = "PhysicsEffectInterpolationType"
					var Description = "The type of interpolation used (ie. Linear, Quadratic) for the forces."
				}
				Property
				{
					var Name = "InwardStrengthAtMaxDistance"
					var Type = "Real"
					var Description = "The inward strength of the vortex at its max distance."
				}
				Property
				{
					var Name = "InwardStrengthAtMinDistance"
					var Type = "Real"
					var Description = "The inward strength of the vortex at its center."
				}
				Property
				{
					var Name = "LocalAxis"
					var Type = "Boolean"
					var Description = "Determines if the Vortex Axis is in world or local space."
				}
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition."
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = "The first distance at which attenuation will start. If an object is under the min distance, it will get the strength at min applied. If an object is in between min and max, then it will attenuate."
				}
				Property
				{
					var Name = "TwistStrengthAtMaxDistance"
					var Type = "Real"
					var Description = "The perpendicular strength (twist) of the vortex at its max distance."
				}
				Property
				{
					var Name = "TwistStrengthAtMinDistance"
					var Type = "Real"
					var Description = "The perpendicular strength (twist) of the vortex at its center."
				}
				Property
				{
					var Name = "VortexAxis"
					var Type = "Real3"
					var Description = "The axis about which the vortex spins."
				}
				Property
				{
					var Name = "WorldVortexAxis"
					var Type = "Real3"
					var Description = "The axis about which the vortex spins in world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeVortexInformation"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetStrengthValues"
					var Description = "Computes the strength of both forces based upon the t-value distance from the vortex center."
					var ReturnType = "Void"
					var Parameters = "(real t, real twistForce, real inwardForce)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "t"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "twistForce"
							var Type = "real"
							var Description = ""
						}
						Parameter
						{
							var Name = "inwardForce"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "WebRequester"
			var BaseClass = "Component"
			var Library = "NetworkingLibrary"
			var Description = "A component we can use to facilitate web requests."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Url"
					var Type = "string"
					var Description = "Get and set the url that we make requests to."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = "Clear headers and post data."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Component Interface."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnWebResponse"
					var Description = "Occurs when the request gives us a response (with data)"
					var ReturnType = "Void"
					var Parameters = "(WebResponseEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "WebResponseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Run"
					var Description = "Run the web request (we should get data back in a WebResponse event)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetHeader"
					var Description = "Add a header to the web request."
					var ReturnType = "Void"
					var Parameters = "(string name, string data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "string"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "SetPostData"
					var Description = "Add Post data to the request, this will also change the request to a post request."
					var ReturnType = "Void"
					var Parameters = "(string data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "string"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "WeldJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A weld joint is used to lock to position and orientation of two objects together. This can be useful to lock two objects together. However, welds should generally not be used as they are computationally more expensive and less rigid than using composites. The only uses for welds are for quick connections or connections that are desired to not be fully rigid. Also, while it can be done with composites too, welds can be used to model the breaking apart of two objects. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on the x,y and z axes. Motor: A motor will attempt to drive the rotation on the x,y and z axes. Spring: A spring will make the x,y and z axis springy."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "WheelJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A joint that models a wheel with shocks. A wheel aligns the two local axes together and allows free rotation about this axis. The specified shock axis is turned into a soft constraint to model the shocks. Note: object 0 should be the root object as the shock axis rotates with this object. If object 0 is the wheel, then the shock axis will rotate with the wheel, causing the shocks to not stay aligned. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ShockAxis"
					var Type = "Real3"
					var Description = "The shock axis in the local space of body A."
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldShockAxis"
					var Type = "Real3"
					var Description = "The shock axis after it has been translated into world coordinates."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = "Used to detect when motors/limits/springs are added dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "WheelJoint2d"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A joint that models a wheel with shocks. This is the 2d version of the wheel joint. This joint is used in 2d mode for increased speed and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate upon. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "ShockAxis"
					var Type = "Real3"
					var Description = "The shock axis of the wheel in object A's local space."
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = ""
				}
				Property
				{
					var Name = "WorldShockAxis"
					var Type = "Real3"
					var Description = "The shock axis of the wheel in world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BatchEvents"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Commit"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComponentAdded"
					var Description = "Used to detect when motors/limits/springs are added dynamically."
					var ReturnType = "Void"
					var Parameters = "(BoundType typeId, Component component)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeId"
							var Type = "BoundType"
							var Description = ""
						}
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeInitialConfiguration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMoleculeData"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeData moleculeData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "moleculeData"
							var Type = "MoleculeData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputeMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ComputePositionMolecules"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draws the debug info associated with this joint."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetAtomIndexFilter"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer atomIndex, real desiredConstraintValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "atomIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "desiredConstraintValue"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultLimitIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultMotorIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetDefaultSpringIds"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "MoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "OnAllObjectsCreated"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PositionMoleculeCount"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Solve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "UpdateAtoms"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "WarmStart"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(MoleculeWalker molecules)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "molecules"
							var Type = "MoleculeWalker"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "WindEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a wind force to an object in a given direction. A wind force approximates the surface area of the object in the direction of the force to determine how large the force should be."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalSpaceDirection"
					var Type = "Boolean"
					var Description = ""
				}
				Property
				{
					var Name = "WindDirection"
					var Type = "Real3"
					var Description = "The direction that the wind is blowing."
				}
				Property
				{
					var Name = "WindSpeed"
					var Type = "Real"
					var Description = "The speed that the wind is blowing."
				}
				Property
				{
					var Name = "WorldWindDirection"
					var Type = "Real3"
					var Description = "The direction of the wind in world space."
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(SpringSystem obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "obj"
							var Type = "SpringSystem"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "ApplyEffect"
					var Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force)."
					var ReturnType = "Void"
					var Parameters = "(Collider collider, RigidBody obj, real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "obj"
							var Type = "RigidBody"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "GetWindVelocity"
					var Description = "Calculates and returns the wind velocity."
					var ReturnType = "Vec3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "PreCalculate"
					var Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)"
					var ReturnType = "Void"
					var Parameters = "(real dt)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "dt"
							var Type = "real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "Wrapper"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ZilchLibrary"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "ZilchPluginConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttemptedIdeToolsInstall"
					var Type = "Boolean"
					var Description = ""
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Initialize"
					var Description = "Initialize the component. Activating it in the space."
					var ReturnType = "Void"
					var Parameters = "(CogInitializer initializer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "initializer"
							var Type = "CogInitializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
				Method
				{
					var Name = "Serialize"
					var Description = "Component Serialization Interface."
					var ReturnType = "Void"
					var Parameters = "(Serializer stream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "stream"
							var Type = "Serializer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
				}
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "[ErrorType]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
		Object
		{
			var Name = "[MultipleMethodsOfTheSameName]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
		}
	}
	var Enums = Array
	{
		Object
		{
			var Name = "CollisionFilterCollisionFlags"
			var EnumValues = Map
			{
				Object
				{
					var key = "Resolve"
					var value = ""
				}
				Object
				{
					var key = "SkipDetection"
					var value = ""
				}
				Object
				{
					var key = "SkipResolution"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GraphicalSortMethod"
			var EnumValues = Map
			{
				Object
				{
					var key = "BackToFrontView"
					var value = ""
				}
				Object
				{
					var key = "BackToFrontZ"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackView"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackZ"
					var value = ""
				}
				Object
				{
					var key = "GraphicalSortValue"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "SortEvent"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ImageImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "Sprites"
					var value = ""
				}
				Object
				{
					var key = "Textures"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioCueImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "Grouped"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "PerSound"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FlickedStick"
			var EnumValues = Map
			{
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsEffectInterpolationType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "Quadratic"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "RenderingType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Static"
					var value = ""
				}
				Object
				{
					var key = "Streamed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TransportProtocol"
			var EnumValues = Map
			{
				Object
				{
					var key = "Tcp"
					var value = ""
				}
				Object
				{
					var key = "Udp"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpringSortOrder"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomUp"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "TopDown"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ACKState"
			var EnumValues = Map
			{
				Object
				{
					var key = "ACKd"
					var value = ""
				}
				Object
				{
					var key = "NAKd"
					var value = ""
				}
				Object
				{
					var key = "Undetermined"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "JointTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "CustomJoint"
					var value = ""
				}
				Object
				{
					var key = "FixedAngleJoint"
					var value = ""
				}
				Object
				{
					var key = "GearJoint"
					var value = ""
				}
				Object
				{
					var key = "LinearAxisJoint"
					var value = ""
				}
				Object
				{
					var key = "ManipulatorJoint"
					var value = ""
				}
				Object
				{
					var key = "PhyGunJoint"
					var value = ""
				}
				Object
				{
					var key = "PositionJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint2d"
					var value = ""
				}
				Object
				{
					var key = "PulleyJoint"
					var value = ""
				}
				Object
				{
					var key = "RelativeVelocityJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint2d"
					var value = ""
				}
				Object
				{
					var key = "StickJoint"
					var value = ""
				}
				Object
				{
					var key = "UniversalJoint"
					var value = ""
				}
				Object
				{
					var key = "UprightJoint"
					var value = ""
				}
				Object
				{
					var key = "WeldJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint2d"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoSnapMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "RelativeUnits"
					var value = ""
				}
				Object
				{
					var key = "WorldGrid"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteFill"
			var EnumValues = Map
			{
				Object
				{
					var key = "NineSlice"
					var value = ""
				}
				Object
				{
					var key = "Stretch"
					var value = ""
				}
				Object
				{
					var key = "Tiled"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshDrawMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Edges"
					var value = ""
				}
				Object
				{
					var key = "Filled"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConnectResponseMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiFocusDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Backwards"
					var value = ""
				}
				Object
				{
					var key = "Forward"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CapsuleScalingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "PreserveHeight"
					var value = ""
				}
				Object
				{
					var key = "PreserveScale"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoPivot"
			var EnumValues = Map
			{
				Object
				{
					var key = "Average"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Primary"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "WindowStyleFlags"
			var EnumValues = Map
			{
				Object
				{
					var key = "ClientOnly"
					var value = ""
				}
				Object
				{
					var key = "Close"
					var value = ""
				}
				Object
				{
					var key = "MainWindow"
					var value = ""
				}
				Object
				{
					var key = "NotVisible"
					var value = ""
				}
				Object
				{
					var key = "OnTaskBar"
					var value = ""
				}
				Object
				{
					var key = "Resizable"
					var value = ""
				}
				Object
				{
					var key = "TitleBar"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "VerticalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConstraintPositionCorrection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Baumgarte"
					var value = ""
				}
				Object
				{
					var key = "Inherit"
					var value = ""
				}
				Object
				{
					var key = "PostStabilization"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "NetRole"
			var EnumValues = Map
			{
				Object
				{
					var key = "Client"
					var value = ""
				}
				Object
				{
					var key = "MasterServer"
					var value = ""
				}
				Object
				{
					var key = "Offline"
					var value = ""
				}
				Object
				{
					var key = "Server"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StreamOrigin"
			var EnumValues = Map
			{
				Object
				{
					var key = "Current"
					var value = ""
				}
				Object
				{
					var key = "End"
					var value = ""
				}
				Object
				{
					var key = "Start"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Keys"
			var EnumValues = Map
			{
				Object
				{
					var key = "A"
					var value = ""
				}
				Object
				{
					var key = "Add"
					var value = ""
				}
				Object
				{
					var key = "Alt"
					var value = ""
				}
				Object
				{
					var key = "Apostrophe"
					var value = ""
				}
				Object
				{
					var key = "B"
					var value = ""
				}
				Object
				{
					var key = "Back"
					var value = ""
				}
				Object
				{
					var key = "Backslash"
					var value = ""
				}
				Object
				{
					var key = "C"
					var value = ""
				}
				Object
				{
					var key = "Capital"
					var value = ""
				}
				Object
				{
					var key = "Comma"
					var value = ""
				}
				Object
				{
					var key = "Control"
					var value = ""
				}
				Object
				{
					var key = "D"
					var value = ""
				}
				Object
				{
					var key = "Decimal"
					var value = ""
				}
				Object
				{
					var key = "Delete"
					var value = ""
				}
				Object
				{
					var key = "Divide"
					var value = ""
				}
				Object
				{
					var key = "Down"
					var value = ""
				}
				Object
				{
					var key = "E"
					var value = ""
				}
				Object
				{
					var key = "Eight"
					var value = ""
				}
				Object
				{
					var key = "End"
					var value = ""
				}
				Object
				{
					var key = "Enter"
					var value = ""
				}
				Object
				{
					var key = "Equal"
					var value = ""
				}
				Object
				{
					var key = "Escape"
					var value = ""
				}
				Object
				{
					var key = "F"
					var value = ""
				}
				Object
				{
					var key = "F1"
					var value = ""
				}
				Object
				{
					var key = "F10"
					var value = ""
				}
				Object
				{
					var key = "F11"
					var value = ""
				}
				Object
				{
					var key = "F12"
					var value = ""
				}
				Object
				{
					var key = "F2"
					var value = ""
				}
				Object
				{
					var key = "F3"
					var value = ""
				}
				Object
				{
					var key = "F4"
					var value = ""
				}
				Object
				{
					var key = "F5"
					var value = ""
				}
				Object
				{
					var key = "F6"
					var value = ""
				}
				Object
				{
					var key = "F7"
					var value = ""
				}
				Object
				{
					var key = "F8"
					var value = ""
				}
				Object
				{
					var key = "F9"
					var value = ""
				}
				Object
				{
					var key = "Five"
					var value = ""
				}
				Object
				{
					var key = "Four"
					var value = ""
				}
				Object
				{
					var key = "G"
					var value = ""
				}
				Object
				{
					var key = "H"
					var value = ""
				}
				Object
				{
					var key = "Home"
					var value = ""
				}
				Object
				{
					var key = "I"
					var value = ""
				}
				Object
				{
					var key = "J"
					var value = ""
				}
				Object
				{
					var key = "K"
					var value = ""
				}
				Object
				{
					var key = "L"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "LeftBracket"
					var value = ""
				}
				Object
				{
					var key = "M"
					var value = ""
				}
				Object
				{
					var key = "Minus"
					var value = ""
				}
				Object
				{
					var key = "Multiply"
					var value = ""
				}
				Object
				{
					var key = "N"
					var value = ""
				}
				Object
				{
					var key = "Nine"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "NumPad0"
					var value = ""
				}
				Object
				{
					var key = "NumPad1"
					var value = ""
				}
				Object
				{
					var key = "NumPad2"
					var value = ""
				}
				Object
				{
					var key = "NumPad3"
					var value = ""
				}
				Object
				{
					var key = "NumPad4"
					var value = ""
				}
				Object
				{
					var key = "NumPad5"
					var value = ""
				}
				Object
				{
					var key = "NumPad6"
					var value = ""
				}
				Object
				{
					var key = "NumPad7"
					var value = ""
				}
				Object
				{
					var key = "NumPad8"
					var value = ""
				}
				Object
				{
					var key = "NumPad9"
					var value = ""
				}
				Object
				{
					var key = "O"
					var value = ""
				}
				Object
				{
					var key = "One"
					var value = ""
				}
				Object
				{
					var key = "P"
					var value = ""
				}
				Object
				{
					var key = "PageDown"
					var value = ""
				}
				Object
				{
					var key = "PageUp"
					var value = ""
				}
				Object
				{
					var key = "Period"
					var value = ""
				}
				Object
				{
					var key = "Q"
					var value = ""
				}
				Object
				{
					var key = "R"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "RightBracket"
					var value = ""
				}
				Object
				{
					var key = "S"
					var value = ""
				}
				Object
				{
					var key = "Semicolon"
					var value = ""
				}
				Object
				{
					var key = "Seven"
					var value = ""
				}
				Object
				{
					var key = "Shift"
					var value = ""
				}
				Object
				{
					var key = "Six"
					var value = ""
				}
				Object
				{
					var key = "Slash"
					var value = ""
				}
				Object
				{
					var key = "Space"
					var value = ""
				}
				Object
				{
					var key = "Subtract"
					var value = ""
				}
				Object
				{
					var key = "T"
					var value = ""
				}
				Object
				{
					var key = "Tab"
					var value = ""
				}
				Object
				{
					var key = "Three"
					var value = ""
				}
				Object
				{
					var key = "Tilde"
					var value = ""
				}
				Object
				{
					var key = "Two"
					var value = ""
				}
				Object
				{
					var key = "U"
					var value = ""
				}
				Object
				{
					var key = "Unknown"
					var value = ""
				}
				Object
				{
					var key = "Up"
					var value = ""
				}
				Object
				{
					var key = "V"
					var value = ""
				}
				Object
				{
					var key = "W"
					var value = ""
				}
				Object
				{
					var key = "X"
					var value = ""
				}
				Object
				{
					var key = "Y"
					var value = ""
				}
				Object
				{
					var key = "Z"
					var value = ""
				}
				Object
				{
					var key = "Zero"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureAddressing"
			var EnumValues = Map
			{
				Object
				{
					var key = "Clamp"
					var value = ""
				}
				Object
				{
					var key = "Mirror"
					var value = ""
				}
				Object
				{
					var key = "Repeat"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GraphicsQuality"
			var EnumValues = Map
			{
				Object
				{
					var key = "High"
					var value = ""
				}
				Object
				{
					var key = "Low"
					var value = ""
				}
				Object
				{
					var key = "Medium"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Location"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomCenter"
					var value = ""
				}
				Object
				{
					var key = "BottomLeft"
					var value = ""
				}
				Object
				{
					var key = "BottomRight"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "CenterLeft"
					var value = ""
				}
				Object
				{
					var key = "CenterRight"
					var value = ""
				}
				Object
				{
					var key = "TopCenter"
					var value = ""
				}
				Object
				{
					var key = "TopLeft"
					var value = ""
				}
				Object
				{
					var key = "TopRight"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SplineAnimatorMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Exact"
					var value = ""
				}
				Object
				{
					var key = "Spring"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoGrab"
			var EnumValues = Map
			{
				Object
				{
					var key = "Hold"
					var value = ""
				}
				Object
				{
					var key = "Toggle"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BlendMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Enabled"
					var value = ""
				}
				Object
				{
					var key = "Separate"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioMixTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "AutoDetect"
					var value = ""
				}
				Object
				{
					var key = "FiveOne"
					var value = ""
				}
				Object
				{
					var key = "Mono"
					var value = ""
				}
				Object
				{
					var key = "Quad"
					var value = ""
				}
				Object
				{
					var key = "SevenOne"
					var value = ""
				}
				Object
				{
					var key = "Stereo"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "VertexElementType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Byte"
					var value = ""
				}
				Object
				{
					var key = "Half"
					var value = ""
				}
				Object
				{
					var key = "NormByte"
					var value = ""
				}
				Object
				{
					var key = "NormShort"
					var value = ""
				}
				Object
				{
					var key = "Real"
					var value = ""
				}
				Object
				{
					var key = "Short"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "JointToolTypes3D"
			var EnumValues = Map
			{
				Object
				{
					var key = "FixedAngleJoint"
					var value = ""
				}
				Object
				{
					var key = "GearJoint"
					var value = ""
				}
				Object
				{
					var key = "LinearAxisJoint"
					var value = ""
				}
				Object
				{
					var key = "ObjectLink"
					var value = ""
				}
				Object
				{
					var key = "PositionJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint"
					var value = ""
				}
				Object
				{
					var key = "PulleyJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint"
					var value = ""
				}
				Object
				{
					var key = "StickJoint"
					var value = ""
				}
				Object
				{
					var key = "UniversalJoint"
					var value = ""
				}
				Object
				{
					var key = "UprightJoint"
					var value = ""
				}
				Object
				{
					var key = "WeldJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TestEnum"
			var EnumValues = Map
			{
				Object
				{
					var key = "An"
					var value = ""
				}
				Object
				{
					var key = "Annoying"
					var value = ""
				}
				Object
				{
					var key = "Choice"
					var value = ""
				}
				Object
				{
					var key = "This"
					var value = ""
				}
				Object
				{
					var key = "Was"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureCompression"
			var EnumValues = Map
			{
				Object
				{
					var key = "BC1"
					var value = ""
				}
				Object
				{
					var key = "BC2"
					var value = ""
				}
				Object
				{
					var key = "BC3"
					var value = ""
				}
				Object
				{
					var key = "BC4"
					var value = ""
				}
				Object
				{
					var key = "BC5"
					var value = ""
				}
				Object
				{
					var key = "BC6"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BlendEquation"
			var EnumValues = Map
			{
				Object
				{
					var key = "Add"
					var value = ""
				}
				Object
				{
					var key = "Max"
					var value = ""
				}
				Object
				{
					var key = "Min"
					var value = ""
				}
				Object
				{
					var key = "ReverseSubtract"
					var value = ""
				}
				Object
				{
					var key = "Subtract"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoBasis"
			var EnumValues = Map
			{
				Object
				{
					var key = "Local"
					var value = ""
				}
				Object
				{
					var key = "World"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CameraDragMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "NotActive"
					var value = ""
				}
				Object
				{
					var key = "Pan"
					var value = ""
				}
				Object
				{
					var key = "Rotation"
					var value = ""
				}
				Object
				{
					var key = "Zoom"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteParticleGeometryMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Beam"
					var value = ""
				}
				Object
				{
					var key = "Billboarded"
					var value = ""
				}
				Object
				{
					var key = "FaceVelocity"
					var value = ""
				}
				Object
				{
					var key = "Flat"
					var value = ""
				}
				Object
				{
					var key = "Outward"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "NetRefreshResult"
			var EnumValues = Map
			{
				Object
				{
					var key = "DirectBasicHostInfo"
					var value = ""
				}
				Object
				{
					var key = "ExtraHostInfo"
					var value = ""
				}
				Object
				{
					var key = "IndirectBasicHostInfo"
					var value = ""
				}
				Object
				{
					var key = "NoResponse"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Network"
			var EnumValues = Map
			{
				Object
				{
					var key = "Internet"
					var value = ""
				}
				Object
				{
					var key = "LAN"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "NetUserAddResponse"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureCompareMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Enabled"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsIslandPreProcessingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "ColliderCount"
					var value = ""
				}
				Object
				{
					var key = "ConstraintCount"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TcpSocketBind"
			var EnumValues = Map
			{
				Object
				{
					var key = "Any"
					var value = ""
				}
				Object
				{
					var key = "Loopback"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteSampling"
			var EnumValues = Map
			{
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "Nearest"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LinkState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Connected"
					var value = ""
				}
				Object
				{
					var key = "Disconnected"
					var value = ""
				}
				Object
				{
					var key = "ReceivedConnectRequest"
					var value = ""
				}
				Object
				{
					var key = "ReceivedDisconnectNotice"
					var value = ""
				}
				Object
				{
					var key = "ReceivedNegativeConnectResponse"
					var value = ""
				}
				Object
				{
					var key = "SentConnectRequest"
					var value = ""
				}
				Object
				{
					var key = "SentDisconnectNotice"
					var value = ""
				}
				Object
				{
					var key = "SentNegativeConnectResponse"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "HeightTextureSelect"
			var EnumValues = Map
			{
				Object
				{
					var key = "Texture0"
					var value = ""
				}
				Object
				{
					var key = "Texture1"
					var value = ""
				}
				Object
				{
					var key = "Texture2"
					var value = ""
				}
				Object
				{
					var key = "Texture3"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureFiltering"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bilinear"
					var value = ""
				}
				Object
				{
					var key = "Nearest"
					var value = ""
				}
				Object
				{
					var key = "Trilinear"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DockArea"
			var EnumValues = Map
			{
				Object
				{
					var key = "BotTool"
					var value = ""
				}
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Count"
					var value = ""
				}
				Object
				{
					var key = "Floating"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
				Object
				{
					var key = "TopTool"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsSolverPositionCorrection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Baumgarte"
					var value = ""
				}
				Object
				{
					var key = "PostStabilization"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AnimationBlendMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Auto"
					var value = ""
				}
				Object
				{
					var key = "Manual"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshAutoComputeMethod"
			var EnumValues = Map
			{
				Object
				{
					var key = "MarchingSquares"
					var value = ""
				}
				Object
				{
					var key = "Pixels"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CellIndexType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Absoulte"
					var value = ""
				}
				Object
				{
					var key = "Local"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BasicType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Boolean"
					var value = ""
				}
				Object
				{
					var key = "Boolean2"
					var value = ""
				}
				Object
				{
					var key = "Boolean3"
					var value = ""
				}
				Object
				{
					var key = "Boolean4"
					var value = ""
				}
				Object
				{
					var key = "Byte"
					var value = ""
				}
				Object
				{
					var key = "DoubleInteger"
					var value = ""
				}
				Object
				{
					var key = "DoubleReal"
					var value = ""
				}
				Object
				{
					var key = "Integer"
					var value = ""
				}
				Object
				{
					var key = "Integer2"
					var value = ""
				}
				Object
				{
					var key = "Integer3"
					var value = ""
				}
				Object
				{
					var key = "Integer4"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Quaternion"
					var value = ""
				}
				Object
				{
					var key = "Real"
					var value = ""
				}
				Object
				{
					var key = "Real2"
					var value = ""
				}
				Object
				{
					var key = "Real3"
					var value = ""
				}
				Object
				{
					var key = "Real3x3"
					var value = ""
				}
				Object
				{
					var key = "Real4"
					var value = ""
				}
				Object
				{
					var key = "Real4x4"
					var value = ""
				}
				Object
				{
					var key = "String"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ActionExecuteMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FrameUpdate"
					var value = ""
				}
				Object
				{
					var key = "LogicUpdate"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Buttons"
			var EnumValues = Map
			{
				Object
				{
					var key = "A"
					var value = ""
				}
				Object
				{
					var key = "AnyButton"
					var value = ""
				}
				Object
				{
					var key = "B"
					var value = ""
				}
				Object
				{
					var key = "Back"
					var value = ""
				}
				Object
				{
					var key = "DpadDown"
					var value = ""
				}
				Object
				{
					var key = "DpadDownFiltered"
					var value = ""
				}
				Object
				{
					var key = "DpadLeft"
					var value = ""
				}
				Object
				{
					var key = "DpadLeftFiltered"
					var value = ""
				}
				Object
				{
					var key = "DpadRight"
					var value = ""
				}
				Object
				{
					var key = "DpadRightFiltered"
					var value = ""
				}
				Object
				{
					var key = "DpadUp"
					var value = ""
				}
				Object
				{
					var key = "DpadUpFiltered"
					var value = ""
				}
				Object
				{
					var key = "LeftShoulder"
					var value = ""
				}
				Object
				{
					var key = "LeftThumb"
					var value = ""
				}
				Object
				{
					var key = "RightShoulder"
					var value = ""
				}
				Object
				{
					var key = "RightThumb"
					var value = ""
				}
				Object
				{
					var key = "Start"
					var value = ""
				}
				Object
				{
					var key = "StickDown"
					var value = ""
				}
				Object
				{
					var key = "StickLeft"
					var value = ""
				}
				Object
				{
					var key = "StickRight"
					var value = ""
				}
				Object
				{
					var key = "StickUp"
					var value = ""
				}
				Object
				{
					var key = "X"
					var value = ""
				}
				Object
				{
					var key = "Y"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TrackType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Component"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "Object"
					var value = ""
				}
				Object
				{
					var key = "Property"
					var value = ""
				}
				Object
				{
					var key = "SubProperty"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoDragMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Line"
					var value = ""
				}
				Object
				{
					var key = "Plane"
					var value = ""
				}
				Object
				{
					var key = "ViewPlane"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CastFilterState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "DefaultBehavior"
					var value = ""
				}
				Object
				{
					var key = "Reject"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "RouteMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Exclude"
					var value = ""
				}
				Object
				{
					var key = "Include"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsSolverType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Basic"
					var value = ""
				}
				Object
				{
					var key = "GenericBasic"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Threaded"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SplineType"
			var EnumValues = Map
			{
				Object
				{
					var key = "BSpline"
					var value = ""
				}
				Object
				{
					var key = "CatmulRom"
					var value = ""
				}
				Object
				{
					var key = "Linear"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureCompareFunc"
			var EnumValues = Map
			{
				Object
				{
					var key = "Always"
					var value = ""
				}
				Object
				{
					var key = "Equal"
					var value = ""
				}
				Object
				{
					var key = "Greater"
					var value = ""
				}
				Object
				{
					var key = "GreaterEqual"
					var value = ""
				}
				Object
				{
					var key = "Less"
					var value = ""
				}
				Object
				{
					var key = "LessEqual"
					var value = ""
				}
				Object
				{
					var key = "Never"
					var value = ""
				}
				Object
				{
					var key = "NotEqual"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteParticleAnimationMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Looping"
					var value = ""
				}
				Object
				{
					var key = "Single"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StencilOp"
			var EnumValues = Map
			{
				Object
				{
					var key = "Decrement"
					var value = ""
				}
				Object
				{
					var key = "DecrementWrap"
					var value = ""
				}
				Object
				{
					var key = "Increment"
					var value = ""
				}
				Object
				{
					var key = "IncrementWrap"
					var value = ""
				}
				Object
				{
					var key = "Invert"
					var value = ""
				}
				Object
				{
					var key = "Keep"
					var value = ""
				}
				Object
				{
					var key = "Replace"
					var value = ""
				}
				Object
				{
					var key = "Zero"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ControlMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FirstPerson"
					var value = ""
				}
				Object
				{
					var key = "Orbit"
					var value = ""
				}
				Object
				{
					var key = "ZPlane"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Ease"
			var EnumValues = Map
			{
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "QuadIn"
					var value = ""
				}
				Object
				{
					var key = "QuadInOut"
					var value = ""
				}
				Object
				{
					var key = "QuadOut"
					var value = ""
				}
				Object
				{
					var key = "SinIn"
					var value = ""
				}
				Object
				{
					var key = "SinInOut"
					var value = ""
				}
				Object
				{
					var key = "SinOut"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Receipt"
			var EnumValues = Map
			{
				Object
				{
					var key = "ACK"
					var value = ""
				}
				Object
				{
					var key = "EXPIRED"
					var value = ""
				}
				Object
				{
					var key = "MAYBE"
					var value = ""
				}
				Object
				{
					var key = "NAK"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "InternetProtocol"
			var EnumValues = Map
			{
				Object
				{
					var key = "Both"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
				Object
				{
					var key = "V4"
					var value = ""
				}
				Object
				{
					var key = "V6"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ScaleConversion"
			var EnumValues = Map
			{
				Object
				{
					var key = "CentimeterToInches"
					var value = ""
				}
				Object
				{
					var key = "CentimeterToMeter"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "InchesToCentimenters"
					var value = ""
				}
				Object
				{
					var key = "InchesToMeters"
					var value = ""
				}
				Object
				{
					var key = "MetersToCentimeters"
					var value = ""
				}
				Object
				{
					var key = "MetersToInches"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioLatency"
			var EnumValues = Map
			{
				Object
				{
					var key = "High"
					var value = ""
				}
				Object
				{
					var key = "Low"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "HorizontalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiSizePolicy"
			var EnumValues = Map
			{
				Object
				{
					var key = "Auto"
					var value = ""
				}
				Object
				{
					var key = "Fixed"
					var value = ""
				}
				Object
				{
					var key = "Flex"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "WindowFullscreenMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FullScreen"
					var value = ""
				}
				Object
				{
					var key = "FullScreenWindowed"
					var value = ""
				}
				Object
				{
					var key = "Windowed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MeshImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "MultiMesh"
					var value = ""
				}
				Object
				{
					var key = "NoMesh"
					var value = ""
				}
				Object
				{
					var key = "SingleMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TransferMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Immediate"
					var value = ""
				}
				Object
				{
					var key = "Ordered"
					var value = ""
				}
				Object
				{
					var key = "Sequenced"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GeometryValue"
			var EnumValues = Map
			{
				Object
				{
					var key = "Albedo"
					var value = ""
				}
				Object
				{
					var key = "Depth"
					var value = ""
				}
				Object
				{
					var key = "Metallic"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Roughness"
					var value = ""
				}
				Object
				{
					var key = "Specular"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DynamicsCompressionTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "Compressor"
					var value = ""
				}
				Object
				{
					var key = "Expander"
					var value = ""
				}
				Object
				{
					var key = "Gate"
					var value = ""
				}
				Object
				{
					var key = "Limiter"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "KeyState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Down"
					var value = ""
				}
				Object
				{
					var key = "Repeated"
					var value = ""
				}
				Object
				{
					var key = "Up"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BasisType"
			var EnumValues = Map
			{
				Object
				{
					var key = "NegativeX"
					var value = ""
				}
				Object
				{
					var key = "NegativeY"
					var value = ""
				}
				Object
				{
					var key = "NegativeZ"
					var value = ""
				}
				Object
				{
					var key = "PositiveX"
					var value = ""
				}
				Object
				{
					var key = "PositiveY"
					var value = ""
				}
				Object
				{
					var key = "PositiveZ"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpringDebugDrawMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Always"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "WhenNoMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AuthorityMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Dynamic"
					var value = ""
				}
				Object
				{
					var key = "Fixed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsSolverSubType"
			var EnumValues = Map
			{
				Object
				{
					var key = "BasicSolving"
					var value = ""
				}
				Object
				{
					var key = "BlockSolving"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReplicaStreamMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Clone"
					var value = ""
				}
				Object
				{
					var key = "Destroy"
					var value = ""
				}
				Object
				{
					var key = "Forget"
					var value = ""
				}
				Object
				{
					var key = "ReverseReplicaChannels"
					var value = ""
				}
				Object
				{
					var key = "Spawn"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiDockMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConnectResponse"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
				Object
				{
					var key = "DenyFull"
					var value = ""
				}
				Object
				{
					var key = "DenyTimeout"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteParticleSortMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "BackToFrontView"
					var value = ""
				}
				Object
				{
					var key = "BackToFrontZ"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackView"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackZ"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReplicatorMessageType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Change"
					var value = ""
				}
				Object
				{
					var key = "Clone"
					var value = ""
				}
				Object
				{
					var key = "ConnectConfirmation"
					var value = ""
				}
				Object
				{
					var key = "CreateContextItems"
					var value = ""
				}
				Object
				{
					var key = "Destroy"
					var value = ""
				}
				Object
				{
					var key = "EmplaceContextItems"
					var value = ""
				}
				Object
				{
					var key = "Forget"
					var value = ""
				}
				Object
				{
					var key = "Interrupt"
					var value = ""
				}
				Object
				{
					var key = "ReplicaTypeItems"
					var value = ""
				}
				Object
				{
					var key = "ReverseReplicaChannels"
					var value = ""
				}
				Object
				{
					var key = "Spawn"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsContactTangentTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "OrthonormalTangents"
					var value = ""
				}
				Object
				{
					var key = "RandomTangents"
					var value = ""
				}
				Object
				{
					var key = "VelocityTangents"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshAutoComputeMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Alpha"
					var value = ""
				}
				Object
				{
					var key = "Intensity"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ShadowResolution"
			var EnumValues = Map
			{
				Object
				{
					var key = "High"
					var value = ""
				}
				Object
				{
					var key = "Low"
					var value = ""
				}
				Object
				{
					var key = "Medium"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "InputDevice"
			var EnumValues = Map
			{
				Object
				{
					var key = "Gamepad"
					var value = ""
				}
				Object
				{
					var key = "Joystick"
					var value = ""
				}
				Object
				{
					var key = "Keyboard"
					var value = ""
				}
				Object
				{
					var key = "Mouse"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "HeightTool"
			var EnumValues = Map
			{
				Object
				{
					var key = "CreateDestroy"
					var value = ""
				}
				Object
				{
					var key = "Flatten"
					var value = ""
				}
				Object
				{
					var key = "RaiseLower"
					var value = ""
				}
				Object
				{
					var key = "SmoothSharpen"
					var value = ""
				}
				Object
				{
					var key = "WeightPainter"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ShaderInputType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bool"
					var value = ""
				}
				Object
				{
					var key = "Count"
					var value = ""
				}
				Object
				{
					var key = "Float"
					var value = ""
				}
				Object
				{
					var key = "Int"
					var value = ""
				}
				Object
				{
					var key = "IntVec2"
					var value = ""
				}
				Object
				{
					var key = "IntVec3"
					var value = ""
				}
				Object
				{
					var key = "IntVec4"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "Mat3"
					var value = ""
				}
				Object
				{
					var key = "Mat4"
					var value = ""
				}
				Object
				{
					var key = "Texture"
					var value = ""
				}
				Object
				{
					var key = "Vec2"
					var value = ""
				}
				Object
				{
					var key = "Vec3"
					var value = ""
				}
				Object
				{
					var key = "Vec4"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ZUiHighlightColorMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Hierarchy"
					var value = ""
				}
				Object
				{
					var key = "Local"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiStackLayoutDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomToTop"
					var value = ""
				}
				Object
				{
					var key = "LeftToRight"
					var value = ""
				}
				Object
				{
					var key = "RightToLeft"
					var value = ""
				}
				Object
				{
					var key = "TopToBottom"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TimeMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "ActualFrametime"
					var value = ""
				}
				Object
				{
					var key = "FixedFrametime"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "OrientationBases"
			var EnumValues = Map
			{
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "ForwardNegativeZUpY"
					var value = ""
				}
				Object
				{
					var key = "ForwardXUpY"
					var value = ""
				}
				Object
				{
					var key = "ForwardXUpZ"
					var value = ""
				}
				Object
				{
					var key = "ForwardYUpZ"
					var value = ""
				}
				Object
				{
					var key = "ForwardZUpY"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Enum"
			var EnumValues = Map
			{
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextAlign"
			var EnumValues = Map
			{
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Texture2D"
					var value = ""
				}
				Object
				{
					var key = "TextureCube"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TileEditor2DSubToolType"
			var EnumValues = Map
			{
				Object
				{
					var key = "DrawTool"
					var value = ""
				}
				Object
				{
					var key = "SelectionTool"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureMipMapping"
			var EnumValues = Map
			{
				Object
				{
					var key = "GpuGenerated"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "PreGenerated"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LoopingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Default"
					var value = ""
				}
				Object
				{
					var key = "Looping"
					var value = ""
				}
				Object
				{
					var key = "Once"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ProtocolMessageType"
			var EnumValues = Map
			{
				Object
				{
					var key = "ChannelClosed"
					var value = ""
				}
				Object
				{
					var key = "ChannelOpened"
					var value = ""
				}
				Object
				{
					var key = "ConnectRequest"
					var value = ""
				}
				Object
				{
					var key = "ConnectResponse"
					var value = ""
				}
				Object
				{
					var key = "DisconnectNotice"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "PacketSequenceHistory"
					var value = ""
				}
				Object
				{
					var key = "Reserved1"
					var value = ""
				}
				Object
				{
					var key = "Reserved2"
					var value = ""
				}
				Object
				{
					var key = "Reserved3"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiVerticalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReliabilityMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Reliable"
					var value = ""
				}
				Object
				{
					var key = "Unreliable"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TimeDisplay"
			var EnumValues = Map
			{
				Object
				{
					var key = "Frames"
					var value = ""
				}
				Object
				{
					var key = "Timecodes"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BlendFactor"
			var EnumValues = Map
			{
				Object
				{
					var key = "DestAlpha"
					var value = ""
				}
				Object
				{
					var key = "DestColor"
					var value = ""
				}
				Object
				{
					var key = "InvDestAlpha"
					var value = ""
				}
				Object
				{
					var key = "InvDestColor"
					var value = ""
				}
				Object
				{
					var key = "InvSourceAlpha"
					var value = ""
				}
				Object
				{
					var key = "InvSourceColor"
					var value = ""
				}
				Object
				{
					var key = "One"
					var value = ""
				}
				Object
				{
					var key = "SourceAlpha"
					var value = ""
				}
				Object
				{
					var key = "SourceAlphaSaturate"
					var value = ""
				}
				Object
				{
					var key = "SourceColor"
					var value = ""
				}
				Object
				{
					var key = "Zero"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TransmissionDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Incoming"
					var value = ""
				}
				Object
				{
					var key = "Outgoing"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReplicationPhase"
			var EnumValues = Map
			{
				Object
				{
					var key = "Change"
					var value = ""
				}
				Object
				{
					var key = "Initialization"
					var value = ""
				}
				Object
				{
					var key = "Uninitialization"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureAnisotropy"
			var EnumValues = Map
			{
				Object
				{
					var key = "x1"
					var value = ""
				}
				Object
				{
					var key = "x16"
					var value = ""
				}
				Object
				{
					var key = "x2"
					var value = ""
				}
				Object
				{
					var key = "x4"
					var value = ""
				}
				Object
				{
					var key = "x8"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsEffectEndCondition"
			var EnumValues = Map
			{
				Object
				{
					var key = "ClampToMax"
					var value = ""
				}
				Object
				{
					var key = "ContinueFalloff"
					var value = ""
				}
				Object
				{
					var key = "NoEffect"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureFormat"
			var EnumValues = Map
			{
				Object
				{
					var key = "Depth16"
					var value = ""
				}
				Object
				{
					var key = "Depth24"
					var value = ""
				}
				Object
				{
					var key = "Depth24Stencil8"
					var value = ""
				}
				Object
				{
					var key = "Depth32"
					var value = ""
				}
				Object
				{
					var key = "Depth32f"
					var value = ""
				}
				Object
				{
					var key = "Depth32fStencil8Pad24"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "R16"
					var value = ""
				}
				Object
				{
					var key = "R16f"
					var value = ""
				}
				Object
				{
					var key = "R32f"
					var value = ""
				}
				Object
				{
					var key = "R8"
					var value = ""
				}
				Object
				{
					var key = "RG16"
					var value = ""
				}
				Object
				{
					var key = "RG16f"
					var value = ""
				}
				Object
				{
					var key = "RG32f"
					var value = ""
				}
				Object
				{
					var key = "RG8"
					var value = ""
				}
				Object
				{
					var key = "RGB16"
					var value = ""
				}
				Object
				{
					var key = "RGB16f"
					var value = ""
				}
				Object
				{
					var key = "RGB32f"
					var value = ""
				}
				Object
				{
					var key = "RGB8"
					var value = ""
				}
				Object
				{
					var key = "RGBA16"
					var value = ""
				}
				Object
				{
					var key = "RGBA16f"
					var value = ""
				}
				Object
				{
					var key = "RGBA32f"
					var value = ""
				}
				Object
				{
					var key = "RGBA8"
					var value = ""
				}
				Object
				{
					var key = "SRGB8"
					var value = ""
				}
				Object
				{
					var key = "SRGB8A8"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Cursor"
			var EnumValues = Map
			{
				Object
				{
					var key = "Arrow"
					var value = ""
				}
				Object
				{
					var key = "Cross"
					var value = ""
				}
				Object
				{
					var key = "Hand"
					var value = ""
				}
				Object
				{
					var key = "Invisible"
					var value = ""
				}
				Object
				{
					var key = "SizeAll"
					var value = ""
				}
				Object
				{
					var key = "SizeNESW"
					var value = ""
				}
				Object
				{
					var key = "SizeNS"
					var value = ""
				}
				Object
				{
					var key = "SizeNWSE"
					var value = ""
				}
				Object
				{
					var key = "SizeWE"
					var value = ""
				}
				Object
				{
					var key = "TextBeam"
					var value = ""
				}
				Object
				{
					var key = "Wait"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsIslandType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Composites"
					var value = ""
				}
				Object
				{
					var key = "ForcedOne"
					var value = ""
				}
				Object
				{
					var key = "Kinematics"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UpdateMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "TranslateRoot"
					var value = ""
				}
				Object
				{
					var key = "TranslateSelf"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FalloffCurveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "Log"
					var value = ""
				}
				Object
				{
					var key = "Sine"
					var value = ""
				}
				Object
				{
					var key = "SquareRoot"
					var value = ""
				}
				Object
				{
					var key = "Squared"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SoundPlayMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Looping"
					var value = ""
				}
				Object
				{
					var key = "Single"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PerspectiveMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Orthographic"
					var value = ""
				}
				Object
				{
					var key = "Perspective"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsEffectType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Buoyancy"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "Drag"
					var value = ""
				}
				Object
				{
					var key = "Flow"
					var value = ""
				}
				Object
				{
					var key = "Force"
					var value = ""
				}
				Object
				{
					var key = "Gravity"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "PointForce"
					var value = ""
				}
				Object
				{
					var key = "PointGravity"
					var value = ""
				}
				Object
				{
					var key = "Thrust"
					var value = ""
				}
				Object
				{
					var key = "Torque"
					var value = ""
				}
				Object
				{
					var key = "Vortex"
					var value = ""
				}
				Object
				{
					var key = "Wind"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshSnappingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Always"
					var value = ""
				}
				Object
				{
					var key = "IfClose"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PrimitiveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Lines"
					var value = ""
				}
				Object
				{
					var key = "Points"
					var value = ""
				}
				Object
				{
					var key = "Triangles"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConvergenceState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Active"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Resting"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Mode2DStates"
			var EnumValues = Map
			{
				Object
				{
					var key = "InheritFromSpace"
					var value = ""
				}
				Object
				{
					var key = "Mode2D"
					var value = ""
				}
				Object
				{
					var key = "Mode3D"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpringDebugDrawType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Sorted"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "ConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "NoMesh"
					var value = ""
				}
				Object
				{
					var key = "StaticMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CoreVertexType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Count"
					var value = ""
				}
				Object
				{
					var key = "Mesh"
					var value = ""
				}
				Object
				{
					var key = "SkinnedMesh"
					var value = ""
				}
				Object
				{
					var key = "Streamed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "NineSlices"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CogPathPreference"
			var EnumValues = Map
			{
				Object
				{
					var key = "Absolute"
					var value = ""
				}
				Object
				{
					var key = "CogRelative"
					var value = ""
				}
				Object
				{
					var key = "SpaceRelative"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioFileFormats"
			var EnumValues = Map
			{
				Object
				{
					var key = "OGG"
					var value = ""
				}
				Object
				{
					var key = "WAV"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ViewportScaling"
			var EnumValues = Map
			{
				Object
				{
					var key = "Exact"
					var value = ""
				}
				Object
				{
					var key = "Fill"
					var value = ""
				}
				Object
				{
					var key = "LargestMultiple"
					var value = ""
				}
				Object
				{
					var key = "Letterbox"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DisconnectReason"
			var EnumValues = Map
			{
				Object
				{
					var key = "Latency"
					var value = ""
				}
				Object
				{
					var key = "Request"
					var value = ""
				}
				Object
				{
					var key = "Timeout"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "WebBrowserModifiers"
			var EnumValues = Map
			{
				Object
				{
					var key = "Alt"
					var value = ""
				}
				Object
				{
					var key = "CapsLock"
					var value = ""
				}
				Object
				{
					var key = "Command"
					var value = ""
				}
				Object
				{
					var key = "Control"
					var value = ""
				}
				Object
				{
					var key = "IsKeyPad"
					var value = ""
				}
				Object
				{
					var key = "IsLeft"
					var value = ""
				}
				Object
				{
					var key = "IsRight"
					var value = ""
				}
				Object
				{
					var key = "LeftMouse"
					var value = ""
				}
				Object
				{
					var key = "MiddleMouse"
					var value = ""
				}
				Object
				{
					var key = "NumLock"
					var value = ""
				}
				Object
				{
					var key = "RightMouse"
					var value = ""
				}
				Object
				{
					var key = "Shift"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AnimationBlendType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Normalized"
					var value = ""
				}
				Object
				{
					var key = "Standard"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SoundSelectMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Random"
					var value = ""
				}
				Object
				{
					var key = "Sequential"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "WindowState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Maximize"
					var value = ""
				}
				Object
				{
					var key = "Minimize"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiHorizontalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteGeometryMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "ViewPlane"
					var value = ""
				}
				Object
				{
					var key = "ZPlane"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MeshEmitMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Edge"
					var value = ""
				}
				Object
				{
					var key = "Face"
					var value = ""
				}
				Object
				{
					var key = "Vertex"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CollisionFilterBlockType"
			var EnumValues = Map
			{
				Object
				{
					var key = "CollisionEndedBlock"
					var value = ""
				}
				Object
				{
					var key = "CollisionPersistedBlock"
					var value = ""
				}
				Object
				{
					var key = "CollisionStartedBlock"
					var value = ""
				}
				Object
				{
					var key = "PreSolveBlock"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DepthMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Read"
					var value = ""
				}
				Object
				{
					var key = "Write"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsMeshType"
			var EnumValues = Map
			{
				Object
				{
					var key = "ConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "PhysicsMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MouseButtons"
			var EnumValues = Map
			{
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Middle"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "XOneBack"
					var value = ""
				}
				Object
				{
					var key = "XTwoForward"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Authority"
			var EnumValues = Map
			{
				Object
				{
					var key = "Client"
					var value = ""
				}
				Object
				{
					var key = "Server"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ActionState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Completed"
					var value = ""
				}
				Object
				{
					var key = "Running"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StencilMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Enabled"
					var value = ""
				}
				Object
				{
					var key = "Separate"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ArrowHeadType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Arrow"
					var value = ""
				}
				Object
				{
					var key = "Cube"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SerializationMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "All"
					var value = ""
				}
				Object
				{
					var key = "Changed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DetectionMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Assume"
					var value = ""
				}
				Object
				{
					var key = "Automatic"
					var value = ""
				}
				Object
				{
					var key = "Manual"
					var value = ""
				}
				Object
				{
					var key = "Manumatic"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ScriptReloadMethod"
			var EnumValues = Map
			{
				Object
				{
					var key = "PatchObjects"
					var value = ""
				}
				Object
				{
					var key = "ReInitializeObjects"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "EditorMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Mode2D"
					var value = ""
				}
				Object
				{
					var key = "Mode3D"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ZUiHighlightMouseMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Enter"
					var value = ""
				}
				Object
				{
					var key = "EnterHierarchy"
					var value = ""
				}
				Object
				{
					var key = "Hover"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CullMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "BackFace"
					var value = ""
				}
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "FrontFace"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SendsEvents"
			var EnumValues = Map
			{
				Object
				{
					var key = "False"
					var value = ""
				}
				Object
				{
					var key = "True"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PerformanceMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "HighPerformance"
					var value = ""
				}
				Object
				{
					var key = "LowPerformance"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "JointToolTypes2D"
			var EnumValues = Map
			{
				Object
				{
					var key = "FixedAngleJoint"
					var value = ""
				}
				Object
				{
					var key = "GearJoint"
					var value = ""
				}
				Object
				{
					var key = "PositionJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint2d"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint2d"
					var value = ""
				}
				Object
				{
					var key = "StickJoint"
					var value = ""
				}
				Object
				{
					var key = "WeldJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint2d"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LauncherAutoRunMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "IfInstalled"
					var value = ""
				}
				Object
				{
					var key = "InstallAndRun"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoGrabMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Hold"
					var value = ""
				}
				Object
				{
					var key = "Toggle"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteOrigin"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomCenter"
					var value = ""
				}
				Object
				{
					var key = "BottomLeft"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "UpperLeft"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Placement"
			var EnumValues = Map
			{
				Object
				{
					var key = "CameraLocation"
					var value = ""
				}
				Object
				{
					var key = "LookAtPlane"
					var value = ""
				}
				Object
				{
					var key = "LookAtPoint"
					var value = ""
				}
				Object
				{
					var key = "OnTop"
					var value = ""
				}
				Object
				{
					var key = "PlaneXY"
					var value = ""
				}
				Object
				{
					var key = "ViewAtDepth"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpringSubTools"
			var EnumValues = Map
			{
				Object
				{
					var key = "Anchoring"
					var value = ""
				}
				Object
				{
					var key = "PointSelector"
					var value = ""
				}
				Object
				{
					var key = "RopeCreator"
					var value = ""
				}
				Object
				{
					var key = "SpringCreator"
					var value = ""
				}
				Object
				{
					var key = "SpringSelector"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SystemSpace"
			var EnumValues = Map
			{
				Object
				{
					var key = "LocalSpace"
					var value = ""
				}
				Object
				{
					var key = "WorldSpace"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureFace"
			var EnumValues = Map
			{
				Object
				{
					var key = "NegativeX"
					var value = ""
				}
				Object
				{
					var key = "NegativeY"
					var value = ""
				}
				Object
				{
					var key = "NegativeZ"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "PositiveX"
					var value = ""
				}
				Object
				{
					var key = "PositiveY"
					var value = ""
				}
				Object
				{
					var key = "PositiveZ"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LinkStatus"
			var EnumValues = Map
			{
				Object
				{
					var key = "AttemptingConnection"
					var value = ""
				}
				Object
				{
					var key = "Connected"
					var value = ""
				}
				Object
				{
					var key = "Disconnected"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "RigidBodyDynamicState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Dynamic"
					var value = ""
				}
				Object
				{
					var key = "Kinematic"
					var value = ""
				}
				Object
				{
					var key = "Static"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ImportMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FitToPatches"
					var value = ""
				}
				Object
				{
					var key = "MaintainAspectRatio"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SynthWaveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Noise"
					var value = ""
				}
				Object
				{
					var key = "SawWave"
					var value = ""
				}
				Object
				{
					var key = "SineWave"
					var value = ""
				}
				Object
				{
					var key = "SquareWave"
					var value = ""
				}
				Object
				{
					var key = "TriangleWave"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Verbosity"
			var EnumValues = Map
			{
				Object
				{
					var key = "Detailed"
					var value = ""
				}
				Object
				{
					var key = "Minimal"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConflictAction"
			var EnumValues = Map
			{
				Object
				{
					var key = "Replace"
					var value = ""
				}
				Object
				{
					var key = "Skip"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TabWidth"
			var EnumValues = Map
			{
				Object
				{
					var key = "FourSpaces"
					var value = ""
				}
				Object
				{
					var key = "TwoSpaces"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AnimationPlayMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Loop"
					var value = ""
				}
				Object
				{
					var key = "Pingpong"
					var value = ""
				}
				Object
				{
					var key = "PlayOnce"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UserConnectResponse"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
				Object
				{
					var key = "Pending"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AxisDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "X"
					var value = ""
				}
				Object
				{
					var key = "Y"
					var value = ""
				}
				Object
				{
					var key = "Z"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StoreResult"
			var EnumValues = Map
			{
				Object
				{
					var key = "Added"
					var value = ""
				}
				Object
				{
					var key = "Failed"
					var value = ""
				}
				Object
				{
					var key = "Replaced"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "VertexSemantic"
			var EnumValues = Map
			{
				Object
				{
					var key = "Aux0"
					var value = ""
				}
				Object
				{
					var key = "Aux1"
					var value = ""
				}
				Object
				{
					var key = "Aux2"
					var value = ""
				}
				Object
				{
					var key = "Aux3"
					var value = ""
				}
				Object
				{
					var key = "Aux4"
					var value = ""
				}
				Object
				{
					var key = "Aux5"
					var value = ""
				}
				Object
				{
					var key = "Bitangent"
					var value = ""
				}
				Object
				{
					var key = "BoneIndices"
					var value = ""
				}
				Object
				{
					var key = "BoneWeights"
					var value = ""
				}
				Object
				{
					var key = "Color"
					var value = ""
				}
				Object
				{
					var key = "ColorAux"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Position"
					var value = ""
				}
				Object
				{
					var key = "Tangent"
					var value = ""
				}
				Object
				{
					var key = "Uv"
					var value = ""
				}
				Object
				{
					var key = "UvAux"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextRounding"
			var EnumValues = Map
			{
				Object
				{
					var key = "LastCharacter"
					var value = ""
				}
				Object
				{
					var key = "Nearest"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PacketWriteResult"
			var EnumValues = Map
			{
				Object
				{
					var key = "Done_Fragment"
					var value = ""
				}
				Object
				{
					var key = "Done_Rejected"
					var value = ""
				}
				Object
				{
					var key = "Done_Whole"
					var value = ""
				}
				Object
				{
					var key = "NotDone_Fragment"
					var value = ""
				}
				Object
				{
					var key = "NotDone_None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CurveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "BSpline"
					var value = ""
				}
				Object
				{
					var key = "CatmulRom"
					var value = ""
				}
				Object
				{
					var key = "Linear"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ColliderType"
			var EnumValues = Map
			{
				Object
				{
					var key = "cBox"
					var value = ""
				}
				Object
				{
					var key = "cCapsule"
					var value = ""
				}
				Object
				{
					var key = "cConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "cCylinder"
					var value = ""
				}
				Object
				{
					var key = "cEllipsoid"
					var value = ""
				}
				Object
				{
					var key = "cHeightMap"
					var value = ""
				}
				Object
				{
					var key = "cInvalid"
					var value = ""
				}
				Object
				{
					var key = "cMesh"
					var value = ""
				}
				Object
				{
					var key = "cMultiConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "cSize"
					var value = ""
				}
				Object
				{
					var key = "cSphere"
					var value = ""
				}
			}
			var Description = "All possible collider types. Needed mostly for collision detection. The order is somewhat important as collision detection currently assumes that all simple shapes (primitive types) are before the complex shapes."
		}
		Object
		{
			var Name = "eUpdateTransformState"
			var EnumValues = Map
			{
				Object
				{
					var key = "cInitialize"
					var value = ""
				}
				Object
				{
					var key = "cUpdate"
					var value = ""
				}
			}
			var Description = "Internal enum used for determining what kind of transform update is happening."
		}
		Object
		{
			var Name = "InternalKeyState"
			var EnumValues = Map
			{
				Object
				{
					var key = "KeyHeld"
					var value = ""
				}
				Object
				{
					var key = "KeyNotHeld"
					var value = ""
				}
				Object
				{
					var key = "KeyPressed"
					var value = ""
				}
				Object
				{
					var key = "KeyReleased"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ObjectIndex"
			var EnumValues = Map
			{
				Object
				{
					var key = "IndexA"
					var value = ""
				}
				Object
				{
					var key = "IndexB"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReceiveState"
			var EnumValues = Map
			{
				Object
				{
					var key = "cCloseConnection"
					var value = ""
				}
				Object
				{
					var key = "cDataReceived"
					var value = ""
				}
				Object
				{
					var key = "cNextConnection"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Filter"
			var EnumValues = Map
			{
				Object
				{
					var key = "ActiveOffset"
					var value = ""
				}
				Object
				{
					var key = "DefaultOffset"
					var value = ""
				}
				Object
				{
					var key = "FilterFlag"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AtomFilter"
			var EnumValues = Map
			{
				Object
				{
					var key = "AngularAxis"
					var value = ""
				}
				Object
				{
					var key = "LinearAxis"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FragmentCountFilter"
			var EnumValues = Map
			{
				Object
				{
					var key = "FiveFragments"
					var value = ""
				}
				Object
				{
					var key = "FourFragments"
					var value = ""
				}
				Object
				{
					var key = "OneFragment"
					var value = ""
				}
				Object
				{
					var key = "SixFragments"
					var value = ""
				}
				Object
				{
					var key = "ThreeFragments"
					var value = ""
				}
				Object
				{
					var key = "TwoFragments"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FragmentFilter"
			var EnumValues = Map
			{
				Object
				{
					var key = "FreeAngularFragment"
					var value = ""
				}
				Object
				{
					var key = "FreeLinearFragment"
					var value = ""
				}
				Object
				{
					var key = "NoFreeAxesFragment"
					var value = ""
				}
				Object
				{
					var key = "SingleFragment"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DefaultAddOnFilters"
			var EnumValues = Map
			{
				Object
				{
					var key = "AllAngularAxes"
					var value = ""
				}
				Object
				{
					var key = "AllAxes"
					var value = ""
				}
				Object
				{
					var key = "AllLinearAxes"
					var value = ""
				}
				Object
				{
					var key = "SingleAngularAxis"
					var value = ""
				}
				Object
				{
					var key = "SingleAxis"
					var value = ""
				}
				Object
				{
					var key = "SingleLinearAxis"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BoundType"
			var EnumValues = Map
			{
				Object
				{
					var key = "PrismJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismJoint2d"
					var value = ""
				}
				Object
				{
					var key = "RevJoint"
					var value = ""
				}
				Object
				{
					var key = "RevJoint2d"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CollisionType"
			var EnumValues = Map
			{
				Object
				{
					var key = "CollisionEnded"
					var value = ""
				}
				Object
				{
					var key = "CollisionPersisted"
					var value = ""
				}
				Object
				{
					var key = "CollisionStarted"
					var value = ""
				}
			}
			var Description = "Used to determine what kind of collision this is during event sending."
		}
	}
	var Flags = Array
	{
		Object
		{
			var Name = "StreamCapabilities"
			var EnumValues = Map
			{
				Object
				{
					var key = "GetCount"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Read"
					var value = ""
				}
				Object
				{
					var key = "Seek"
					var value = ""
				}
				Object
				{
					var key = "SetCount"
					var value = ""
				}
				Object
				{
					var key = "Write"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TestFlags"
			var EnumValues = Map
			{
				Object
				{
					var key = "And"
					var value = ""
				}
				Object
				{
					var key = "Caps"
					var value = ""
				}
				Object
				{
					var key = "Enforcing"
					var value = ""
				}
				Object
				{
					var key = "Enum"
					var value = ""
				}
				Object
				{
					var key = "Flag"
					var value = ""
				}
				Object
				{
					var key = "On"
					var value = ""
				}
				Object
				{
					var key = "Seems"
					var value = ""
				}
				Object
				{
					var key = "Strict"
					var value = ""
				}
				Object
				{
					var key = "Too"
					var value = ""
				}
				Object
				{
					var key = "Values"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Members"
			var EnumValues = Map
			{
				Object
				{
					var key = "All"
					var value = ""
				}
				Object
				{
					var key = "Extension"
					var value = ""
				}
				Object
				{
					var key = "Inherited"
					var value = ""
				}
				Object
				{
					var key = "InheritedInstance"
					var value = ""
				}
				Object
				{
					var key = "InheritedInstanceStatic"
					var value = ""
				}
				Object
				{
					var key = "InheritedStatic"
					var value = ""
				}
				Object
				{
					var key = "Instance"
					var value = ""
				}
				Object
				{
					var key = "InstanceStatic"
					var value = ""
				}
				Object
				{
					var key = "Static"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FileMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Append"
					var value = ""
				}
				Object
				{
					var key = "Read"
					var value = ""
				}
				Object
				{
					var key = "Sequential"
					var value = ""
				}
				Object
				{
					var key = "ShareDelete"
					var value = ""
				}
				Object
				{
					var key = "ShareRead"
					var value = ""
				}
				Object
				{
					var key = "ShareWrite"
					var value = ""
				}
				Object
				{
					var key = "Write"
					var value = ""
				}
			}
			var Description = ""
		}
	}
}
