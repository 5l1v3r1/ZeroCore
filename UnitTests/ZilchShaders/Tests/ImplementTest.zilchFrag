// Test a static method on a type that can't be constructed
struct MathImplements
{
    [Static][Extension(typeid(Math))][Implements]
    function Log10(value : Real) : Real
    {
        return Math.Log(value) / Math.Log(10.0);
    }
}

// Test a static method on a struct type
struct Real3Implements
{
    [Static][Extension(typeid(Real3))][Implements]
    function GetAxis(value : Integer) : Real3
    { 
        var result = Real3();
        result[value] = 1.0;
        return result;
    }
}

// Test an instance function on a struct type
struct Real3x3Implements
{
    [Extension(typeid(Real3x3))][Implements]
    function GetByIndex(index : Integer) : Real
    {
        return this[index / 3][index % 3];
    }
}

// Test an instance getter that already exists
struct Real3Count
{
    [Extension(typeid(Real3))][Implements]
    var Count : Integer
    {
        get
        {
            var x = this.X as Integer;
            var y = this.Y as Integer;
            var z = this.Z as Integer;
            return x + y + z;
        }
    }
    
    [Extension(typeid(Real3))][Implements][Static]
    var Count : Integer
    {
        get { return 3; }
    }
}

// Test an instance getter that already exists
struct MathDot
{
    [Extension(typeid(Math))][Implements][Static]
    function Dot(a : Real3, b : Real3) : Real
    {
        return 1;
    }
}

[Pixel]
struct ImplementTest
{
    function Main()
    {
        var log10 = Math.Log10(1.0);
        
        var m = Real3x3(); 
        var r = m.GetByIndex(0);
        var v = Real3.GetAxis(0);
        var count = Real3.Count;
        count = v.Count;
        var dot = Math.Dot(v, v);
    }
}
