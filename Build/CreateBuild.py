import os
import zipfile
import re

# Easily zip up a directory, but the don't include the full path in the zip.
def zip_directory(zip, path, relative="", filter=None):
  if not os.path.isdir(path):
    raise Exception("Attempting to zip '" + path + "' failed because it was not a directory")
  for root, dirs, files in os.walk(path):
    for file in files:
      if not filter or filter(file):
        zip.write(os.path.join(root, file), os.path.join(relative, os.path.relpath(root, path), file))

# Make sure we don't include any build artifacts (for all platforms).
def artifact_filter(filename):
  if filename.endswith(".pdb"):
    return False
  if filename.endswith(".ilk"):
    return False
  if filename.endswith(".exp"):
    return False
  if filename.endswith(".lib"):
    return False
  if filename.endswith(".wast"):
    return False
  if filename == "BuildInfo.data":
    return False
  return True

# Get the build version of the engine (generated by cmake).
print "Reading BuildVersion.inl"
buildVersionFile = open("../Systems/Engine/BuildVersion.inl","r")
buildVersionContents = buildVersionFile.read()

# Extract the important pieces of the build version.
major = re.search('ZeroMajorVersion ([0-9]+)', buildVersionContents).group(1)
minor = re.search('ZeroMinorVersion ([0-9]+)', buildVersionContents).group(1)
patch = re.search('ZeroPatchVersion ([0-9]+)', buildVersionContents).group(1)
revision = re.search('ZeroRevisionId ([0-9]+)', buildVersionContents).group(1)
shortChangeSet = re.search('ZeroShortChangeSet ([0-9a-fA-F]+)', buildVersionContents).group(1)

# The platform comes from an environmental variable passed by the build server.
# If not available (such as we're testing) then use Win32.
platform = os.environ.get("ZeroPlatform")
if not platform:
  print "Environment variable 'ZeroPlatform' not detected."
  platform = "Win32"

# Build up the full build version string (for example: "1.4.0.847.5411767e62d3-Win32").
versionString = major + "." + minor + "." + patch + "." + revision + "." + shortChangeSet + "-" + platform

outputZerobuild = "ZeroEngineSetup." + versionString + ".zerobuild"
print "Outputting " + outputZerobuild
zip = zipfile.ZipFile(outputZerobuild, "w", zipfile.ZIP_DEFLATED)
zip_directory(zip, "../Resources", "Resources")
zip_directory(zip, "../Data", "Data")

# Copy build executables and files from the build output directory.
zeroEditorBuildOutput = os.environ.get("ZeroEditorBuildOutput")
if not zeroEditorBuildOutput:
  print "Environment variable 'ZeroEditorBuildOutput' not detected."
  zeroEditorBuildOutput = "../BuildOutput/Out/Windows_VS_2017/Debug/ZeroEditor/"

zip_directory(zip, zeroEditorBuildOutput, "", artifact_filter)

print "Completed " + outputZerobuild
